<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Upcoming]]></title>
    <url>%2Fposts%2Fffffffff%2F</url>
    <content type="text"><![CDATA[Still transferring previous articles from other platforms. Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/ffffffff/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>nil</category>
      </categories>
      <tags>
        <tag>nil</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Binary Tree]]></title>
    <url>%2Fposts%2Fe0e2589a%2F</url>
    <content type="text"><![CDATA[[TOC] Definition Traversing binary tree Complexity Analysis Definition# Binary Tree Each node has only two childs 123456public class TreeNode &#123; int val; TreeNode left; TreeNode right; TreeNode(int x) &#123; val = x; &#125;&#125; Application BST, Red-black tree Heap Traversing binary tree# 3 types Pre-order: root-left-right In-order: left-root-right We will get an ordered list after inorder traversing a BST Post-order: left-right-root Recursive traversal solution 1234567/* Preorder Traversal - Recursive Solution*/public void preorder(TreeNode root, ArrayList&lt;Integer&gt; result) &#123; if (root != null) return null; result.add(root.val); // visit the root preorder(root.left, result); // traverse left subtree preorder(root.right, result); // traverse right subtree&#125; 1234567/* Inorder Traversal - Recursive Solution*/public void inorder(TreeNode root, ArrayList&lt;Integer&gt; result) &#123; if (root != null) return null; inorder(root.left, result); result.add(root.val); inorder(root.right, result);&#125; 1234567/* Postorder Traversal - Recursive Solution*/public void postorder(TreeNode root, ArrayList&lt;Integer&gt; result) &#123; if (root != null) return null; postorder(root.left, result); postorder(root.right, result); result.add(root.val);&#125; Iterative traversal solution 123456789101112131415161718// Preorder Traversal - Iterative Solutionpublic List&lt;Integer&gt; preorder(TreeNode root) &#123; List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); if (root == null) return ret; Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;(); stack.push(root); TreeNode node; while (!stack.empty()) &#123; node = stack.pop(); // root -&gt; left -&gt; right ret.add(node.val); if (node.right != null) stack.push(node.right); if (node.left != null) stack.push(node.left); &#125; return answer;&#125; 12345// Inorder// Left -&gt; Root -&gt; Right (Stack, FILO)if (node.right != null) stack.push(node.right); ret.add(node.val); if (node.left != null) stack.push(node.left); DaC perspective 12345678910111213// Thought: Divide and Conquerpublic ArrayList&lt;Integer&gt; dacTraversal(TreeNode root) &#123; if (root != null) return null; ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;(); // Divide ArrayList&lt;Integer&gt; left = dacTraversal(root.left); ArrayList&lt;Integer&gt; right = dacTraversal(root.right); // Conquer (adjust the order here) // result.add(root.val); result.addAll(left); result.addAll(right); // preorder result.addAll(left); result.add(root.val); result.addAll(right); // inorder // result.addAll(left); result.addAll(right); result.add(root.val); // postorder return result;&#125; Complexity Analysis# Complexity T: O(n) Because we visit each node exactly once. S: O(n) Taking system stack into consideration Worst case, $level = size$ To be cautious When the depth of tree is too large, we might suffer from stack overflow problem Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/e0e2589a/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Binary Search Algorithm]]></title>
    <url>%2Fposts%2Fcf581b8c%2F</url>
    <content type="text"><![CDATA[[TOC] Complexity Analyse Restriction Implementation Variants Skip List - Support Binary Search for LinkedList Point of view Case Reference Binary Search Although the first binary search algorithm appeared in 1946, the first completely correct binary search algorithm was not implemented until 1962. - Donald E.Knuth Complexity Analyse# Time Avg: O(logn) Worst: O(logn) Best: O(1) Space Recursion: O(logn) Iteration: O(1) Attention Stop condition How to update lower &amp; upper bound (low &amp; high) How to choose the return value (mid) Restriction# Sorted/Ordered 单调递增或递减 Bounded 存在上下界 Accessible by index 可通过索引访问 Fit for array not linked list Not suitable for dataset which is too small or too big Too small, the performance is similar Too big, the data is not stored consequently Implementation# Iteration 1234567891011121314151617181920public static int bsearch(int[] arr, int data) &#123; return bsearch(arr, 0, arr.length-1, data)&#125;public static int bsearch(int[] arr, int start, int end, int data)&#123; int low = start, high = end; while (low &lt;= high) &#123; int mid = low + (high - low) / 2; if (arr[mid] &lt; data) &#123; low = mid + 1; &#125; else if (arr[mid] &gt; data) &#123; high = mid - 1; &#125; else &#123; return mid; &#125; &#125; return -1;&#125; Recursion 12345678910111213public static int bsearch(int[] arr, int start, int end, int data)&#123; if (start &gt; end) return -1; int mid = start + (end - start) / 2; if (arr[mid] &gt; target) return bsearch(arr, start, mid - 1, data); if (arr[mid] &lt; target) return bsearch(arr, mid + 1, end, data); return mid; &#125; Variants# Find the first target 12345678910111213141516171819public static int findFirstTarget(int[] arr, int start, int end, int data) &#123; int low = start, high = end; while (low &lt;= high) &#123; int mid = low + ((high - low) &gt;&gt; 1); if (arr[mid] &gt; data) &#123; high = mid - 1; &#125; else if (arr[mid] &lt; data) &#123; low = mid + 1; &#125; else &#123; // Equal, first of arr || first of repeated target if ((mid == start) || (arr[mid - 1] != data)) return mid; high = mid - 1; &#125; &#125; return -1;&#125; Find the last target 12345678910111213141516171819public static int findLastTarget(int[] arr, int start, int end, int data) &#123; int low = start, high = end; while (low &lt;= high) &#123; int mid = low + ((high - low) &gt;&gt; 1); if (arr[mid] &gt; data) &#123; high = mid - 1; &#125; else if (arr[mid] &lt; data) &#123; low = mid + 1; &#125; else &#123; // Equal, last of arr || last of repeated target if ((mid == end) || (arr[mid + 1] != data)) return mid; low = mid + 1; &#125; &#125; return -1;&#125; Find the first number bigger than &gt;= target 1234567891011121314151617public static int findFirstBigger(int[] arr, int start, int end, int data) &#123; int low = start, high = end; while (low &lt;= high) &#123; int mid = low + ((high - low) &gt;&gt; 1); if (arr[mid] &gt;= data) &#123; // &gt;=, first of arr || first elem bigger than target if((mid == start) || (arr[mid - 1] &lt; data)) return mid; high = mid - 1; &#125; else &#123; low = mid + 1; &#125; &#125; return -1;&#125; Find the last number smaller than &lt;= data 1234567891011121314151617public static int findLastSmaller(int[] arr, int start, int end, int data) &#123; int low = start, high = end; while (low &lt;= high) &#123; int mid = low + ((high - low) &gt;&gt; 1); if (arr[mid] &lt;= data) &#123; // &gt;=, end of arr || last elem smaller than target if ((mid == end) || (arr[mid + 1] &gt; data)) return mid; low = mid + 1; &#125; else &#123; high = mid - 1; &#125; &#125; return -1;&#125; Skip List - Support Binary Search for LinkedList# Reform linked list in order to support binary search, which is skip list. (跳表)It’s a outstanding dynamic data structure. (Sometime Red-black tree can replaced by skip list)Sorted Set in Redis is implemented with skip list and hashmap. What is skip list Linked list with multi-level indice. How many indice do we need Given a linked list with size n. Number of indice nodes at level k is #: n / 2^k Assume there h level, $h = log2n - 1$ When maxLevel = 1, it’s just a simple linked list Time complexity Assume we need to traverse m nodes at each index layer O(mlogn) and max(m) = 3 =&gt; O(logn) Space complexity Indice nodes number: $n/2 + n/4 + … + 4 + 2 = n - 2$ O(n) In order to reduce the size, we can add a index node every 3 or 5 nodes rather than 2 nodes. ($n/3 + n/9 + … + 9 + 3 + 1 ≈ n/2 = O(n)$) But considering the nodes are just pointers, we don’t need to store the object itself, so in many cases we can just ignore the this extra space. Operation Insert / Delete / Search in O(logn) Maintain index When insert an new element, add a new index through a random function Search in range (which is better than Red-black tree) Ref Code Summary 跳表是一种动态数据结构，支持快速的插入、删除、查找操作，时间复杂度都是 O (logn)。 跳表的实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗。 跳表使用空间换时间的设计思路，通过构建多级索引来提高查询的效率，实现了基于链表的 “二分查找”。 虽然跳表的代码实现并不简单，但是作为一种动态数据结构，比起红黑树来说，实现要简单多了。 Point of view# A problem which can be solved by binary search, we usually prefer to solve by hash table or binary search tree. 凡是用二分查找能解决的，绝大部分我们更倾向于用 HashTable 或者 BST。 Binary search is more useful in searching vague value problem. 二分查找更适合用在 “近似” 查找问题。 Case# Q1: 假设我们有 1000 万个整数数据，每个数据占 8 个字节，如何设计数据结构和算法，快速判断某个整数是否出现在这 1000 万数据中？我们希望这个功能不要占用太多的内存空间，最多不要超过 100MB，你会怎么做呢？ Answer 最简单的办法就是将数据存储在数组中，内存占用差不多是 80MB，符合内存的限制。 先排序，再查找。 大部分情况下，用二分查找可以解决的问题，用散列表、二叉树都可以解决。 不管是散列表还是二叉树，都会需要比较多的额外的内存空间。 如果用散列表或者二叉树来存储这 1000 万的数据，用 100MB 的内存肯定是存不下的。 Q2: 假设我们有 12 万条这样的 IP 区间与归属地的对应关系，如何快速定位出一个 IP 地址的归属地呢？ Answer 如果 IP 区间与归属地的对应关系不经常更新，我们可以先预处理这 12 万条数据，让其按照起始 IP 从小到大排序。 如何来排序呢？我们知道，IP 地址可以转化为 32 位的整型数。 所以，我们可以将起始地址，按照对应的整型值的大小关系，从小到大进行排序。 要查询某个 IP 归属地时，我们可以先通过二分查找，找到最后一个起始 IP 小于等于这个 IP 的 IP 区间。 然后，检查这个 IP 是否在这个 IP 区间内，如果在，我们就取出对应的归属地显示；如果不在，就返回未查找到。 Reference# 数据结构与算法之美 15-17 Leetcode Binary Search 知识点总结 Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/cf581b8c/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Algo</category>
      </categories>
      <tags>
        <tag>Algo</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sorting Algorithm]]></title>
    <url>%2Fposts%2Fb59a5e11%2F</url>
    <content type="text"><![CDATA[[TOC] Analysis Sorting Algorithm Bubble Sort 冒泡排序 Insertion Sort 插入排序 Selection Sort Merge Sort 归并排序 Quick Sort 快速排序 Bucket Sort Counting Sort Radix Sort Timsort Heap sort Optimization Other case Reference Sorting Algorithm Sorting Algo In-place Stability Time Complexity (AVG/BEST/WORST) Space Complexity Bubble Sort ✓ ✓ O(n^2) / O(n) / O(n^2) O(1) Insertion Sort ✓ ✓ O(n^2) / O(n) / O(n^2) O(1) Selection Sort ✓ x O(n^2) / O(n^2) / O(n^2) O(1) Merge Sort x ✓ O(nlogn) / O(nlogn) / O(nlogn) O(n) Quick Sort ✓ x O(nlogn) / O(nlogn) / O(n^2) O(1) Bucket Sort x ✓ O(n + k) / O(n + k) / O(n^2) O(n + k) Counting Sort x ✓ O(n + k) / O(n + k) / O(n + k) O(k) Radix Sort x ✓ O(nd) / O(nd) / O(nd) O(n + d) Heap Sort ✓ x O(nlogn) / O(nlogn) / O(nlogn) O(1) Analysis# Performace 执行效率 Time Complexity Avg, Best case, Worst case Compare &amp; Swap opreation 交换次数等于逆序度 Scale Space Complexity 内存消耗 Sorted in place Stability 稳定性 值相等的元素，经过排序后，相等元素之间原有的先后顺序不变。 有序度 &amp; 逆序度 有序度是数组中具有有序关系的元素对的个数。Oredered: n*(n-1)/2 (满有序度) 逆序度 = 满有序度 - 有序度 Sorting Algorithm# 基于比较排序的算法下界 O(nlogn) 123456789Q: 已知有数组 [a1, a2, ..., an]，求数组特定的一个排序组合 A: 组合数：n! 断言：ai &gt; aj，可排除一半的情况 =&gt; n!/2 若比较 k 次能得到该特定的排序，求 k。 =&gt; n! / 2^k = 1 =&gt; 2^k = n! =&gt; k = log(n!) &amp;&amp; log(n!) &lt; log(n^n) =&gt; k ≈ nlog(n) Bubble Sort 冒泡排序 # Features In place sort Stability Best: O(n), Worst: O(n^2) 1234567891011121314151617public static int[] bubbleSort(int[] arr) &#123; if (arr.length &lt;= 1) return arr; for (int i = 0; i &lt; arr.length; i++) &#123; boolean swapped = false; for (int j = 0; j &lt; arr.length - 1 - i; j++) &#123; if (arr[j + 1] &lt; arr[j]) &#123; swap(arr, j, j + 1); swapped = true; &#125; &#125; if (!swapped) break; // No swap &#125; return arr;&#125; Insertion Sort 插入排序 # Feature In place sort Stability Best: O(n), Worst: O(n^2) 123456789101112131415161718public static int[] insertionSort(int[] arr) &#123; if (arr.length &lt;= 1) return arr; for (int i = 1; i &lt; arr.length; i++) &#123; int val = arr[i]; int j = i - 1; // Find seout where to insert for (; j &gt;= 0; j--) &#123; if (val &lt; arr[j]) &#123; arr[j+1] = arr[j]; &#125; else break; &#125; arr[j+1] = val; // Insert &#125; return arr;&#125; Selection Sort# Feature In place sort Non-Stability Best: O(n), Worst: O(n^2) 12345678910111213141516171819public static int[] selectionSort(int[] arr) &#123; if (arr.length &lt;= 1) return arr; for (int i = 0; i &lt; arr.length - 1; i++) &#123; int min = arr[i]; int minIdx = i; for (int j = i + 1; j &lt; arr.length; j++) &#123; if (arr[j] &lt; min) &#123; min = arr[j]; minIdxinser = j; &#125; &#125; // Swap arr[minIdx] = arr[i]; arr[i] = min; &#125; return arr;&#125; Merge Sort 归并排序 # Divide and ConquerBOTTOM TO TOP Features Not in place sort =&gt; space: O(n) Not-Stability Time-Avg: O(nlogn) 123456789101112131415public static void mergeSort(int[] arr) &#123; if (arr.length &lt; 2) return; mergeSort(arr, 0, arr.length - 1);&#125;public static void mergeSort(int[] arr, int low, int high) &#123; if (low &lt; high) &#123; int mid = low + ((high - low) &gt;&gt; 1); // DaC mergeSort(arr, low, mid); mergeSort(arr, mid + 1, high); // Merge mergeArr(arr, low, mid, high); &#125;&#125; 123456789101112131415161718192021222324public static void mergeArr(int[] arr, int low, int mid, int high) &#123; int[] sortedArr = new int[high - low + 1]; int k = 0, idx1 = low, idx2 = mid + 1; while (idx1 &lt;= mid &amp;&amp; idx2 &lt;= high) &#123; if (arr[idx1] &lt; arr[idx2]) &#123; sortedArr[k++] = arr[idx1++]; &#125; else &#123; sortedArr[k++] = arr[idx2++]; &#125; &#125; while (idx1 &lt;= mid) &#123; sortedArr[k++] = arr[idx1++]; &#125; while (idx2 &lt;= high) &#123; sortedArr[k++] = arr[idx2++]; &#125; for (int i=low, j=0; i&lt;=high; i++, j++) &#123; arr[i] = sortedArr[j]; &#125;&#125; Quick Sort 快速排序 # Divide and ConquerTOP to BOTTOM Features In place sort =&gt; space: O(1) Not-Stability Time-Avg: O(nlogn), Worst: O(n^2) depending on the pivot value How to optimzie quick sort Choose a better pivot which can even split the array Pick the median of arr[low], arr[(low+high)/2], arr[high] as pivot Randomly pick an element as pivot Many other methods 12345678910111213141516public static void quickSort(int[] arr) &#123; // 1. In place sort, Space: O(1) // 2. Not-Stability // 3. Time-Avg: O(nlogn), Worst: O(n^2) // TOP to BOTTOM if (arr.length &lt; 2) return; quickSort(arr, 0, arr.length - 1);&#125;public static void quickSort(int[] arr, int low, int high) &#123; if (low &lt; high) &#123; int divIdx = partition(arr, low, high); quickSort(arr, low, divIdx - 1); quickSort(arr, divIdx + 1, high); &#125;&#125; 1234567891011121314151617181920212223242526272829public static int partition(int[] arr, int low, int high) &#123; int pivot = arr[high]; // Find pivot int divIdx = low; // Divide index for (int i = low; i &lt; high; i++) &#123; if (arr[i] &lt; pivot) &#123; swap(arr, divIdx++, i); &#125; &#125; swap(arr, divIdx, high); return divIdx;&#125;private static int findPivot(int[] arr, int low, int high) &#123; int nMid = arr[low + ((high - low) &gt;&gt; 1)]; int[] num = new int[]&#123;arr[low], nMid, arr[high]&#125;; // 3 point median if (num[0] &gt; num[1]) swap(num, 0, 1); if (num[1] &gt; num[2]) swap(num, 1, 2); if (num[0] &gt; num[1]) swap(num, 0, 1); return num[1];&#125;private static void swap(int[] arr, int i, int j) &#123; if (i == j) return; int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp;&#125; Bucket Sort# Analysis Assume there are m buckets, each bucket has $k = n / m$ elements Use quick sort in each bucket in O(klogk) time Total in $O(m * klogk) = O(nlogk)$ time When $m ≈ n$, which means k is really small =&gt; $O(nlogk) ≈ O(n)$ Suitable for big data, when we can not load all the data in RAM at the same time (外部排序) Case Question 有 10GB 的订单数据，我们希望按订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百 MB，没办法一次性把 10GB 的数据都加载到内存中。这个时候该怎么办呢？ Answer 先扫描一遍文件，看订单金额所处的数据范围。 将所有订单根据金额划分到 100 个桶。 理想的情况下，如果订单金额均匀分布，那订单会被均匀划分到 100 个文件中，每个小文件中存储大约 100 MB。 将这 100 个小文件依次放到内存中，用快排来排序。 所有文件都排好序之后，我们只需要按照文件编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中。 Counting Sort# Analysis It’s like a special case of bucket sort. 计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。 而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。 1234567891011121314151617181920212223242526272829Data range: [0, 9]Input data: [1, 4, 1, 2, 7, 5, 2]1) Take a count array to store the count of each unique object.Index: 0 1 2 3 4 5 6 7 8 9Count: 0 2 2 0 1 1 0 1 0 02) Add prefix sumIndex: 0 1 2 3 4 5 6 7 8 9Count: 0 2 4 4 5 6 6 7 7 73) Output each object from the input sequence followed by decreasing its count by 1.Process the input data: [1, 4, 1, 2, 7, 5, 2].Index: 0 1 2 3 4 5 6 7 8 9Count: 0 2 4 4 5 6 6 7 7 7// [-&gt;1, 4, 1, 2, 7, 5, 2]Count: 0 2-1 4 4 5 6 6 7 7 7Index: 0 1 2 3 4 5 6Data: - *1 - - - - -// [1, -&gt;4, 1, 2, 7, 5, 2]Count: 0 1 4 4 5-1 6 6 7 7 7Index: 0 1 2 3 4 5 6Data: - 1 - - *4 - -// [1, 4, -&gt;1, 2, 7, 5, 2]Index: 0 1 2 3 4 5 6Count: 0 1-1 4 4 4 6 6 7 7 7 Data: *1 1 - - 4 - -// ... 123456789101112131415161718192021222324252627282930313233343536373839404142// 计数排序，a 是数组，n 是数组大小。假设数组中存储的都是非负整数。public void countingSort(int[] a, int n) &#123; if (n &lt;= 1) return; // 查找数组中数据的范围 int max = a[0]; // 遍历数组的所有的元素，找到最大的元素 for (int i = 1; i &lt; n; ++i) &#123; // 若后面的元素大于指定的数组元素，则把元素进行交换 if (max &lt; a[i]) max = a[i]; &#125; // 申请一个计数数组 c，下标大小 [0,max] int[] c = new int[max + 1]; for (int i = 0; i &lt;= max; ++i) &#123; c[i] = 0; &#125; // 计算每个元素的个数，放入 c 中 for (int i = 0; i &lt; n; ++i) &#123; c[a[i]]++; &#125; // 依次累加 for (int i = 1; i &lt;= max; ++i) &#123; c[i] = c[i-1] + c[i]; &#125; // 临时数组 r，存储排序之后的结果 int[] r = new int[n]; // 计算排序的关键步骤，有点难理解 for (int i = n - 1; i &gt;= 0; --i) &#123; int index = c[a[i]]-1; r[index] = a[i]; c[a[i]]--; &#125; // 将结果拷贝给 a 数组 for (int i = 0; i &lt; n; ++i) &#123; a[i] = r[i]; &#125;&#125; Radix Sort# Analysis 基数排序对要排序的数据是有要求的，需要可以分割出独立的 “位” 来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。 除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O (n) 了。 Case Question 如何根据年龄给 100 万用户排序？(Like sorting 1 million phone number) Answer Make it all the username or uid the same length (ban, candy, john, …) =&gt; (ban00, candy, john0) ‘0’ &lt; any letter in ASCII value Radix sort (Assume the size of username or uid is smaller than 20) Time complexity is similar to O(n) Timsort# Timsort is a hybrid stable sorting algorithm, derived from merge sort and insertion sort, designed to perform well on many kinds of real-world data. Using neat merge method 找出左分区最后一个元素 (最大) 及在右分区的位置 找出右分区第一个元素 (最小) 及在左分区的位置 仅对这两个位置之间的元素进行合并，之外的元素本身就是有序的 Heap sort# See data structure “heap” Optimization# Choose the sorting algo according to the data size When the element is less than 5, it will sorted by insertion sort When O(nlogn) is actually calculated as $f(n) = knlogn + c$, it may bigger than $f(n) = n ^ 2$ Like $n = 100$, $k = 1000$, $c = 200$ So for a small size of data, algorithm with O(n^2) maybe a better choice When the capacity is small, like 1k, 2k, … we can choose merge sort Case Java 1.8 [0, 47]: Selection sort [47, 286]: Quick sort (Dual Pivot Quick Sort) [286, …]: Timsort (merge sort) For some basic type like byte, char, short: Counting sort Google v8 quick sort [10, 1000]: choose arr[mid] as pivot [1000, …]: Pick an elements from every 200 elements and choose the median as pivot. Split in 3 part: [&lt;pivot], [=pivot], [&gt;pivot] Glibc qsort() [0, 4]: Insertion sort Small size: Merge sort Large size: Quick sort Implement a stack on heap in case of stack overflow Other case# Case 1 Question 现在你有 10 个接口访问日志文件，每个日志文件大小约 300MB，每个文件里的日志都是按照时间戳从小到大排序的。你希望将这 10 个较小的日志文件，合并为 1 个日志文件，合并之后的日志仍然按照时间戳从小到大排列。如果处理上述排序任务的机器内存只有 1GB，你有什么好的解决思路，能 “快速” 地将这 10 个日志文件合并吗？ Answer 维持一个按时间戳排序的 Min Heap。 依次读取日志文件并放入 Min Heap 中。 同时从 Min Heap 取出最早的日志存到合并文件中。 Reference# 数据结构与算法之美 11-14 排序算法 Counting Sort | GeeksforGeeks - YouTube Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/b59a5e11/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Algo</category>
      </categories>
      <tags>
        <tag>Algo</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mining XMR]]></title>
    <url>%2Fposts%2Fb8827cf7%2F</url>
    <content type="text"><![CDATA[[TOC] Dependencies Download xmr-stak Edit the default donation Compile Start the miner Mining pool Reference Mining XMR Dependencies# Ubuntu 1sudo apt -y install libmicrohttpd-dev libssl-dev cmake build-essential libhwloc-dev CentOS 123sudo yum -y install centos-release-scl epel-releasesudo yum -y install cmake3 devtoolset-4-gcc* hwloc-devel libmicrohttpd-devel openssl-devel makescl enable devtoolset-4 bash MacOS 123brew install hwloc libmicrohttpd gcc openssl cmake# For NVIDIA GPUsbrew cask install nvidia-cuda Download xmr-stak# Find the latest releases and precompiled binaries on GitHub under release 1wget https://github.com/fireice-uk/xmr-stak/archive/2.4.5.tar.gz Edit the default donation#123vi ./xmrstak/donate-level.hpp# Default: 2.0 / 100.0 = 2%constexpr double fDevDonationLevel = yourDonatedRate / 100.0; Compile# More details on official repo’s doc Ubuntu 12345git clone https://github.com/fireice-uk/xmr-stak.gitmkdir xmr-stak/buildcd xmr-stak/buildcmake ..make install CentOS 12345git clone https://github.com/fireice-uk/xmr-stak.gitmkdir xmr-stak/buildcd xmr-stak/buildcmake3 ..make install MacOS CMake options For NVIDIA GPUs: -DOpenCL_ENABLE=OFF For AMD GPUs: -DCUDA_ENABLE=OFF -DOpenCL_ENABLE=ON For CPU-only: -DCUDA_ENABLE=OFF -DOpenCL_ENABLE=OFF 12cmake . -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl &lt;options&gt;cmake . -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DCUDA_ENABLE=OFF -DOpenCL_ENABLE=ON Start the miner#12chmod +x ./xmr-stak./xmr-stak Mining pool# mineXMR Connection Choose server Ping each connection to choose the fastest server Canada ca.minexmr.com is the fastest server in my test Mining ports 4444, 5555 for Low range CPU/GPU with starting difficulty 15000 7777, 80 &amp; 443 for Mid range CPU/GPU with starting difficulty 35000 6666 for SSL port with starting difficulty 35000 3333 for Modern High End with starting difficulty 1000000 Reference# XMR-Stak Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/b8827cf7/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Cryptocurrency</category>
      </categories>
      <tags>
        <tag>XMR</tag>
        <tag>Mining</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计思考]]></title>
    <url>%2Fposts%2Ff9f2d97%2F</url>
    <content type="text"><![CDATA[[TOC] 一、设计能力 询问设计师他们在做什么 解构设计师的设计行为 观察设计师正在做什么 思考设计师是如何做的 设计的天生智慧 二、设计师如何思考 动机与和态度 其他优秀的设计师 共同特征 设计战略 三、设计协作 四、设计师如何工作 五、设计技能 六、实例 1. 为成功而设计 2. 为舒适而设计 3. 为使用而设计 设计思考 [英] Nigel Cross | 山东画报出版社 Summarized by Zachary Completed on Jun. 22, 2016 目录有所调整 一、设计能力# 我们的工作并不是给予客户他想要的，而是及时并竭尽所能地给予客户他从未想象过的东西，而当客户得到它之后，他会认识到这就是他一直想要的东西。——Denys Lasdun，建筑师 设计并不是寻找对已知特定问题的最优解决方案，而是一个探险性的过程。 询问设计师他们在做什么# 诱导性推理 设计师相信他们的 “直觉”式的反应，源于 大量累积的经验，代表了设计思考中真正发生的一个过程。 诱导性推理 是一种必要的 设计逻辑 ， 不同于 我们熟悉的 归纳推论 和演绎推论 的方法类型。 设计问题和解决方案两者紧密交织 “设计师的方案不会去想设计问题的最直接的解决方案，但一定程度上很好地解决问题，却是完全从其他角度和观点看待的。”——Geoffrey Harcourt，家具设计师 设计师需要运用草图、绘画、模型制作等方式，为思考的不确定性提供一个暂时的、外部的储存空间，支撑了设计师与 设计问题及解决方案之间的“对话”。 这些方式既带有评判性质，也具有探险发现性，同时并 不是出于表现设计结果的目的，而是出于去理解问题的目的。 善于处理设计中的未知性和不确定性 思考平行线 设计问题找到单独的解决方案前，设计过程中应同时 保持不同层面的思考，并视为同等重要的部分，然后选择合适的时机将正在发展中、所有的创意或思考线调和到一起，避免过早丧失未成形的创意或过晚使调和过于僵硬死板。 施加秩序 面对模糊不清的问题，使用个人的指导原则作为出发点，帮助掌控问题并提供重点的方向指导，区别在于 如何缩小解决方案的范围，通常在设计过程的初期阶段。 设计师对各种实验和可能性方案采取 开放性的态度 ，对内、外部环境的 细微差别非常敏感 ，时刻准备并关注着设计过程发展中的一些 特别的事件，从而成功地、有建设性地处理设计过程中的不确定性，并处理设计过程中产生的风险和机会的关系。 “只有当你尝试并拟定出一个解决计划的时候，问题才会出现。因此在某种程度上设计过程决定了设计目标，这通常在设计简报中不曾提及。” ——Richard MacCormac，建筑师 设计的解决方案不会直接从问题本身的呈述而来，设计师必须自己创造新东西。 解构设计师的设计行为 # 设计构思一般并不是完全从头脑蹦出，而是在画草图过程，思考问题并受到其他事物影响，从而形成设计方案的潜在源泉，并结合其他想象的驱使的过程。 设计师在完善设计理念的过程中，可通过平常物，或回忆相关事物来帮助自己找到与设计任务有联系的，可用的，并吸引人的造型和设计概念。 观察设计师正在做什么# 不同参与者之间互动和协调的社交过程 大型项目中，设计师需要将技术、经济、社会、审美等不同层面的设计需求整合并协调好，这意味着，设计并 不仅仅是个人的认知进程 ，而是一个 共享的、社会性的进程。 “设计的过程就是在有着不同利益的层面之间达成共识的过程。设计的社会性质会导致参与者必须承认设计的未知性，给参与者足够的空间调动客观世界的独立性，在和其他人 沟通过程中有着重要意义。”——Larry Bucciarelli 设计工作室的公开性和共享性 设计项目简报应放工作室内，工作进程也应处于醒目的位置，草图等资料也应共享，使设计成为开放的状态，便于让他人知晓，也可接受他人对于设计的评论与看法。 连环行动、行为反思 设计师在一个有着相互关联的连环行动（行动、反思、决定、进一步行动 ）的复杂网络中进行设计。 连环行动 (moving-seeing-moving)，即进行一个“如果”行动，看看结构（草图上），自习考虑其带来的影响（好 / 坏），然后制定其他的方案，再进行类似的行动。行为反思 (reflection-in-action)，同时使用言语表达和草图把自己的认知过程清晰地呈现出来，谈话（思考）和画草图需要同时进行，把通常为安静、内在的认知过程变成“有声思考”的研究方式。 “有竞争力的设计师实际掌握的知识通常都会比他们所能描述出来的更多。他们会展示出一种在实践中的知识与能力，很多是隐性的才能。”——Donald Schon 设计过程是一种“不同状态下进行反思性谈话”的方式中进行，是一种基于构造问题和探索其“进行发展中”的隐含意义的互动过程，从而研究出解决方案的可能性。 思考设计师是如何做的# 诱导性推理是设计学科的逻辑 设计的推理不同于归纳与演绎的推理形式。 “逻辑关注于抽象的形式，科学研究的现存的形式，设计创造的是新型形式。”——Lionel March 设计方案不会直接从问题中得到，只能与问题想匹配，设计师更乐于创造一个符合要求的提案，提供一个合适的解决方案。 “思考只会在有限定的层面上作用于整个认知系统。整个系统包含了思考、行为和世界，或一个物质世界环境下思考与行动的统一。设计师工作的本能方式包括了应对不同环境下做出暂时设计解决方案的广泛系统。”——Henrik Gedenryd 设计的天生智慧# 设计能力中展现出的对内在、天生智慧不断增长的尊重。对早期对设计过程以更理性化和系统化的方式加以重塑的尝试，以及将一种秩序强加在设计思考上的强烈欲望，都是对天生设计能力的不尊重的表现。 二、设计师如何思考 # 动机与和态度#“每次回到设计的最初原点，将已存在的所有方案都推翻。”——戈登·穆雷“首要基本原则”的工作方法。 “任何一个团队取得成功的关键在于其混合交叉的资源性——毫无疑问智力资源是非常重要的一部分，但一个团队中不可避免的就是，领导者的身体和行为会成为其他团队成员的榜样。”——肯尼斯·格兰奇 “设计师的工作就是创造意料之外的东西。”——肯尼斯·格兰奇“成功在于发现设计说明中的漏洞以及隐藏于其中的意外收获。”——肯尼斯·格兰奇 拥有强烈的个人驱动力。 其他优秀的设计师 # 需要在某些时间段内保持高强度的设计活动，但是会有一些远离常规工作环境的、进行更多反思的时间穿插其间。 有着专注的强烈目的感特征，并与小型的、有强烈动机的工作团队成员共享这一特征。精准专注于一个设计问题并将其作为接近“首要原则”的途径。集中于某一主要目标并且从“首要原则”开始进行设计。 运用草图作为“有声思考”或者“自我对话”的一种方式。将回执草图作为批判和发现新想法的一个过程。不仅把绘制草图作为一种将脑海中的认知图像进行外化表现的方式，而是作为一种积极的“通过草图来思考”和回应，然后对设计层层深入，进行剖析，从而将其都显现在草图上的方法。 对自己的工作有着强烈的个人动机，并对个字的领域有较深入的专业知识以及了解相关领域的最新发展情况，出于个人爱好常常导致将技术从一个领域过渡到另外一个领域的洞察力。 不会被失败所阻止，反而他们可以从失败中学习，他们有“创新的勇气”。 灵感乍现（经过一段时期的思考和准备）是创意设计思考中的一个常见的因素。 共同特征 # 对他们选择的领域有着强烈的人情，基于从青年时代就存在的个人动机与驱动力。 有着个人勇气去承担一些可能性的风险，尽管会面对巨大的失败结果，但是他们并不害怕，也会饱含激情地去寻找避免失败的方法。 定义并构造待解决的设计问题，并非一直都是“被给予的设计简报中的问题”。设计目标定位在比较高的层次，通常有着清晰的目的。对于被压缩在目标中的设计问题会有一个整体及系统的看法，对于如何来达到这个目标会有一个清楚的设计概念。（清晰的设计概念并不能简单地在设计简报提出的问题中找到，绝大部分是设计师自己创造的，并不是对资料中现存模式的认识，而是去创造一种能重新调整问题并能暗示设计解决方案方向的新模式。） 高强度的工作用来创造、评估并精炼设计解决方案的细节，同时伴随一些轻松和反思的时期。这并不是个人特性的一种反映，而是创新性工作的一个必要层面，需要用放松的状态对紧张的工作进行调节。 创新型设计师绝大部分的工作方式并不是系统化的，他们的设计方法是战略性的而非策略性的，其中一个重要特征是平行式工作——让设计活动在多个层面同时进行。 设计战略# 三个战略性因素： 系统式研究方法 构建设计问题 首要基本原则 对于设计问题采取广泛的“系统式研究方法”，而不是接受对设计问题的狭义定义。 创新型设计师会采取“系统性的方法”。 创新者有着系统的思考，会从不同事物间的相互关系来看待问题，并以此产生出一个结果，一种新的、在某种程度上可以改变世界的新型格式塔理论。 通常以用户的角度来思考，并在产品设计过程中考虑用户的全部需求。 “构建 ”与众不同的，有时候甚至非常个人化的 设计问题。 为了在某种程度上形成或构建能够激励设计概念产生的问题，设计师会从独特的视角来探索问题。 一些案例中，他们在大部分的设计中的视角是个人化的。 他们的问题构造是由特殊设计状况的要求而引起的，但是也会受到个人主观动机的强烈影响。 设计应从“首要基本原则”开始。 设计师在构建设计理念和完善设计概念细节时，都会明确或含蓄地依赖于“首要原则”。 冲突刺激创新 最后，从例子似乎看出，创新型设计产生的很大可能性是源于设计师高层次的问题目标和客户对解决方案是否可接受的标准之间冲突的解决。 创造力通常需要解决冲突的情况下得到激发，很多成功的设计师意识到这一点，并寻找形成这种冲突的刺激。 创新型设计师所运用的 设计战略模式 在上部，设计师寻找最高目标以及客户设定的基本标准中存在着系统层次上的冲突或潜在冲突。 在中间层次，设计师以个人的方式构架设计问题，并通过与设计构架的匹配和满足其标准来发展完善其设计方案。 为了定义和利用好物理学的首要原则，设计师会将问题的构造放在一个较低的层次，工程学和设计起到了帮助问题构造和解决方案之间的桥梁作用。 最底层，是已建立的、明确的首要原则的知识，也许涵盖了特定的和更加常规的科学概念。中间层次是可被设计师运用的战略性知识，当其处于特殊问题和特殊背景、策略以及个人化和特殊化的环境下，其知识更容易多变。在更高的层次存在着相对稳定的混合，但是通常也有设计师的隐性目标、暂时性的问题目标，以及由客户或其他主导权威机构认定的固定的、清晰的解决方案标准。 三、设计协作# 团队协作 VS 个人工作 解释并重塑设计中的问题是平常而又必不可少的一项任务。设计问题的本质是分析并理解其作为整个设计过程中的重要影响部分。个体设计师可以建立他们自己理解问题的模式，但是团队成员必须对问题的理解达成共识。 团队工作一大弊端是，成员间的不同意见可能会导致分歧现象，因此，团队工作中需要不断的甄别，避免或解决产生的分歧。 角色和关系 任何团队协作活动中，角色行为的差异性是不可避免的，这主要取决于个性、经验和当时的工作任务，团队成员应该对互相的偏好比较敏感。 计划和更改活动 团队应准备设计活动的计划表 量化问题 产生设计概念 精炼设计概念 选择一个可行的设计概念 着手设计 方案呈述报告 里程碑完成、进程的阶段性变化的时候，需要对内容进行检查，一旦条件具备，让全体成员明确进入下一阶段。 收集和分享信息 团队需要形成对信息收集的具体工作安排和方法 不仅像其他设计任务一样，需要收集相关重要的有效信息，还要从信息源中提取有用信息，再与团队共享。 在这方面，团队差异是比较大的，有的团队很大程度上依靠团队成员对问题的个人经验和知识。 即使当信息在共享的情况下，错误解读和误解仍然不可避免，因此 团队更加需要形成对信息收集的具体工作安排和方法。 设计概念的产生和采纳 团队一起创造设计理念是必要的，再将这些设计理念整合到一个特定的设计方案中。首先需要建立设计方案，然后再就其细节进行慢慢完善。团队成员需要检查每个清单和方案，删除不理想的概念，确定一个满意的方案。 产品具体设计创意一般经过提出、接受、修改、发展和调整。 在合作建立和完善设计概念中，团队成员也发现有必要游说其他组员去接受他们的自己的创意和偏好（这些概念通常是他们自己提出的）。 设计师对自己的设计概念会比较主观和情绪化，这是非常正常的事，他们的设计概念不仅仅只是抽象的想法，而是个人对于重要认知努力观察的结果。毫无疑问，概念上的“雏形”会相互竞争，这种情感化现象在团队中应该得到承认和允许，否则设计创意不可能出现。同样团队成员应辨别出该概念的成熟程度，帮助创新的进程。 避免和解决分歧 要警惕那些 延期的同意 / 无公开的同意 团队中，成员间有不同的看法是不可避免的，然而设计任务是在协作的基础上总结出一致性的结论，所以必须找到解决问题的方法或尽量避免分歧的方法。 一般团队成员会默许无明显意见的“同意”，直到有成员发现了其创意的弊端，或者是延迟了对于其创意的肯定。这些 延期的同意 或无公开的同意 反映了人际间讨论和日常交际的方方面面。 当团队成员接近共识，当他们延迟公开同意某方案的时候必须要注意。尽管有时候并没有公开的否定意见，每个人仍可能保留不同的观点，并当机会来到时，他们会回到问题的原点上。 讨论 团队工作是社交过程，因而不能忽视团队设计活动中表现出的交互、角色和成员间的相互关系。 共享的白板、画纸工具被用于团队成员间绘画和列清单的活动，这种共享表现性似乎是设计活动中最基本的合作方法。 四、设计师如何工作# “有声思考”会产生一定的局限性，非语言思考是设计思考的本质特征。 合作 设计师应有技巧地唤起组员对中立方面的支持，比如达成共识、更高原则或理论，以及用专业或实践标准来支持他们的观点。这样可以为辩论提供有力的信息，并能游说他人和理性化解释自己的观点。 一个设计团队中有着推动性影响力的成员取决于他或她与其他人交互，以及如何使共享观念相互联系起来的方法。 运用“积累话语”，形成共享信息，不仅仅意味简单的总结，还包括作出建设性的贡献，重点在于提出的解决方案和指明的前进方向。这种方式称为“源于团队共享的语言表述，从而架构设计理念。” 越成功的团队越重视他们的交谈方式。一个成功团队的谈话讨论展示“连贯一致性”的发展过程，该过程，每位成员都会各自作出对团队的贡献，并推动一个连贯性的交谈形式。 这种连贯性的“谈话”以命名和构造为起点。为了解决涉及问题，设计师必须构造一个相关问题的设计背景：设置它的界限，选择引人注意的一些特定事物和关系，并将连贯性置入特定状态下以引导下一步的发展。 设计师挑选问题范围的特征，他们选择参与（命名），并定义他们选择将要探索（构架）的解决方案的范围领域。同时必须要平衡命名和架构这两种实践活动。 设计过程 设计流程模型：量化问题、产生设计理念、完善设计理念、选择一个设计理念、设计、表现 / 陈述。 其他：阐明任务、寻找设计理念、确定设计理念。其中寻找设计理念在团队设计活动中处于主要地位。 “分类任务”会在各环节不断被循环使用。另外“构造问题”约耗费 30% 的时间，并集中在开端，但会不断的重复，直到结束。Dorst 和 Gross 将其定义为完善设计过程中的“共同进化”（co-evolution）。 设计师通常会以结构性的计划作为他们设计过程的开端。他们对自己的设计活动有明确的层次计划，但会用一种机会主义的方式来使用它。只有当从认知成本的角度是获益的时候，才会按计划进行，若有更多经济的认知行为出现，便有可能放弃先前的计划。Raymonde Guindon 同样强调设计活动中的“机会主义”本质。 创新性设计 设计创意的产生不能被限制于特定的空间或系统的设计方法顺序之中。设计创意只有在连贯的设计对话中才会出现，观念的形成不能只在规定的时间约束下产生，也不能被预期的过程计划和恰当的设计先后次序阶段所支配。 主要是对问题的具体构架的创意坚持使得对潜在的、激进的创新解决方案的丢弃。 创新性设计并不是灵感的突然闪现，而是对适当提案的规划和总结。一旦提案被确定，就被视为一个可探索、可再构造的恰当方案。它创造了设计需求和有潜力的新产品设计结构间的解决方法。 在创新设计中，突然出现的启迪更多是在问题空间和解决方案空间之间建立一个“创新型桥梁”，而不仅仅是从一个创意到另一个创意的“创新式飞跃”。 Omer Akin 和 Chengtah Lin 定义的 NDDs 新奇的设计决策：非常规的决定“被证明是整个设计过程中的关键。” 三个特征：NDDs 可以解决设计问题或瓶颈，它不会随之前的设计设想，作为整个设计活动的一个重要特征。 他们还将设计活动分 3 类：检查（阅读调查相关信息）、思考以及绘图。 当想到新奇的设计方案时，这三种活动模式以快速的形式进行轮流接替转换。每当 NNDs 时刻，设计师都会表现出果断的判断力，他们参与的层次提升了，工作的注意力范围在问题和解决方法的不同方面有很大的跨越。 更易成功的人，在创新创造性设计概念方面，是在那些能够展示其在活动模式中可进行快速转换的人。仅仅简单地在活动类型之间进行快速转换并不是帮助设计师走向创新设计的必然途径，而在创新工作方面，也与高效率的注意力和衔接有紧密联系。 五、设计技能# Herbert Simon 将设计师的创造活动与蚂蚁联系一起，蚂蚁的视线范围虽小，但它以一种方法绕过或越过障碍物，以一个局外观察者的特征，更有全局的视野，以一种与会的线路间接达到方案目标。蚂蚁（或问题解决者）行为的显著复杂性在很大程度上映射了周边环境（或问题状况）的复杂性，然后控制其行为的潜意识认知过程可能相对比较简单。从这个观点来看，理解设计并不仅仅是理解设计问题，更重要的是理解设计思考。另外，设计中并没有一个已经明确知晓的设计目标，设计师会在创造解决概念时创造这个目标。 设计智慧 心理学家 Howard Gardner 将智慧分为六种形式：语言智慧、逻辑 - 数学智慧、立体空间智慧、音乐智慧、身体触觉型智慧、个人智慧。 优秀的设计师有的思考方式： 包括了在不同细节层次之间进行缝合链接，从高层次的系统目标到低层次的基本原则。 他们不仅仅去解决“被给予的问题”，还会在更广阔的内容和想象力，以及适当的解决方案来解决问题冲突和不确定性。 他们有建构问题、收集和构架问题数据的认知技能，以及从暗示解决问题方法的数据和可能性解决方法的概念上创造相连贯的模式的技能。 设计智慧包含了 问题与解决方案表达之间的一个强烈的、反思性的交互以及在具象表达和抽象思考之间、行为和思考之间便宜和迅速的一种转换能力。优秀的设计师在个人设计工作和团队协作上都会用到 建构性思考。 大脑受损对设计师在问题解决行为方式与控制主体行方式有以下区别： 不能在构建问题和解决问题之间进行转换。 时间过去大半，初级设计阶段仍未完成。 初期设计阶段所占比例非常小且不稳定，由多个独立片段组成。 这些片段并无进展或在后期可以进展的趋势。 初期设计阶段和后期阶段都没有继续发展的抽象信息。 并未进入细节设计阶段。 专业技能的发展 教育不仅是发展知识的过程，还是发展思考与行动方法的过程。 获得专业性的一个重要因素被认为是坚持、考虑周全和有向导性的实践活动。 一个有能力的问题解决者会以一种完全不同的方式工作。他们会对特别情况下的因素进行选择，有些相关因素会由于其重要性而得到特别的关注。为达到目他们会制定一个计划，在这个层次中问题解决方案报货去寻找机会。这个过程的发展会伴随着实验 - 错误的特征，以及一些学习和反思的特征。专业人士会对特定状况作出直觉性的反应，并会立刻直接采取合适的行动。解决问题和分析问题在这个工作层次上会被明显区分开来。大师级人物会在整体上进入更深层次的专业领域，要求对背景环境有敏锐的洞擦力和对细微线索的开放性态度。 从专业技能的一个层次转移到另一层次并不是一个稳定不变的发展，并不是简单地去了解更多的知识以及更迅速且高效率的工作。这种向不同工作方式的转变意味着注意力层面的转移，我们都有学习到技能的体验，而原则成为了一种无意识的行为表现。 从学生到专业设计师 “空间构成”和“构建空间”之间的重复是专业设计师设计进程中一个很重要的方面。他们不断地从一个设计空间转移到另一个设计空间进行对设计解决方案的细节性寻找。 初学者的行为通常会与“深度优先”的方法相联系，意味着会定义问题，然后马上开始深度上探索解决方案，导致部分的子方案难以和整体的解决方案进行协调。然后，专业人士的设计战略通常被认为是展现出一种以“广度为主”的方法，以广泛的问题探索和同时发展相关的子方案作为开端。 初学者运用“尝试和错误”的技巧来产生并实施设计修正与评价，不断重复。而经验丰富的工程师会在执行其暂定方案和作出最后评估之前，都会对其进行初步评估，他们运用以往的经验进行前瞻，并考虑是否值得执行下一步的设计方案。 专业设计师的优先设计战略即为自上而下、广度优先的方法，但也会转换到深度优先设计以战略性地针对一些诸如问题复杂性和设计不确定性情况的反应。 经验越丰富的设计师会越多地采用“生成式”推理方法，与缺乏经验的设计师所采用的演绎式推理形成鲜明对比。尤其对问题类型有着特殊经验的设计师会倾向于对解决方案进行推测来进行项目设计，而不是通过对问题的分析来进行设计，即根据相关的解决方法来构建或感知设计问题。 专业设计师还有一个关键能力，在于他们能够在思考上摆脱曾经的具体案例和已积累的经验，并在他们的专业领域形成更加抽象化的中肯概念。 专家被认为比初学者更有效地以更广阔的认知层面来储存和掌握信息，并认识到隐藏着的原则，而不是关注于问题的表面特征。 接触专业领域的好的设计作品，需要学习隐藏的纲要或组织原则的观点去裂解和记住他们。好比学习一门语言，这是专注并内化不同层次的理解和成就的问题。 与传统的对问题进行清晰定义的解决者行为不同的是，设计师聚焦于解决方式，而不是聚焦于问题方式。成功的、经验丰富的设计师都会对问题的构建具有一定的前瞻性，活跃地表达他们对问题的观点并指明寻找问题解决方案猜测的方向，这在构建问题的过程中通常被定义为设计专业技能的关键特征。 六、实例#1. 为成功而设计# Gordon Murray 一级方程式赛车设计师 用最初的原则重新考虑问题和身处的情况，强调时刻保持回头检视最基本原则的必要性。 将经验放在“思想的后面而不是最前面”，并且从基本原理开始设计工作。 亦可以改变原有规则为起点的创新。 突破性创新是被竞争压力推动，以及在规则的限制里找到重要有利条件而驱动的：基本的创新思考是通过精确的计算而被评估的。 并不是所有设计创新都是成功。 2. 为舒适而设计# Kenneth Grange 跨领域设计师 设计不仅仅运用基于产品造型或重塑产品造型的设计方法，更源于对产品目的、功能以及使用的根本性再评估。 从功能性角度展开设计，创新性的“样式 / 造型”以及新产品的特征应考虑对产品日常使用方式的考量和对反馈的分析。 产品应基于功能性和实用性而产生样式和造型设计。 3. 为使用而设计# Victor Scheinman 美国机械电子工程设计师 他的创造性策略，包含了将概述问题氛围不同层次来解决：对特定环境下的特殊需求产品形成一个广泛的、系统的分析视角；并以此为出发点，形成一个特别的角度或问题框架作为解决方法的指导原则；并使用这个原则来界定相关具体化工程设计的首要目标；最后还要谨记去满足客户意图制造出一个成功消费品的目标。 用问题架构来确定基本设计原则，并以此激发设计理念的形成并帮助细化其设计理念。 Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/f9f2d97/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>Thought</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七牛云图床]]></title>
    <url>%2Fposts%2F966f41d8%2F</url>
    <content type="text"><![CDATA[[TOC] 背景 目前方案 选用七牛云的原因 简要步骤 Future 参考链接 背景# 习惯用 Markdown 来做笔记，同时有些内容希望上传到博客分享，但是大部分都不支持外链，一直尝试各种图床，最终得出现在比较稳定的方案。 目前方案# 七牛云 + 极简图床（Chrome 插件） 选用七牛云的原因# 10G 免费流量（图片尽量压缩 200k 以内） 上传前使用 ImageOptim 压缩 服务稳定（写作才是核心，就别总折腾图片的事情了） 国内、外速度都可以接受。 便宜（就算付费也相对比较便宜，作为学生党觉得可以接受） 简要步骤# 准备 注册 七牛云 账户并添加 对象存储 空间 Chrome 浏览器安装 极简图床 插件 插件中设置存储空间的 AK、SK、域名等信息即可 使用 准备图片或动图素材 在插件中拖拽上传素材 复制 Markdown 链接到文章中 Future# 这种事情，现成方案已经不算低效了。。。更重要的写作的频率并不高，而写文档大多场景也不会有很多图片。还是打住，做更重要的事情吧。 参考链接# 如何使用七牛云做为图床？ Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/966f41d8/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>七牛云</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GTD and OmniFocus]]></title>
    <url>%2Fposts%2F4372d2e6%2F</url>
    <content type="text"><![CDATA[[TOC] GTD 的哲学 GTD 是什么 GTD 基本原则 五个流程 关于 OmniFocus OmniFocus 个人设置（仅供参考） Projects 项目 Contexts 情景 透视 我的工作流 一些他人的提醒 创业团队的时间管理 Reference： GTD and OmniFocus我只是大自然的搬运工。 Summarize by Zachary Completed on Oct. 22, 2015 GTD 的哲学#GTD 是什么# GTD 是 Getting Things Done 的缩写，是一种行为管理的方法。GTD 主要原则在于，通过记录的方式把头脑中的各种任务移出来，集中精力在正在完成的事情。 GTD 最大的特点就是将我们的大脑从存储和统筹的工作中解放出来。不再用大脑去思考“我要做什么 ”或者“ 现在我该做什么 ”。 而专注于“把当前这件事情做好”。 GTD 基本原则# 不要把提升行动力寄托在 GTD 上，就像不要把拥有幸福寄托在别人的身上一样。 五个流程# 收集 Collect 所有被执行的事情，都存放到一个 “收件箱 Inbox” 里面。 清空大脑碎片，留待随后整理，保持大脑无压力状态。 另外 Inbox 要 定期清空，否则堆积如山就失去意义。 处理 Process 处理 Inbox 需要一个严谨的过程。 要判断 “是否需要去做？” 不需要。丢弃 Trash / 作为资料存档 Refenrence / 时机成熟再说 Someday/Maybe 。 需要。立即去做 Action / 委托给别人 Delegate / 延期处理 Defer 。 处理要及时、彻底，才能让整个工作流顺畅运转。 组织 Organize 组织是一个动态发展的持续过程。 主要形式：建立和管理若干的 List 用于执行的参考。 项目 Projects，有条理的处理事情； 下一步行动 Next Action,，清晰找到可执行目标； 等待 Waiting for，需要关注和跟踪； “将来 / 可能 Someday/Maybe，需要定期回顾。 检查 Review 计划不如变化快，面对时刻变化的目标，我们需要经常的进行“检查”。至少一周进行一次定期“检查”，才能让我们的“项目和行动列表”与不断变换的环境保持一致。Omnifocus for iPad 的 Review 功能十分惊艳，据说很快也将移植到其他版本中去。 执行 Execute 不去“做”的 GTD 都是纸上谈兵，有了之前几个步骤的实现，剩下的就是放松大脑，专注的去把手头的事情做好了！ 关于 OmniFocus# OmniFocus 和 2Do List 的区别 OmniFocus 可以分解项目、任务直到行动、一起用情境重新组织行动、一起回顾，贯穿做事的整个过程。GTD 方法有五个流程，六个高度，这是也人生的高度，随着高度的爬升使用 OmniFocus 的方法会完全不同，看看项目文件夹的分类和情境分类就知道了。2Do List 永远告诉你的是「还有这些事要做」。 OmniFocus 特点 快速收集 云同步（MacOS、iPhone…软硬加起来真是贵死了。。。）无限层级嵌套（管理多个项目你就知道好处了。。。）透视（OmniFocus 最强大的功能，定制化看任务） OmniFocus 使用哲学 不同类型的人，侧重点不同。角色特征 -&gt; 关键流程 -&gt; 技巧 OmniFocus 个人设置（仅供参考）#Projects 项目# Ability Work Ritual 重复事项，多结合 四象限法则 - 重要不紧急 情景 Sundries Contexts 情景# Office Eat Frog / Highest Priority Tomato Time Home High Energy Brain Dead Outward Meeting Supermarket / Bank Important but not Urgent 四象限法则 重要且紧急，一般直接标 旗标 （透视）。 重要但不紧急，一般放 仪式（透视），重要在于此。 Delegate with People On-hold / Waiting 透视# 旗标 《Eat That Frog》，每天早上完成最重要的任务，Most Important Task。 每天最多三个青蛙，有空就想办法搞定。 仪式 周期行为。 追踪 关于人，指派任务并且反馈。 预测 与时间有关。 我的工作流# 旗标 -&gt; 截止日期 -&gt; 情景 -&gt; 项目（聚焦） 流程化和系统化才能解放大脑，建立个人工作流。 一些他人的提醒# 挖掘技能的实质所在 找到关键的「小事」。 对于得分后卫来说，关键小事是远距离投篮； 对于中锋来说，关键小事是背身单打； 对于销售员来说，关键小事是沟通； 对于当前的职位与身份，你的关键小事是什么？ 用正确的方法去做“小事”。 比如篮球运动员用正确的方式练习投篮； 我们也要用正确的方法来面对琐碎的事情，做事靠系统，这是基本功。 就像开头说的，对于刚开始做项目管理的人来说，比较痛苦的就是职位升了，工作方式没有升级。 把关注点从「做事」，转到「做人」 把行动的重点从「搞定」，转到「检视」 创业团队的时间管理# 常见问题： 过于自由的工作状态 项目紧迫感不强，计划的事情总到最后一刻才完成。 团队成员之间会互相干扰 工作状态一但被打破，很难再次进入专注状态。 无法预估计划进度 整体进度带来了不确定性。 解决方案 倒推的方法重新建立里程碑 问题的关键是：团队对挑战和危机有没有统一的认识？ 任务看板 + 每周例会 每周例会：讨论项目进度和下周计划 看板管理：每周任务上墙，把规划、进度、任务分配展示 (Trello 是个好东西) 番茄工作法 + 收集篮 + 免打扰牌 实体的收集篮，专注工作的时候尽量不要打扰！ Reference：# 如何使用 Omnifocus 做时间管理—系列 工具控的福音—Omnifocus 使用心得总结—系列 GTD 和 Omnifocus 的那些事儿—系列 OmniFocus Series OmniFocus 基础篇、进阶篇—系列 Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/4372d2e6/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>GTD</tag>
        <tag>OmniFocus</tag>
        <tag>Efficiency</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[六项思考帽]]></title>
    <url>%2Fposts%2F140ab620%2F</url>
    <content type="text"><![CDATA[[TOC] 红色思考帽 绿色思考帽 黄色思考帽 白色思考帽 黑色思考帽 蓝色思考帽 六项思考帽 Summarized by Zachary Completed on Nov. 21, 2014 思考最大的障碍在于混乱 红色思考帽 # 情绪、直觉和感情 预感、直觉和印象 不需要理由和根据，不下结论。 不必符合逻辑或者始终如一 不必为感觉辩解。 绿色思考帽 # 创造性 水平思考法 前轮与后轮 水平：创新型、设计型（前，方向）； 垂直：判断型、分析性（后，执行推动）； 旧洞与新洞 垂直思考，旧洞越挖越深； 水平思考，另外找新洞挖； “是什么”和“成为什么” 创造性思考 新想法、新观念、新认知。 发展而非判断 “Po”诱因的操作 随机诱因，制造诱因。 “选择”与“收割” 多种选择，不同层次的选择，创意暂停，尝试换角度。 不要忽略其他方案中的价值。 黄色思考帽 # 阳光和价值、乐观与积极 正面、积极地思考 梦想、幻想与希望。 理由与逻辑证明 建设性思考 与创造性的差异。 远见、利益与价值敏感 什么情况下有价值？怎样体现？有无其他价值？ 白色思考帽 # 信息与客观 事实与数据 论点，及任何事实和数据。 双层式事实系统 被信仰的事实和被验证的事实（后者层次更高）。 电脑的信仰 中立客观的态度，不提出解释和意见。 黑色思考帽 # 冷静、严肃和谨慎 谨慎和小心 风险、危险、障碍、潜在问题。 融和过程 不是用观点驳倒观点，而是质疑，评判。 过去与未来 未来发生什么？与过去经验是否相符？ 不过度使用 蓝色思考帽 # 控制和组织 思考的控制与监督 指示、组织思考，阻止争论。 集中 集中思考范围、定义并提出正确的问题，清楚地设定思考任务。 程序设计 全面纵览，组织路线。 概要、纵论、总结 观察正发生与已发生的思考过程，评论，报告，收获。 Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/140ab620/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>Thought</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[财务智慧]]></title>
    <url>%2Fposts%2Fe9d804af%2F</url>
    <content type="text"><![CDATA[[TOC] 一：财务艺术及其重要性 数字未必靠谱 分清假设、估计和偏差 提高财务智慧的意义 工具箱 二：利润表的特征 利润是一个估计值 破解利润表密码 收入：关键是确认 成本和费用：没有严格不变的规则 利润的多种形式 工具箱 三 资产负债表 资产负债表的基础知识 资产：更多的估计和假设(现金除外) 资产负债表的另一方：负债和所有者权益 资产负债表为什么会平衡？ 利润表对资产负债表的影响 工具箱 四 现金至上 现金是真实的支票 利润 ≠ 现金 现金流量的表示方法 现金与其他报表的联系 为什么现金至关重要 工具箱 五 比率：理解数字的真正含义 比率分析的威力 赢利能力比率：（多数时候）越高越好 杠杆比率: 平衡作用 流动性比率: 能付得起账单吗? 经营效率比率：最大限度地利用资产 工具箱 六 计算并真正理解投资收益率 投资收益率的基本概念 投资收益率的实质 工具箱 七 财务智慧的运用: 运营资本管理 资产负债表管理的魅力 资产负债表的杠杠作用 追踪资金周转 工具箱 八 创立财务智慧部分 财务知识普及和企业业绩 财务知识普及战略 财务透明度：我们的最终目标 工具箱 附录 财务报表样表 财务智慧 [美] 卡伦·伯曼 | 商务印书馆 Summarized by Zachary Completed on Nov. 03, 2014 财务智慧归结为四个方面的独特技能 掌握基础知识 理解财务艺术 运用分析方法 树立全局观念 一：财务艺术及其重要性 # 数字未必靠谱# 财务的艺术 会计和财务的艺术就是一门用有限的数据尽可能精确地描绘公司经营业绩好坏的艺术。 职业判断 销售收入何时确认： 确定何时销售收入记入 利润表 ^1 的一条 基本原则 产品或服务交付的时候。 如何确定一项成本是 营业费用 ^2，还是 资本性支出^3 营业费用 立即扣减 利润，而资本性支出在几个会计期间 摊销。 分清假设、估计和偏差# 四个简单但非常重要的问题： 数字包含哪些假设？ 数字是否有估计的成分？ 假设和估计引起的偏差是什么？ 产生的影响有哪些？ 应计费用 ^4 与成本分摊^5 确定应计费用并进行成本分摊，总是需要作出 假设 和估计。 确定应计费用并进行成本分摊，是会计的一项主要工作。 会计师利用它们，来精确地刻画某一时期企业经营情况。 谨慎判断 折旧^6 在实务中，会计对某一设备如何计提折旧存在很多职业判断，这种判断能够产生相当大的影响。 企业价值评估的多种方法 公司公开发行股票，由股票市场来定价。 企业价值是：股价 * 已发行的股票数量 = 市值。 公司为私人持有，没有市场为其定价，这时候购买者或出售者必须依赖其他估价方法。 如 价格收益比法、现金流折现法、资产估价法 等等。 每一种方法都需要一大堆假设和估计。 提高财务智慧的意义# 从财务的视角看企业发生了什么。 利用这些信息进行更有效的工作和管理。 学会阅读财务报表。 使用报表的信息把工作做得更好，计算比率。 了解投资收益率（ROI）和运营资本管理。 提高决策能力和增强对企业的影响力。 财务知识普及的益处 增强评估自己公司的能力 运用新的工具，观察企业发展趋势和理解数字背后的实质。 学会衡量公司的业绩，知道如何最大限度地实现企业目标。 更好地理解数字中的偏差 当决策是根据数字作出的，而数字是根据会计的假设和估计作出的时，会计和财务人员实际上进行了有效的控制。 提高使用数字财务工具进行分析决策的能力 利用财务知识作出决策、指导下属、规划部门的发展。 对企业的益处： 利于整个组织实力的平衡； 利于团队作出更好的决策； 利于员工间更密切地合作。 财务智慧的制约因素: 讨厌数字，恐惧数学，不喜欢数学计算； 会计和财务部门严格控制所有的财务信息； 老板不希望对数字提出疑问； 工具箱# 融资分析报告，企业的财务状况。 企业过去一年的收入增长、利润增长和赢利状况的改善。 企业遗留的财务问题。 企业的 现金 ^9 流状况。 求职者者可向招聘方提出的财务问题： 公司是否赢利？ 它的所有者权益是正数吗？ 它的流动比率足以支持开工资吗？ 销售收入是呈增长还是下降趋势？ 财务人员与其工作内容: CFO： CFO 从财务方面管理公司，并为公司进行战略规划。 负责监督企业所有的财务职能。 企业的财务主管和会计主管都向其汇报。通常也是董事会成员。 财务主管： 同时关注企业内外。 负责建立与维护企业与银行的联系，管理改进，预测财务状况，及作出权益和资本结构决策。 也负责协调与投资者的关系，作出与股权相关的决策。 一般认为，理想的财务主管，既要精通财务，又要人品出众。 会计主管： 完全对内。 主要工作，提供可信赖的财务报表。 主要负责，一般会计、财务报表，业务分析，财务计划，资产管理和内部控制，保证日常交易的准确的记录。 二：利润表的特征 # 利润是一个估计值# 彼得·德鲁克：利润 是企业最主要的评价标准。 必要的一点会计知识： 利润表 ^1，它衡量的是 销售收入 ^11、 成本（费用）以及 利润（或收益）。 任何利润都是从销售收入开始。 当企业向客户提供一种产品或服务，会计会认为就是一项销售收入。 企业会把销售收入的金额在利润表的最上面一行，不用介意客户是否为产品或服务付款。 什么是利润表中的“成本”？ 利润表中的成本和费用是在该期间内为取得销售收入而发生的成本和费用。 会计称之为 配比原则 ^10（相关的成本应该与利润表中特定期间内的销售收入相配比）—这是 理解如何确定利润的关键。 会计不只是算出 现金 ^9 流动的总数，他们还必须作出假设和估计。这一过程中，就有可能给数字带来偏差。 利润表的目的: 原则上，利润表要在衡量所有数据合计后，确定企业提供的产品服务 是否赢利。 会计最费力的工作就是列出企业在特定期间内产生的 收入 ，列出取得收入发生的 成本 （包括期间 费用 ），如果有还要列出 利润。 长远看，经营良好的公司的利润表和现金流量表可以互相提供数据。利润将转化为现金。 在特定时间内公司赚取了利润，并不意味着它用现金去支付账单。利润始终是一个估计值。 破解利润表密码# 很多利润表上的数据 反映了估计和假设。 阅读利润表： 利润表的表题： 利润表 / 赢利和亏损表 / P&amp;L 表 / 经营运作表 / 业务运作表 / 收益表 … 注意 “真实利润表” 与 “预测利润表” 的区别。 重要的数字 销售收入 （或称 营业收入 ），总在 利润表最上面一行，（“最上面一行增长”，说的是销售收入增长），成本和费用居中，利润在最下面。 查看哪项数字与销售额相比得出的值最大，一般可判断什么对于企业是至关重要的。 数据的比较 关键要解释哪些内容发生了变化，哪些数字与推想的一致，哪些不一致。 附注 内部利润表可能不包括附注，如果有，则建议详细地阅读附注。 收入：关键是确认# 收入确认是经常发生财务欺诈的一个舞台。一个公司可以在向客户提供一项产品或服务时，记录和确认 销售收入^11。 模糊的指导准则： 会计人员使用的记录和确认收入的指导准则是 收入必须已经赚得。 以做项目为主的公司一般有这样的规则，允许在项目 有重大进展时确认部分收入。 操纵的可能性： 原则上，任何对利润表最后一行有“重大”影响的会计变更，应在附注给予说明与解释。 财务智慧是指里金额收入如何确认、分析销售收入中的差异，并根据真实的业绩进行管理。 成本和费用：没有严格不变的规则# 线上科目，线下科目^15（分界线科目一般指毛利润）。 产品成本 或服务成本^13: 利润表中的费用主要包括两大类：产品成本(Cost of Goods Sold, COGS )，服务业中则叫做服务成本(Cost of Services, COS ) 。 COGS 背后的含义是衡量所有与生产产品和提供服务直接相关的成本、原材料和劳动。这就可能出现多种解释。 公认会计准则 [^14]（GAAP）提供许多规则的详细解释和指导原则， 关键是合理性和一致性。 营业费用^16：什么是必要的？ 有些企业把营业费用称为销售费用、一般费用和管理费用(sales, general, and administrative expenses, SG&amp;A 或 G&amp;A); 折旧与摊销 营业费用的另一部分是折旧和摊销费用，它们一般隐藏在销售费用、一般费用和管理费用中。 一般来说，折旧是实物资产 (如卡车 / 机器) 在其估计使用年限内的一种“消耗”。这意味这由会计来计算资产可能使用多长时间从而把其全部成本分割成合理的部分，并计算多少费用列支在利润表上。 折旧是会计师所称的一种典型的非现金费用^17。摊销的原理与折旧相同，但是它适用于无形资产。 无形资产常常是构成企业资产负债表的一大块儿，专利、著作权、商誉 ^7 等都是无形资产。它们需要花费成本来购置，而且有价值，但是它们不是像不动产和设备那样的实物资产。因此企业必须把专利所产生的费用和它可以带来的收入相配比，每次摊销一点。 一次性开支：危险的信号 其他收入或费用科目 (一般是出售资产的收入或损失，或者是与企业经营无关的交易的收入或损失) 和“税金”科目。 这些出现在产品成本和营业费用之后的一个科目，对赢利至关重要，这一科目最常用的名称是“一次性开支”。 利润的多种形式# 利润 ^18 = 收入 -（成本 + 费用） 利润三种基本形式 ： 毛利润 ^19、 营业利润 ^20 和净利润 [^21]。 净利润 = 营业利润 - 利息税金 = 毛利润 - 所有费用 毛利润 了解毛利润变化的原因，有助于管理者判断工作重点在哪里。 另外同样需要思考，数字是否存在偏差。 何时确认收入，哪些费用应包括在产品成本内，这两项决策对毛利润有重大影响。 营业利润（EBIT） 营业利润（毛利润减去营业费用，包括折旧和摊销费用），表示扣除利息费用和税金前的收益。 营业利润，衡量企业管理好坏的一个很好的标准。 同样有潜在的偏差影响营业利润，如“一次性开支”、如何计提折旧等等。 EBITDA，扣减利息费用、税金、折旧和摊销费用前收益，忽略了折旧等非现金费用。 净利润 净利润一般是 利润表最后一行。 净利润是所有的费用都扣减后剩余的利润。 所有费用包括：产品或服务成本、营业费用、税金、利息费用、一次性开支以及折旧和摊销等非现金费用。 三种可能的改变低赢利的办法 增加销售收入； 找到降低成本和提高经营效率的方法，即降低 COGS； 削减营业费用，常意味着裁员。 工具箱# 理解偏离值 偏离值就是指差异、不同。 掌握偏离值的一个难点是，确定偏离值是有利的，还是不利的。 三 资产负债表# 资产负债表，有助于显示公司的财务状况是否良好。资产负债表，是企业的通用放大器，可能是所有报表中最重要的。 资产负债表的基础知识# 资产负载表的内容 反映企业在某一特定日期所有的和所欠的事项的会计报表。 企业所有的和所欠的差就是 所有者权益^22。 资产负载表的所有者权益在一定程度上会显示出企业留存的利润或者累积的亏损，这项称为 留存收益 / 累积盈余。 个人和企业 所有的 = 所欠的 + 净资产 企业所有的经济资源称为 资产。 企业所欠的称为 负债。 企业的净价值称为 所有者权益 / 股东权益。 资产 = 负债 + 所有者权益（基本会计等式） 阅读资产负债表：资产 = 负债 + 所有者收益 主要有两种格式 传统模式：资产在左边，负载和所有者权益在右边，负载在右上方； 另一种模式：资产在最上面，负载在中间，所有者权益在下面； 资产负债表中，特定项目会在附注中，有所澄清和说明。 另外企业常在附注中，包含一份标准的免责声明。 资产：更多的估计和假设(现金除外)# 资产：企业所拥有的，包括现金和证券、机器和设备、建筑物和土地等一切资源。流动资产：一般列在资产负载表的最上方，指一年内能够变现的资产。长期资产：指使用年限超过一年的资产。 资产 的类型 现金和现金等价物 硬通货：包括存在银行的现金，货币市场账户中的现金，包括公开交易的股票和债券。 应收账款 指客户欠企业的账款。 收入是付款的承诺，相当于企业为客户贷款，企业拥有对客户的债权。 坏账准备金：应收账款科目的抵减科目。对客户不能支付所欠账款的估计。也会用此作为 “烫平”收益^24 的一种手段。 存货 指即将销售的产品的价值，称产成品存货。 指正在生产的产品的价值，称产品存货（WIP work-in-process）。 用于制造产品而存储的原材料，称原材料存货。 服务企业一般没有太多存货，但其他类型的企业几乎都有不少存货。 土地、厂房和设备 包括建筑物、及其、车辆、计算机和企业的其他实物资产。 此项目的数值是企业用于维持运作，而购买全部机器和设备所支付的总成本（这里指购买价格）。 因为以购买价值计价，所以土地等比较容易出现“被低估的资产”。 减去：累计折旧 土地不会损耗，因此不对土地计提折旧，但是建筑物和设备要计提折旧。 核算折旧关键在于它产生收益和盈利的使用年限内对资产的投资进行分摊。 商誉 商誉是被收购 ^25 方支付的价格与收购方实际得到的净资产之差。 新的规定，商誉的价值列入账面，并不进行摊销。 知识产权、专利权和其他无形资产 软件和专利权会在未来的会计期间产生收入，这些投资应作为无形资产^26，在它们可以产生收入流的年限内进行摊销。 同样，没有产生收入效果的研发费用应该在利润表计入费用。 摊销决策，通常也能够对利润和所有者权益产生重大的影响。 应计费用和预付资产 每个月从资产负债表的预付费用科目转出，并计入当月的费用，称应计费用。 资产负债表上登记尚未支付的费用的账户称“应计资产账户”。 资产负债表的另一方：负债和所有者权益# 负债 的种类 流动负债：指需要一年以内偿还的债务。 长期负债：指需要在一年以上的期限内偿还的债务。负债通常按照从短期到长期的顺序列出。 短期贷款：信用贷款和短期循环贷款项目。 应付贷款：应付账款表示企业欠供货商的钱款。 应付费用和其他短期负债：包括了公司所欠的其他所有项目。 长期负债：大多数是贷款，但也有其他如递延红利或报酬、递延税款、养老金负债等。 所有者权益（股东权益 / 持股人权益）: 资产减去负债后剩下的余项，包括投资者投入的资本和公司长期经营中取得的留存收益。 一般包括以下几类：优先股 ^35、 普通股 ^36、 资本溢价 ^37、 留存收益^38。 资产负债表为什么会平衡？# 所有交易过程中，所有者权益保持不变。所有者权益只有在公司从所有者哪里得到资金、向所有者支付回报，或者记录利润和亏损时才会受到影响。同时，每一笔影响资产负债表的交易都会影响另一方。 利润表对资产负债表的影响# 利润对所有者权益的影响 净利润会增加所有者权益，除非作为股利被支付了。同样，净亏损会减少所有者权益。 其他的影响: 利润表上的销售收入，要么产生了现金，要么产生了应收账款。 每笔工资记录在产品成本或营业费用中，反映了资产负债表中现金的减少或应付费用的增加。 购买原材料则增加了应付账款等等，这些变化都会对总资产或负债产生影响。 总而言之，任何管理者应该后退一步，审视全局，不要仅仅考虑利润表的某一项目，也要关注资产负债表和现金流量表。这样可以使你的思想、工作和决策将“更深入”。 评估一家公司是否经营良好 公司偿付能力充足吗？公司的资产超过了负债，以致所有者权益是正数吗？ 公司能支付其费用吗？这里一个重要的数字是流动资产（尤其时现金）与流动负债的比值。 所有者权益是否长期持续增长？比较不同时期的资产负债表可以看出公司是否在正确的方向上发展。 其他一些问题 商誉对企业的“总资产”有什么重要的影响？ 企业用什么方法提取折旧，它又什么重要影响？ “现金”科目是长期持续增长（通常是一个良好的迹象）还是持续下降？ 如果所有者权益是增长的，那么是因为投资者在公司的要求下注入了资本，还是因为公司赚了钱？ 工具箱# 员工 “员工是我们最有价值的资产”（他们是吗？） 员工确实会产生费用：工资常常是利润表中最大的费用支出之一。 把员工看做资产 对员工进行培训、投资，对员工给予很好的关照。 从长远看来，把员工看做资产会提升企业的盈利能力，增加企业的价值？费用？还是资本性支出？ 把一个大的科目从利润表中拿出，放在资产负债表上，这样只有折旧作为费用抵减了利润，产生了利润增加的效果。 四 现金至上# 现金流量是衡量企业财务状况是否健康的重要指标，也是衡量赢利能力和所有者权益的重要指标。 现金是真实的支票# 巴菲特: 根据长期的视角而不是短期的视角来评估企业。 寻找自己熟悉的企业。 查看财务报表时，非常强调现金流的衡量，称为所有者收益^29。 为什么现金之上？ 现金是受财务艺术影响最小的数字。 维持企业生存的是现金； 现金流是企业财务状况是否良好的一个重要指标。 利润 ≠ 现金# 企业既需要现金，也需要利润，但两者不是一回事。企业要良好运转，两者都需要。 现金流入与利润不是一回事 收入在销售完成时入账。（利润来自收入，反映的是支付承诺；现金流反映的总是现金交易；） 费用与收入配比。（现金流量表总是可以衡量特定期间内现金的流入和流出。） 资本性支出没有抵减利润。 理解利润和现金的区别，是提高财务智慧的关键 找正确的专家：缺现金，找财务专家；低盈利，找管理专家。 作出关于投资时机的最佳决策: 对何时采取行动作出明智的决策能增加企业的效率。 现金流量的表示方法# 现金流的种类：经营、投资、融资活动 产生的 现金流。 经营活动产生的现金流 指所有与企业的实际经营有关的现金流，包括流入和流出。 显示的是经营活动的现金流量。在很多方面，它是唯一一个反映企业经营状况是否良好的重要数字。 投资活动产生的现金流 这里的投资活动指企业从事的投资活动，而不是企业的所有者从事的投资活动。 这一类最大的项目是花费在资本投资上的现金——也就是购买资产花费的现金。 表明企业对未来投资多少。 融资活动产生的现金流 融资活动一方面是指贷款和还款，另一方面是指企业与股东之间的交易。 表明企业在多大程度上依赖外部融资。 现金与其他报表的联系# 所有的交易最终都会对利润表、资产负债表和现金流量表产生影响。 绝大部分交易最终都会在所有三张报表中找到。 调整 ^32 利润和现金: 使利润与现金相一致。 1. 调整应收账款。- $ 应收账款的变化 = 新销售收入 - 收回的现金 $ 2. 调整折旧。- 折旧是非现金费用，对现金流量表没有影响，必须加回去。 为什么现金至关重要# 理解现金流的意义 了解公司的现金状况有助于你了解公司的运营情形、公司朝那个方向发展、高层管理者优先考虑的是什么。 特定的现金流来自哪里？经营活动？ 投资的现金流是负数？公司对未来进行投资？ 融资的现金流如何？是否有资本投入？还是在抛售股票？ 这些问题可揭示出高层对公司的发展计划。 你可以影响现金流量 应收账款（能否及时支付账款？）、存货（如何减少存货？）、费用（能否延期支付费用？）、给予信用额度 了解现金流量的管理者往往卑赋予更多的职责 工具箱# 自由现金流 自由现金流 = 经营活动产生的净现金流 - 投资于资本设备的现金 自由现金流良好的意义 公司有选择权 可利用自由现金流偿还债务、购买竞争对手的公司，或向所有者支付股利。 可专注于业务 一段时间内无需担忧发工资或筹集资金等问题。 公司股票更易被投资者看好 五 比率：理解数字的真正含义 # 比率分析的威力# 分析比率:（比率分析提供了比较的基础，可以看出比原始数字更多的内容。） 银行和其他资金借出方—负债权益比—企业能否偿还债务。 高管—毛利润率—成本是否增加或者折扣是否恰当。 信用部门—速动比率—评估客户财务状况。 股东—市盈率—与其他公司股票比较，确定企业价值是被高估还是低估。 另外，比率本身也可以进行比较: 不同会计期间的比率。 比较预期与实际的比率。 与行业的平均水平比较。 企业中，管理者和股东一般利用四类比率分析公司的业绩： 赢利能力比率、杠杠比率、流动性比率、经营效率比率。 赢利能力比率：（多数时候）越高越好# 赢利能力，是衡量公司取得收入和控制费用的指标。 毛利润率 = 毛收入 / 收入 * 100% 毛利润率，表明 产品或服务本身的基本赢利能力，而没有加上营业费用和其他费用。 毛利润率负增长，一般暗示下列两种情况： 价格压力，被迫给予折扣。 原材料和劳动力价格或服务成本上涨。 营业利润率 = 营业利润(EBIT) / 收入 * 100% 营业利润水平，反映的是从经营的角度来看的企业的整体经营状况。 营业利润率，是反映管理者整体工作效果的一个非常好的指标。 净利润率(ROS) = 净利润 / 收入 * 100% 净利润率，说明企业每元销售收入扣除所有费用后剩余多少。（也叫销售回报率。） 净利润，利润表的最后一行，也称底线比率。 常与企业上年同期的净利润率和同行业中的净利润率相比较。 资产收益率(ROA) = 净利润 / 总资产 * 100% 资产收益率，说明投资于企业的每 1 元可以获得多少利润回报。 总资产表明有多少钱在企业中被用来创造利润，资产收益率就是表明企业使用这些资产创造利润的效率如何。 ROA 高于行业标准，可能暗示企业没有为未来做准备，企业长远的前景将值得怀疑。 所有者权益收益率(ROE) = 净利润 / 所有者权益 * 100% 所有者权益收益率，告诉投资者每投入 1 美元会得到百分之几的利润。 资产和权益的区别：资产是企业所拥有的，所有者权益是指由会计原则确定的净所得。 从投资者的角度看，ROE 是一个非常关键的比率，可以衡量公司是否能够赚取与投资者承担的风险相当的收益。 投资收益率(ROI) 通常来说，ROI 与 ROA 相同，都是资产的回报。 但目前，也可以指某一特定投资的回报率。 杠杆比率: 平衡作用# 对于企业：债务可以使得企业以超过股东投资的限度来发展，从而创造超过所有者权益的利润。 财务分析师把债务称为“杠杆”，含义是企业可以通过借贷，来使用数量可观的资金，建立规模更庞大的资产。 企业中，杠杆实际上有两种方式定义: 经营杠杆 ，指 固定成本和可变成本的比率。 财务杠杆 ，指 企业资产中债务融资的程度。 关注财务杠杆，看两个比率。 负债与所有者权益的比率 = 负债总额 / 所有者权益 （一般不用百分比） 表示企业 1 美元的所有者权益负担多少债务。 企业所得税法规定，企业债务的利息允许从税前利润中扣除，从而抵免企业所得税。 杠杆收购，指管理层或其他投资者利用债务全部买下企业的股票。 银行家喜欢债务权益比，利用这个比率确定是否为企业提供贷款。比率较高，利用债务筹集资金将变得非常困难。 利息保障倍数 = 营业利润 / 每年的利息费用 （一般不用百分比） 衡量企业的“利息风险”，即相对于所得，企业每年要支付多少利息。 表明企业支付利息的难易程度，比率越高表明企业可以承担的债务越多。 流动性比率: 能付得起账单吗?# 流动性比率，表示企业履行所有财务责任的能力，不仅仅是债务，还包括支付工资、向供应商付款、纳税等。对于小企业尤为重要。 会计上“流动”指期限在一年以内。 流动资产 ，指 1 年一年可变现的资产，主要指 应收账款、存货、现金。 流动负债 ，指 1 年以内需要偿还的债务，主要指 应付账款及短期贷款。 流动比率 = 流动资产 / 流动负债 （一般不用百分比） 衡量企业流动资产与流动负债对比的指标。 对于股东来讲，流动比率太高意味着企业闲置了一批现金。 速动比率 = （ 流动资产 - 存货 ）/ 流动负债 （一般不用百分比） 也称酸性测试，是从流动比率中扣除存货后计算的比率。因为除存货外，其他流动资产相对容易变现，多数情况速动比率大于 1 较好。 经营效率比率：最大限度地利用资产# 经营效率比率，帮助评估管理的资产负债表中的某些关键资产和负债的效率。 存货周转天数(DII) = 平均存货 / (产品成本 / 天数) (一般不用百分比) 衡量存货在系统中停留的天数。 平均存货：期初存货与期末存货的平均值。 每天的产品成本：衡量每天实际使用的存货数量。 存货周转率 = 360 / DII (一般不用百分比) 指存货在一年内周转多少次。（02 年，沃尔玛，存货周转率 = 8.1；） 存货周转率越高，或存货周转天数月底，对存货的管理越严密，现金状况就越好。 应收账款周转天数(DSO) = 期末应收账款余额 / (收入 / 天数) 衡量用多少天可以收回销售收入，也就是客户多长时间能支付账单。 应付账款周转天数(DPO) = 期末应付账款余额 / (产品成本 / 天数) 表明企业平均用多长时间还清自己的应付账款。 土地、厂房和设备周转率(PPE 周转率) = 收入 / PPE 衡量使用固定资产赚取收入的效率。 PPE 周转率低，意味着企业没有最大限度地利用资产。 分析其趋势以及行业平均水平就可以看出企业效率如何。 总资产周转率 = 收入 / 总资产 衡量所有资产的使用效率。 工具箱# 哪些比率对你的企业最重要？ 企业需要根据经营环境和竞争状况，设计本企业的关键比率。 销售收入百分比的作用 每个项目以销售收入的百分比表示。 追踪连续前几个会计期间的利润表，计算每个主要项目的销售收入百分比，画出趋势线，进行详细的分析。 比率之间的联系 ROA = 净收入 / 资产 = 净利润率 * 资产周转率 提高净利润率，ROA 上升。 提高资产周转率，ROA 上升。 发现比率之间的关系，并尝试改进这些比率是击败竞争对手的有效途径。 六 计算并真正理解投资收益率 # 投资收益率的基本概念# “货币的时间价值”的基本原理 三个基本概念：终值、现值、必要收益率。 终值 指一笔钱被解除或投资，它在未来价值多少。 终值的每一次计算都包括了一系列假设，对从现在到你考察的时点会发生什么作出假设。 现值 常使用于资本性支出分析，表示未来的现金折算成当前的价值。 广泛使用于评估设备、不动产、商业机遇甚至并购中。 必要收益率 假设投资在未来得到一定的收益，希望知道为了在未来某一特定日期得到一定的收益现在需要投资多少。 因此，对利率或折现率的决策，实质上是为了作出投资需要多少收益率的决策。 它们在投资之前所要求的收益率，称为 “必要收益率” 或称“基准收益率”。 设立基准收益率时，存在一些判断： 第一个因素，机会成本^33。 企业现金有限，必须对如何最大限度地使用这些资金作出判断。 第二个因素，企业自身要承担的 资金成本^34。 必要收益率，必须总是高于资金成本。 三步计算企业资金成本： 财务成本（利率） 估计股东的预期收益率 两者加权平均值 基准收益率一般很少遵循某一公式，CFO 将对特定投资的风险、如何进行融资以及企业的总体状况进行评估。 投资收益率的实质# 决定进行什么样的投资以提升企业价值的过程。 分析资本性支出 资本性支出指需要很多资金的大型项目。 一般认为，资本性支出可以在一年以上的期限内产生收入或降低成本。 为什么这些支出的需要特别处理 资本性支出占有企业较多的资金 一般预期在几年内给企业带来收益，因此要运用货币的时间价值 总是具有一定程度的风险 让工程师和技术人员参与资本预算过程非常正确，他们需要了解一些财务知识 如何进行分析 第一步，确定初始现金投入，包含着估计和假设。 设备购买价格、安装费用、学习费用等等，都应作为现金支出，不应抵减利润。 第二步，预测这项投资未来的现金流。 第三步，评估未来的现金流 — 计算投资收益。 常见三种方法：回收期法、净现值法(NPV)、内含报酬率法(IRR)。 分析资本性支出的三种方法 回收期法 回收期 = 初始投资 / 每年产生的现金流 衡量从项目产生的现金流中收回初始投资所需要的时间。 回收期应低于项目使用期限。 只用于比较项目或拒绝项目(知道哪个项目可以收回初始投资)。 净现值法 NPV 折现方程 PV = FV1/(1+i) + FV2/(1+i)^2 + FV3/(1+i)^3 + ... + FVn/(1+i)^n PV = 现值； FV = 每一期间预计产生的现金流； i = 折现率或基准收益率； n = 考察的期间数； NPV = PV - 初始投资 如果一个项目的净现值大于零，就应该接受，该项目的收益率大于企业的基准收益率。 一般是财务专业人员分析资本性支出的首选方法 考虑了货币的时间价值，把未来的现金流折现到其今天的价值 考虑了企业的资本成本或基准收益率 给出了收益的现值，因此可以把初始投资与收益现值进行比较 折现率与净现值 NPV 的关系： — 折现率提高 -&gt; NPV 降低；折现率降低 -&gt; NPV 提高；较高的折现率，意味着资金有较高的机会成本。 具有潜在的缺点，计算净现值要依据较多的估计和假设。 内含报酬率法 IRR 计算投资获得的现金流实际能提供多少收益。把收益率与基准收益率相比较。 调整基准收益率，并找到使得净现值为 0 的点时，该基准收益率即为项目的内含报酬率。 当彼此竞争的项目有不同的持续期时，单独使用 IRR 会使我们偏好于回收期短、收益率高的项目，而本应该投资于回收期较长、收益率较低的项目。另外 IRR 也没有解决规模问题。 三种方法的比较 对重大投资项目，同时使用内含报酬率法和净现值法更有意义。当三种方法出现冲突时，最好选择净现值法。 使用净现值法进行投资决策非常有意义，分析资本性支出时需要采取最重要的步骤就是对现金流本身的预测。 一般来说，进行敏感性分析也十分有意义。 工具箱# 分析资本性支出的步骤指南 一份关于投资收益率的计划书 = 一份该项目资本性支出的分析报告，了解投资是否值得，并且希望用计算来支持。 收集有关投资成本的所有数据。 包括购买价格、运输成本、安装费用、停工修理费用、调试费用等等。还需要确定设备使用年限。 根据它可为企业节省的费用或者增加的收入，确定新设备的收益。 确定企业对这类投资的基准收益率。用该基准收益率计算投资的净现值。 同时计算回收期内和内含报酬率。 写出简洁明了的计划书。 介绍项目，列出成本和收益（既包括财务方面的，也包括其他方面的），描述风险。 解释它如何与公司的发展战略和竞争状况相匹配，要进行净现值、回收期和内含报酬率的计算。 确切解释哪些估计值很好，哪些地方可能不确定，作出敏感性分析。 一项谨慎的计划更容易得到资金，它更有可能从长远角度最大限度地增加企业的价值。 七 财务智慧的运用: 运营资本管理 # 资产负债表管理的魅力# 企业的财务部门负责管理资产负债表，负责计算应该以什么样的条件借多少钱，负责在必要的时候筹集股权投资，负责关注企业整体的资产和负债状况。 营运资本 的构成 营运资本 = 流动资产 - 流动债务 营运资本与生产循环 企业需要多少营运资本？ 非财务部门的管理者可以真正影响的三个运营资本账户是：应收账款、存货和应付账款。 资产负债表的杠杠作用# 应收账款周转天数 DSO，企业 DSO 越长，运转起来需要的营运资本就越多。相反企业 DSO 越短，需要的营运资本越少。企业了解并运用 DSO 的人越多，企业可支配的现金就越多。 应收账款管理 必须理解它的含义以及它在朝哪个方向发展。 经营经理和产品研发经理必须问问自己，产品是否存在什么问题而使客户不愿意付款，企业销售的产品是客户想要和得到吗？ 面向客户的管理者也必须问类似的问题，我们的客户经营良好吗？行业中标准的付款期限是什么？客户的业务出现问题，也应该立即提醒销售人员和财务人员。 负责信用调查的管理者需要询问企业为客户提供的信用标准是否对公司有利，是否与客户的信用状况相匹配，应该精确设定某一客户的信用标准，还需确定现金折扣的政策，帮助企业刺激应收账款的收回，进而降低 DSO。 企业界定客户应该具备的特征： 大企业 公司因及时付款出名 能维护和了解提供给他们的产品 寻求持续的合作关系 存货管理 精益制造、即时库存管理、经济订货批量等专门术语形容这一管理。 存货管理的挑战是把存货降低到最小量，仍能保证每一种原材料和每一个零部件在需要时够用，保证足够产品在客户需要时交付。 说到底就是需要多少存货既能满足消费者需求又能实现冻结资金最小。 不同的管理者对企业的存货使用都会产生影响，意味着同时也对企业营运资本产生影响。 个性要求差异小，标准产品越多，企业持有的存货越少。 工程师升级产品版本，给存货管理带来负担。 生产部门对存货产生重大影响，高效率的生产流程实际可以使存货需求最小。 当企业发展良好时，保持较低的产品单价是有效管理模式中管理生产成本的一种方法。 但当产品需求放缓时，生产管理者必须既考虑产品的单位成本，又要考虑现金。 追踪资金周转# 现金周转期，衡量企业收回现金的效率如何。还有确定企业在多长时间内支付它欠供货商的钱。财务角度，鼓励管理者使 DPO 最大化，使得企业保留更多现金。但也要考虑企业与供应商建立的是何种关系，希望建立什么样的信誉。长远来看，DPO 大大大于 DSO 会比较影响与供应商的良好关系，DPO 缩短有利于围绕企业建立一个强大的利益共同体。 资金周转期 现金周转示意图 确定所有这些阶段需要花费多长时间，并能理解企业的现金要被占多长时间。 现金周转期 = DSO + DII - DPO DSO: 应收账款周转天数 DII: 存货周转天数 DPO: 应付账款周转天数 提供了一种计算企业需要多少现金的方法： 把每天的销售收入乘以现金周转期的天数就可以了。 缩短现金周转期：降低 DSO、降低存货、增加 DPO。 工具箱# 应收账款的时效 应收账款周转天数 DSO 不是唯一的一种衡量指标，另一个指标是应收账款时效。 考察应收账款时效一般是真正了解企业应收账款状况的关键。 时效性分析提醒我们关注这类数字:30 天内可以收回的应收账款、30~60 天内可以收回的应收账款等。 八 创立财务智慧部分 # 财务知识普及和企业业绩# 提高企业业绩 一般认为，财务智慧越高，企业业绩越好。 有财务智慧的管理者能够更有效的管理资源、更巧妙地利用财务信息，进而增强企业赢利能力和现金流。 企业的计划应该是把员工的努力和企业的季度利润分配直接挂钩。 建立阳光、透明和公开的交流，当人们理解了企业目标并努力去实现这些目标时，就容易建立起充满信任感和归属感的组织氛围。 财务培训十分重要，它是增长财务智慧的方法，他们将关注重点放在自己可以产生影响的数字上，酶切同时得到季度利润分享。 有着财务智慧的管理者能够对不确定性更快地作出反应，如果他们理解了其努力工作所追寻的财务目标。 把财务知识应用于日常管理 如果他们知道自己部门的业绩如何衡量，知道自己每天工作的财务意义，各个部门都能够作出更明智的决策. 第一线员工和管理者应该了解什么事企业需要的，才能更出色地完成工作。 企业大规模地让员工、一线管理者参与业绩目标、主要业绩指数和其他标准的制定。 绝大多数人愿意适应新情况，只要他们理解了发生变化的原因。 员工参数性的衡量标准，其中两个指标是“企业业绩、计划和目标的信息分享独”和培训员工“了解企业的能力”。 企业对员工的财务知识普及得越多，企业经营得越好。 所有有员工都确切地知道企业的状况。 在财务信息对所有人公开的情况下，任何人想改动账目都十分困难。 财务知识普及战略# 制定实现财务智慧的战略。 财务地图 用图解说明利润从何而来等问题，清晰地显示整个业务流程，显示了每一元的销售收入要支付每个部门的多少费用，清晰地说明留存了多少利润，而且让企业的每个人能够看到企业全部的经营活动。 一个企业最好张贴两份这样的地图 一张显示企业的目标数字 — 最好的分公司将要做的； 另一张上管理者则写出了本部门的实际数字。人们可以看到每一个关键指标与最好的部门多么接近，或者差距大小。 工具和方法 与成年人学习方法有关的重要规则，最重要的一条就是在学习中让他们参与。在介绍一些基本原理后，让他们做一些计算，讨论产生的影响，并解释其中的意义。如果他们理解全局背景，以及所学与工作的联系，与企业经营成果的联系以及与个人财务状况的联系，他们将密切注意。另外，要让大家不会因为不知道而尴尬，保证教学目标明确，保持教学过程有趣。 培训(反复进行) 召开多次集中的培训 每次集中介绍一个财务概念，介绍三个表等；根据部门情况，重点关注特定的数值，如毛利润、销售费用率等等。 每周的“数字”会议 制定部门的指标数字，关注哪些关键数字在某些财务报表中有重要的关系，并最终影响企业的财务来源。 一旦他们对预测产生了兴趣，就会认为自己是数字的主人。 强化: 记分板和其他直观教具 不仅建议在会议上讨论关键的数据，也建议在一块计分板上张贴这些数据，把现在的业绩和过去的业绩以及对未来的预测相比较。对于这样的“仪表盘”，一定要保证清楚、直观、易于查看。 财务透明度：我们的最终目标# 就企业而言，我们更相信财务知识的力量，和财务智慧运用到企业经营中的必要性。 财务信息是企业的神经系统，它放映了企业可以走多远 — 企业的长处在哪儿、弱势在哪儿，以及机遇和威胁在哪儿。 工具箱# 萨班斯—奥克斯利法案 建立公共企业会计监督委员会。 禁止财务公司向客户提供审计和非审计服务。 要求董事会中只要有一位财务专家。 要求监事会必须建立一套程序，使员工能够绝对保密地向监事会主管披露会计欺诈。 此外，法律还禁止企业向高管人员和行政主管给予个人贷款或为个人贷款担保。 附录 财务报表样表# 一家虚构公司的财务报表 利润表 资产负债表 现金流量表 [^14]: 公认会计准则，GAAP 是“公认会计准则(Generally accepted accounting principles)”的缩写。GAAP 制定美国财务报表的标准。它有助于保证财务报表的有效性和可信性，使得企业之间和行业之间的财务报表的比较更容易。 大多数优先股没有投票权。在某种程度上，它们与其说是股票，不如说是债券。区别是什么？债券的持有者得到固定的利息，而优先股的持有者得到固定的股利。公司利用优先股筹集资本，因为它与债务有不同的法律意义。如果公司不能支付债券利息，债券持有人可以强制公司破产。而有限股持有人一般没有这个权利。 Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/e9d804af/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>Financial</tag>
        <tag>Accounting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Keynote Tutorial]]></title>
    <url>%2Fposts%2Fa2b62ad8%2F</url>
    <content type="text"><![CDATA[[TOC] 02. 为什么要做幻灯片？ 03. 越用心越丑陋 04. 认识界面 05. 参考线与对齐 06. 次序 07. 纵深关系 08. 一致性和完整性 09. 字体 10. 背景 11. 更美观的文字 12. 文字符号 13. 取色 14. 图片 15. 图片的裁剪与修饰 16. 声画同步 17. 视频 18. 图表 19. 形状的更多用途 20. 动作效果 21. 动作顺序与成组 22. 神奇移动 23. 情商在幻灯片制作中的体现 24. 对耐力的挑战 30. 「默认」的艺术品 44. 更正确的出现 45. 擅于「作弊」的手法 46. 三谈关于乔布斯说的 电影级幻灯片 53. 以正确的方式制作幻灯片 幻灯片点评 Upcoming Keynote Tutorial | 许岑 Summarized by Dodo Continuous Updates 《许岑的幻灯片制作软件 Keynote 视频教程》 02. 为什么要做幻灯片？# 配合演讲者的说的内容，让观众听你说话的同时，用这种视觉的东西配合的展示。 人的注意力有限； 重点应该放在你以及你的演讲上； 单纯给人看的… :P 03. 越用心越丑陋# 多用心看，看设计作品、看美术作品、提升审美。 04. 认识界面# 很多投影幕布仍然需要 4:3 Keynote 的主要按钮： Table — 表格 Chart — 图表（柱状图） Shape — 形状 Media — 媒体库 Comment — 批注 Copy&amp;Paste style — 复制 &amp; 粘贴样式 Format — 格式 Animate — 动画 Document — 文稿 05. 参考线与对齐# 自带参考线 右键 Align Objects （对齐对象） / Distribute Objects （分布对象） 06. 次序# 完整呈现具有 并列关系 的内容在同一幻灯片上。 如此做，先展示第一点，第二点出现同时对第一点做渐隐，用透明度区别开来，如此类推，最后再全显示总结。 做到让观众 一次只关注一点 内容，其他 不明显地存在 在页面中即可。 如何操作： Add an Effect: Appear（出现）&amp; Opacity（透明度 10% 会是比较好的效果）; Build Order: Start（With Build1 随着 1 进行）; 整个复制到新页面 Build In &amp; Action: Change None 07. 纵深关系# 逻辑问题 send to back &amp; bring to front; 层级的纵深关系。 08. 一致性和完整性# 一致性：视觉形式的一致性。 完整性：「回」到主界面，然后再「挪」出细分界面，来保持内容的完整性。 09. 字体# 千万不要轻易使用默认的字体。 要容易让别人辨识！辨识度！！！ 字体的选择非常有讲究，要基于字体的设计理念和审美取向，尤其中文字体，还有加粗下划线等也是需要考虑的。 字体是非常重要的，需要慎重选择，要对应演讲的内容和主题！ e.g. 科颜氏化妆品，背后的字体，给人权威的感觉 10. 背景# 背景的选择：正确与合适的理念。 演讲者的身份，听众的身份，相互的立场与关系，听众会有怎样的心理感受。 e.g. 纯白的背景，上下用灰度渐变的效果。 11. 更美观的文字# 针对每一页的文字进行艺术设计。 12. 文字符号# 常用于几段文字之间的并列关系。 如何制作文字符号 Text -&gt; Style -&gt; Bullets &amp; Lists -&gt; Text Bullets 13. 取色# Colors -&gt; 放大镜 -&gt; 取色; 更准确地为文字配置适当的颜色； 14. 图片# 图片库: www.shutterstock.com（包月制） www.dreamstime.com（比较贵） istockphoto.com（比较贵） 15. 图片的裁剪与修饰# 裁剪 Image -&gt; Edit Mask(编辑遮罩) 修饰 Style 去掉 Logo 的背景 Image -&gt; Instant Alpha 适合用于边沿与背景明显对比的图片； 否则还是用 photo 来修饰； 16. 声画同步# 嵌入音频文件，Music 库中直接拉入即可。 声画同步 动作配音效，网络找音效资源文件。 17. 视频# 用视频，可以帮助演讲者表达，更容易让人理解一些抽象的东西。 18. 图表# 构建图表 -&gt; 编辑数据 -&gt; Chart / Wedges / Arrange； 快捷方式：Copy Style -&gt; Paste Style； 关键要 知道展示是什么数据。 线图 饼图 柱状图 19. 形状的更多用途# Shape 示例 划线 标明 空心圆 Border 动画：Scale big Draw with pen 白描！效果特别好 Group 组合 20. 动作效果# 动画效果要慎用。 还原真实世界的情景。 Build In 出现 / Action 动作 / Build Out 消失 多了解具体动画效果。 幻灯片之间过渡效果，要符合内容。 Magic Move 神奇移动 21. 动作顺序与成组# Build Order -&gt; Start (On Click / With Build1 / After Build 1) 顺序 右键 Group / Ungroup 成组 22. 神奇移动# 当上一页幻灯片，和下一页幻灯片，同时有相同的元素存在，只是因为排版、大小、位置等的不同，就可以用神器移动的效果。 23. 情商在幻灯片制作中的体现# 与主办方确定场地状况。 Thank you. 结尾不要缩写，要显示诚意。 24. 对耐力的挑战# 计数器。 30. 「默认」的艺术品# 要避免使用默认的设置。 需要了解一下内容： 电影、音乐、美术、设计等。 专业软件 final cut；logical call；photo shop；Ai; 44. 更正确的出现# 出现的方式，使信息 展现 更加 吻合 信息 内容。 45. 擅于「作弊」的手法# 图片分层，可以解决很多问题。 46. 三谈关于乔布斯说的 电影级幻灯片# 节奏 焦点 一个页面应该只有一个焦点。 构图 声画对位 53. 以正确的方式制作幻灯片# 幻灯片分两种 给人看的 给人讲的 写文字稿的必要性 一套逻辑完美、制作精良的幻灯片，要基于一份完备的逐字稿。 使用「默认」的样式 不要乱用动画 常用图表规则 幻灯片点评# 切换新内容不要使用叠化的形式。 内容被背景无效信息占用太多。 图片素材细节问题。 神奇移动约 0.7-0.8s 之间即可。 运用遮罩来获取图标。Format 格式 -&gt; Image 图片 -&gt; Mask with Shape 用形状进行遮罩 标题线 Upcoming# Keep Updating… Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/a2b62ad8/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>Ability</category>
      </categories>
      <tags>
        <tag>Keynote</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F4a17b156%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start#Create a new post#1$ hexo new "My New Post" More info: Writing Run server#1$ hexo server More info: Server Generate static files#1$ hexo generate More info: Generating Deploy to remote sites#1$ hexo deploy More info: Deployment Author:&nbsp;ZacharyPost link:&nbsp; https://blog.zsliang.me/posts/4a17b156/ Copyright:&nbsp;All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.]]></content>
      <categories>
        <category>nil</category>
      </categories>
      <tags>
        <tag>nil</tag>
      </tags>
  </entry>
</search>
