<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dodo&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.zsliang.me/"/>
  <updated>2019-04-20T00:37:53.000Z</updated>
  <id>https://blog.zsliang.me/</id>
  
  <author>
    <name>Zachary</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Upcoming</title>
    <link href="https://blog.zsliang.me/posts/ffffffff/"/>
    <id>https://blog.zsliang.me/posts/ffffffff/</id>
    <published>2100-01-01T04:59:59.000Z</published>
    <updated>2019-04-20T00:37:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Still transferring previous articles from other platforms. </p></blockquote><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/ffffffff/">https://blog.zsliang.me/posts/ffffffff/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Still transferring previous articles from other platforms. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br \=&quot;&quot;&gt;&lt;strong&gt;Author:&amp;nbsp;Zachary&lt;/stro
      
    
    </summary>
    
      <category term="nil" scheme="https://blog.zsliang.me/categories/nil/"/>
    
    
      <category term="nil" scheme="https://blog.zsliang.me/tags/nil/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree</title>
    <link href="https://blog.zsliang.me/posts/e0e2589a/"/>
    <id>https://blog.zsliang.me/posts/e0e2589a/</id>
    <published>2019-01-01T05:00:00.000Z</published>
    <updated>2019-04-20T01:03:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><ul><li><p>Binary Tree</p><ul><li><p>Each node has only two childs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Application</p><ul><li><strong>BST</strong>, <strong>Red-black tree</strong></li><li><strong>Heap</strong></li></ul></li></ul><h3 id="Traversing-binary-tree"><a href="#Traversing-binary-tree" class="headerlink" title="Traversing binary tree"></a>Traversing binary tree</h3><ul><li><p>3 types</p><ul><li>Pre-order: <code>root-left-right</code></li><li>In-order: <code>left-root-right</code><ul><li>We will get an ordered list after <strong>inorder traversing a BST</strong></li></ul></li><li>Post-order: <code>left-right-root</code></li></ul></li><li><p>Recursive traversal solution</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Preorder Traversal - Recursive Solution*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode root, ArrayList&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    result.add(root.val);           <span class="comment">// visit the root</span></span><br><span class="line">    preorder(root.left, result);    <span class="comment">// traverse left subtree</span></span><br><span class="line">    preorder(root.right, result);   <span class="comment">// traverse right subtree</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Inorder Traversal - Recursive Solution*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root, ArrayList&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    inorder(root.left, result);</span><br><span class="line">    result.add(root.val);</span><br><span class="line">    inorder(root.right, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Postorder Traversal - Recursive Solution*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode root, ArrayList&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    postorder(root.left, result);</span><br><span class="line">    postorder(root.right, result);</span><br><span class="line">    result.add(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Iterative traversal solution</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Preorder Traversal - Iterative Solution</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> ret;</span><br><span class="line">    </span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line"></span><br><span class="line">    TreeNode node;</span><br><span class="line">    <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">        node = stack.pop();</span><br><span class="line">        <span class="comment">// root -&gt; left -&gt; right</span></span><br><span class="line">        ret.add(node.val);  </span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) stack.push(node.right);          </span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)  stack.push(node.left);           </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inorder</span></span><br><span class="line"><span class="comment">// Left -&gt; Root -&gt; Right (Stack, FILO)</span></span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) stack.push(node.right);          </span><br><span class="line">ret.add(node.val);  </span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>)  stack.push(node.left);</span><br></pre></td></tr></table></figure></li><li><p>DaC perspective</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thought: Divide and Conquer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">dacTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="comment">// Divide</span></span><br><span class="line">    ArrayList&lt;Integer&gt; left = dacTraversal(root.left);</span><br><span class="line">    ArrayList&lt;Integer&gt; right = dacTraversal(root.right);</span><br><span class="line">    <span class="comment">// Conquer (adjust the order here)</span></span><br><span class="line">    <span class="comment">// result.add(root.val); result.addAll(left);  result.addAll(right); // preorder</span></span><br><span class="line">    result.addAll(left);  result.add(root.val); result.addAll(right); <span class="comment">// inorder</span></span><br><span class="line">    <span class="comment">// result.addAll(left);  result.addAll(right); result.add(root.val); // postorder</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p>Complexity</p><ul><li>T: <code>O(n)</code><ul><li>Because we visit each node exactly once.</li></ul></li><li>S: <code>O(n)</code><ul><li>Taking system stack into consideration</li><li>Worst case, $level = size$</li></ul></li></ul></li><li><p>To be cautious</p><ul><li>When the depth of tree is too large, we might suffer from stack overflow problem</li></ul></li></ul><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/e0e2589a/">https://blog.zsliang.me/posts/e0e2589a/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Binary Tree
      
    
    </summary>
    
      <category term="Data Structure" scheme="https://blog.zsliang.me/categories/Data-Structure/"/>
    
    
      <category term="Data Structure" scheme="https://blog.zsliang.me/tags/Data-Structure/"/>
    
      <category term="Tree" scheme="https://blog.zsliang.me/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search Algorithm</title>
    <link href="https://blog.zsliang.me/posts/cf581b8c/"/>
    <id>https://blog.zsliang.me/posts/cf581b8c/</id>
    <published>2019-01-01T05:00:00.000Z</published>
    <updated>2019-04-20T01:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><blockquote><p>Binary Search</p></blockquote><blockquote><p>Although the first binary search algorithm appeared in 1946, the first completely correct binary search algorithm was not implemented until 1962. - Donald E.Knuth</p></blockquote><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><ul><li><p>Time</p><ul><li>Avg: <code>O(logn)</code></li><li>Worst: <code>O(logn)</code></li><li>Best: <code>O(1)</code></li></ul></li><li><p>Space</p><ul><li>Recursion: <code>O(logn)</code></li><li>Iteration: <code>O(1)</code></li></ul></li><li><p>Attention</p><ul><li>Stop condition </li><li>How to update lower &amp; upper bound (<code>low</code> &amp; <code>high</code>)</li><li>How to choose the return value (<code>mid</code>)</li></ul></li></ul><h2 id="Restriction"><a href="#Restriction" class="headerlink" title="Restriction"></a>Restriction</h2><ol><li>Sorted/Ordered 单调递增或递减 </li><li>Bounded 存在上下界 </li><li>Accessible by index 可通过索引访问 <ul><li>Fit for array not linked list</li></ul></li><li>Not suitable for dataset which is too small or too big <ul><li>Too small, the performance is similar</li><li>Too big, the data is not stored consequently</li></ul></li></ol><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><ul><li><p>Iteration</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearch(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>, target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = start, high = end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            low  = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Recursion</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &gt; target)</span><br><span class="line">        <span class="keyword">return</span> binarySearch(arr, start, mid - <span class="number">1</span>, target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt; target)</span><br><span class="line">        <span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, end, target);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mid;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Variants"><a href="#Variants" class="headerlink" title="Variants"></a>Variants</h2><ol><li><p>Find the first target</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findFirstTarget</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = start, high = end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            low  = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Equal, first of arr || first of repeated target</span></span><br><span class="line">            <span class="keyword">if</span> ((mid == start) || (arr[mid - <span class="number">1</span>] != target))</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Find the last target</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findLastTarget</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = start, high = end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            low  = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Equal, last of arr || last of repeated target</span></span><br><span class="line">            <span class="keyword">if</span> ((mid == end) || (arr[mid + <span class="number">1</span>] != target))</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>Find the first number bigger than &gt;= target</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findFirstBigger</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = start, high = end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= target) &#123;</span><br><span class="line">            <span class="comment">// &gt;=, first of arr || first elem bigger than target</span></span><br><span class="line">            <span class="keyword">if</span>((mid == start) || (arr[mid - <span class="number">1</span>] &lt; target))</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low  = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Find the last number smaller than &lt;= target</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findLastSmaller</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = start, high = end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt;= target) &#123;</span><br><span class="line">            <span class="comment">// &gt;=, end of arr || last elem smaller than target</span></span><br><span class="line">            <span class="keyword">if</span> ((mid == end) || (arr[mid + <span class="number">1</span>] &gt; target))</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            low  = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Skip-List"><a href="#Skip-List" class="headerlink" title="Skip List"></a>Skip List</h2><blockquote><p>Reform linked list in order to support binary search, which is <strong>skip list</strong>. (跳表)<br>It’s a outstanding dynamic data structure. (Sometime Red-black tree can replaced by skip list)<br>Sorted Set in Redis is implemented with skip list and hashmap.</p></blockquote><ul><li><p>What is skip list</p><ul><li>Linked list with multi-level indice.</li></ul></li><li><p>How many indice do we need</p><ul><li>Given a linked list with size n.</li><li>Number of indice nodes at level <code>k</code> is <code>#: n / 2^k</code></li><li>Assume there <code>h</code> level, $h = log2n - 1$<ul><li>When <code>maxLevel = 1</code>, it’s just a simple linked list</li></ul></li></ul></li><li><p>Time complexity</p><ul><li>Assume we need to traverse m nodes at each index layer</li><li><code>O(mlogn)</code> and <code>max(m) = 3</code> =&gt; <code>O(logn)</code></li></ul></li><li><p>Space complexity</p><ul><li>Indice nodes number: $n/2 + n/4 + … + 4 + 2 = n - 2$</li><li><code>O(n)</code></li><li>In order to reduce the size, we can add a index node every 3 or 5 nodes rather than 2 nodes. ($n/3 + n/9 + … + 9 + 3 + 1 ≈ n/2 = O(n)$)</li><li>But considering the nodes are just pointers, we don’t need to store the object itself, so in many cases we can just ignore the this extra space.</li></ul></li><li><p>Operation</p><ul><li><code>Insert</code> / <code>Delete</code> / <code>Search</code> in <code>O(logn)</code></li><li>Maintain index<ul><li>When insert an new element, add a new index through a random function</li></ul></li><li><code>Search in range</code> (which is better than Red-black tree)</li><li><a href="https://github.com/wangzheng0822/algo/blob/master/java/17_skiplist/SkipList.java" rel="external nofollow noopener noreferrer" target="_blank">Ref Code</a></li></ul></li><li><p>Summary</p><ul><li> 跳表是一种动态数据结构，支持快速的插入、删除、查找操作，时间复杂度都是 O (logn)。</li><li> 跳表的实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗。</li><li> 跳表使用空间换时间的设计思路，通过构建多级索引来提高查询的效率，实现了基于链表的 “二分查找”。</li><li> 虽然跳表的代码实现并不简单，但是作为一种动态数据结构，比起红黑树来说，实现要简单多了。</li></ul></li></ul><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><ul><li> 凡是用二分查找能解决的，绝大部分我们更倾向于用散列表或者二叉查找树。</li><li> 二分查找更适合用在 “近似” 查找问题。</li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><ul><li><p>Q1: 假设我们有 1000 万个整数数据，每个数据占 8 个字节，如何设计数据结构和算法，快速判断某个整数是否出现在这 1000 万数据中？我们希望这个功能不要占用太多的内存空间，最多不要超过 100MB，你会怎么做呢？</p><ul><li>Answer<ul><li> 最简单的办法就是将数据存储在数组中，内存占用差不多是 80MB，符合内存的限制。<ul><li> 先排序，再查找。</li></ul></li><li> 大部分情况下，用二分查找可以解决的问题，用散列表、二叉树都可以解决。<ul><li> 不管是散列表还是二叉树，都会需要比较多的额外的内存空间。</li><li> 如果用散列表或者二叉树来存储这 1000 万的数据，用 100MB 的内存肯定是存不下的。</li></ul></li></ul></li></ul></li><li><p>Q2: 假设我们有 12 万条这样的 IP 区间与归属地的对应关系，如何快速定位出一个 IP 地址的归属地呢？</p><ul><li>Answer<ul><li> 如果 IP 区间与归属地的对应关系不经常更新，我们可以先预处理这 12 万条数据，让其按照起始 IP 从小到大排序。</li><li> 如何来排序呢？我们知道，IP 地址可以转化为 32 位的整型数。</li><li> 所以，我们可以将起始地址，按照对应的整型值的大小关系，从小到大进行排序。</li><li> 要查询某个 IP 归属地时，我们可以先通过二分查找，找到最后一个起始 IP 小于等于这个 IP 的 IP 区间。</li><li> 然后，检查这个 IP 是否在这个 IP 区间内，如果在，我们就取出对应的归属地显示；如果不在，就返回未查找到。</li></ul></li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://time.geekbang.org/column/intro/126" rel="external nofollow noopener noreferrer" target="_blank"> 数据结构与算法之美 15-17</a></li><li><a href="https://blog.csdn.net/tinkle181129/article/details/80037111" rel="external nofollow noopener noreferrer" target="_blank">Leetcode Binary Search 知识点总结 </a></li></ul><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/cf581b8c/">https://blog.zsliang.me/posts/cf581b8c/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Binary Search&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Although the first binary search algorithm appeared in 194
      
    
    </summary>
    
      <category term="Algo" scheme="https://blog.zsliang.me/categories/Algo/"/>
    
    
      <category term="Algo" scheme="https://blog.zsliang.me/tags/Algo/"/>
    
      <category term="Binary Search" scheme="https://blog.zsliang.me/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Sorting Algorithm</title>
    <link href="https://blog.zsliang.me/posts/b59a5e11/"/>
    <id>https://blog.zsliang.me/posts/b59a5e11/</id>
    <published>2019-01-01T05:00:00.000Z</published>
    <updated>2019-04-20T00:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><blockquote><p>Sorting Algorithm</p></blockquote><table><thead><tr><th style="text-align:center">Sorting Algo</th><th style="text-align:center">In-place</th><th style="text-align:center">Stability</th><th style="text-align:center">Time Complexity (AVG/BEST/WORST)</th><th style="text-align:center">Space Complexity</th></tr></thead><tbody><tr><td style="text-align:center">Bubble Sort</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">O(n^2) / O(n) / O(n^2)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">Insertion Sort</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">O(n^2) / O(n) / O(n^2)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">Selection Sort</td><td style="text-align:center">✓</td><td style="text-align:center">x</td><td style="text-align:center">O(n^2) / O(n^2) / O(n^2)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">Merge Sort</td><td style="text-align:center">x</td><td style="text-align:center">✓</td><td style="text-align:center">O(nlogn) / O(nlogn) / O(nlogn)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">Quick Sort</td><td style="text-align:center">✓</td><td style="text-align:center">x</td><td style="text-align:center">O(nlogn) / O(nlogn) / O(n^2)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">Bucket Sort</td><td style="text-align:center">x</td><td style="text-align:center">✓</td><td style="text-align:center">O(n + k) / O(n + k) / O(n^2)</td><td style="text-align:center">O(n + k)</td></tr><tr><td style="text-align:center">Counting Sort</td><td style="text-align:center">x</td><td style="text-align:center">✓</td><td style="text-align:center">O(n + k) / O(n + k) / O(n + k)</td><td style="text-align:center">O(k)</td></tr><tr><td style="text-align:center">Radix Sort</td><td style="text-align:center">x</td><td style="text-align:center">✓</td><td style="text-align:center">O(nd) / O(nd) / O(nd)</td><td style="text-align:center">O(n + d)</td></tr><tr><td style="text-align:center">Heap Sort</td><td style="text-align:center">✓</td><td style="text-align:center">x</td><td style="text-align:center">O(nlogn) / O(nlogn) / O(nlogn)</td><td style="text-align:center">O(1)</td></tr></tbody></table><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ol><li><p>Performace 执行效率 </p><ul><li>Time Complexity<ul><li>Avg, Best case, Worst case</li></ul></li><li>Compare &amp; Swap opreation<ul><li> 交换次数等于逆序度 </li></ul></li><li>Scale</li></ul></li><li><p>Space Complexity 内存消耗 </p><blockquote><p>Sorted in place</p></blockquote></li><li><p>Stability 稳定性 </p><blockquote><p> 值相等的元素，经过排序后，相等元素之间原有的先后顺序不变。</p></blockquote></li><li><p> 有序度 &amp; 逆序度 </p><blockquote><p> 有序度是数组中具有有序关系的元素对的个数。<br>Oredered: n*(n-1)/2 (满有序度)<br> 逆序度 = 满有序度 - 有序度 </p></blockquote></li></ol><hr><h2 id="Sorting-Algorithm"><a href="#Sorting-Algorithm" class="headerlink" title="Sorting Algorithm"></a>Sorting Algorithm</h2><ul><li><p><strong> 基于比较排序的算法下界 </strong> <code>O(nlogn)</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Q: 已知有数组 [a1, a2, ..., an]，求数组特定的一个排序组合 </span><br><span class="line">A: </span><br><span class="line">    组合数：n!</span><br><span class="line">    断言：ai &gt; aj，可排除一半的情况 =&gt; n!/2</span><br><span class="line">    若比较 k 次能得到该特定的排序，求 k。</span><br><span class="line">    =&gt; n! / 2^k = 1</span><br><span class="line">    =&gt; 2^k = n!</span><br><span class="line">    =&gt; k = log(n!) &amp;&amp; log(n!) &lt; log(n^n)</span><br><span class="line">    =&gt; k ≈ nlog(n)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Bubble-Sort- 冒泡排序"><a href="#Bubble-Sort- 冒泡排序" class="headerlink" title="Bubble Sort 冒泡排序"></a>Bubble Sort 冒泡排序 </h3><ul><li>Features<ol><li>In place sort</li><li>Stability</li><li>Best: <code>O(n)</code>, Worst: <code>O(n^2)</code></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> swapped = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">                swapped = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!swapped) <span class="keyword">break</span>; <span class="comment">// No swap</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Insertion-Sort- 插入排序"><a href="#Insertion-Sort- 插入排序" class="headerlink" title="Insertion Sort 插入排序"></a>Insertion Sort 插入排序 </h3><ul><li>Feature<ol><li>In place sort</li><li>Stability</li><li>Best: O(n), Worst: O(n^2)</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Find seout where to insert</span></span><br><span class="line">        <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val &lt; arr[j]) &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[j+<span class="number">1</span>] = val; <span class="comment">// Insert</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><ul><li>Feature<ol><li>In place sort</li><li>Non-Stability</li><li>Best: O(n), Worst: O(n^2)</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = arr[i];</span><br><span class="line">        <span class="keyword">int</span> minIdx = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; min) &#123;</span><br><span class="line">                min = arr[j];</span><br><span class="line">                minIdxinser = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Swap</span></span><br><span class="line">        arr[minIdx] = arr[i];</span><br><span class="line">        arr[i] = min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Merge-Sort- 归并排序"><a href="#Merge-Sort- 归并排序" class="headerlink" title="Merge Sort 归并排序"></a>Merge Sort 归并排序 </h3><blockquote><p>Divide and Conquer<br>BOTTOM TO TOP</p></blockquote><ul><li>Features<ol><li>Not in place sort =&gt; space: O(n)</li><li>Not-Stability</li><li>Time-Avg: O(nlogn)</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// DaC</span></span><br><span class="line">        mergeSort(arr, low, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// Merge</span></span><br><span class="line">        mergeArr(arr, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeArr</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] sortedArr = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, idx1 = low, idx2 = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (idx1 &lt;= mid &amp;&amp; idx2 &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[idx1] &lt; arr[idx2]) &#123;</span><br><span class="line">            sortedArr[k++] = arr[idx1++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sortedArr[k++] = arr[idx2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (idx1 &lt;= mid) &#123;</span><br><span class="line">        sortedArr[k++] = arr[idx1++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (idx2 &lt;= high) &#123;</span><br><span class="line">        sortedArr[k++] = arr[idx2++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=low, j=<span class="number">0</span>; i&lt;=high; i++, j++) &#123;</span><br><span class="line">        arr[i] = sortedArr[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Quick-Sort- 快速排序"><a href="#Quick-Sort- 快速排序" class="headerlink" title="Quick Sort 快速排序"></a>Quick Sort 快速排序 </h3><blockquote><p>Divide and Conquer<br>TOP to BOTTOM</p></blockquote><ul><li><p>Features</p><ol><li>In place sort =&gt; space: O(1)</li><li>Not-Stability</li><li>Time-Avg: O(nlogn), <ul><li>Worst: O(n^2) depending on the <code>pivot</code> value</li></ul></li></ol></li><li><p>How to optimzie <strong>quick sort</strong></p><ul><li>Choose a better <strong>pivot</strong> which can even split the array<ul><li>Pick the median of <code>arr[low], arr[(low+high)/2], arr[high]</code> as pivot</li><li>Randomly pick an element as pivot</li><li>Many other methods</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. In place sort, Space: O(1)</span></span><br><span class="line">    <span class="comment">// 2. Not-Stability</span></span><br><span class="line">    <span class="comment">// 3. Time-Avg: O(nlogn), Worst: O(n^2)</span></span><br><span class="line">    <span class="comment">// TOP to BOTTOM</span></span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> divIdx = partition(arr, low, high);</span><br><span class="line">        quickSort(arr, low, divIdx - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, divIdx + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot  = arr[high]; <span class="comment">// Find pivot</span></span><br><span class="line">    <span class="keyword">int</span> divIdx = low;       <span class="comment">// Divide index</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = low; i &lt; high; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">            swap(arr, divIdx++, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, divIdx, high);</span><br><span class="line">    <span class="keyword">return</span> divIdx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findPivot</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nMid = arr[low + ((high - low) &gt;&gt; <span class="number">1</span>)];</span><br><span class="line">    <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;arr[low], nMid, arr[high]&#125;; </span><br><span class="line">    <span class="comment">// 3 point median</span></span><br><span class="line">    <span class="keyword">if</span> (num[<span class="number">0</span>] &gt; num[<span class="number">1</span>]) swap(num, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (num[<span class="number">1</span>] &gt; num[<span class="number">2</span>]) swap(num, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (num[<span class="number">0</span>] &gt; num[<span class="number">1</span>]) swap(num, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bucket-Sort"><a href="#Bucket-Sort" class="headerlink" title="Bucket Sort"></a>Bucket Sort</h3><ul><li><p>Analysis</p><ul><li>Assume there are m buckets, each bucket has $k = n / m$ elements</li><li>Use quick sort in each bucket in O(klogk) time</li><li>Total in $O(m * klogk) = O(nlogk)$ time</li><li>When $m ≈ n$, which means k is really small =&gt; $O(nlogk) ≈ O(n)$</li></ul></li><li><p>Suitable for big data, when we can not load all the data in RAM at the same time (外部排序)</p></li><li><p>Case</p><ul><li>Question<ul><li> 有 10GB 的订单数据，我们希望按订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百 MB，没办法一次性把 10GB 的数据都加载到内存中。这个时候该怎么办呢？</li></ul></li><li>Answer<ol><li> 先扫描一遍文件，看订单金额所处的数据范围。</li><li> 将所有订单根据金额划分到 100 个桶。</li><li> 理想的情况下，如果订单金额均匀分布，那订单会被均匀划分到 100 个文件中，每个小文件中存储大约 100 MB。</li><li> 将这 100 个小文件依次放到内存中，用快排来排序。</li><li> 所有文件都排好序之后，我们只需要按照文件编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中。</li></ol></li></ul></li></ul><h3 id="Counting-Sort"><a href="#Counting-Sort" class="headerlink" title="Counting Sort"></a>Counting Sort</h3><ul><li>Analysis<ul><li>It’s like a special case of bucket sort.</li><li> 计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。</li><li> 而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Data range: [0, 9]</span><br><span class="line">Input data: [1, 4, 1, 2, 7, 5, 2]</span><br><span class="line"></span><br><span class="line">1) Take a count array to store the count of each unique object.</span><br><span class="line">Index: 0  1  2  3  4  5  6  7  8  9</span><br><span class="line">Count: 0  2  2  0  1  1  0  1  0  0</span><br><span class="line"></span><br><span class="line">2) Add prefix sum</span><br><span class="line">Index: 0  1  2  3  4  5  6  7  8  9</span><br><span class="line">Count: 0  2  4  4  5  6  6  7  7  7</span><br><span class="line"></span><br><span class="line">3) Output each object from the input sequence followed by </span><br><span class="line">  decreasing its count by 1.</span><br><span class="line">Process the input data: [1, 4, 1, 2, 7, 5, 2].</span><br><span class="line">Index: 0  1  2  3  4  5  6  7  8  9</span><br><span class="line">Count: 0  2  4  4  5  6  6  7  7  7</span><br><span class="line">// [-&gt;1, 4, 1, 2, 7, 5, 2]</span><br><span class="line">Count: 0  2-1 4  4  5  6  6  7  7  7</span><br><span class="line">Index: 0  1   2  3  4  5  6</span><br><span class="line">Data:  -  *1  -  -  -  -  -</span><br><span class="line">// [1, -&gt;4, 1, 2, 7, 5, 2]</span><br><span class="line">Count: 0  1  4  4  5-1 6  6  7  7  7</span><br><span class="line">Index: 0  1  2  3  4   5  6</span><br><span class="line">Data:  -  1  -  -  *4  -  -</span><br><span class="line">// [1, 4, -&gt;1, 2, 7, 5, 2]</span><br><span class="line">Index: 0  1   2  3  4  5  6</span><br><span class="line">Count: 0  1-1 4  4  4  6  6  7  7  7    </span><br><span class="line">Data:  *1 1   -  -  4  -  -</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计数排序，a 是数组，n 是数组大小。假设数组中存储的都是非负整数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countingSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找数组中数据的范围 </span></span><br><span class="line">  <span class="keyword">int</span> max = a[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 遍历数组的所有的元素，找到最大的元素 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">     <span class="comment">// 若后面的元素大于指定的数组元素，则把元素进行交换 </span></span><br><span class="line">     <span class="keyword">if</span> (max &lt; a[i]) max = a[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 申请一个计数数组 c，下标大小 [0,max]</span></span><br><span class="line">  <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>]; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= max; ++i) &#123;</span><br><span class="line">    c[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算每个元素的个数，放入 c 中 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    c[a[i]]++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 依次累加 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max; ++i) &#123;</span><br><span class="line">    c[i] = c[i-<span class="number">1</span>] + c[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 临时数组 r，存储排序之后的结果 </span></span><br><span class="line">  <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">  <span class="comment">// 计算排序的关键步骤，有点难理解 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">int</span> index = c[a[i]]-<span class="number">1</span>;</span><br><span class="line">    r[index] = a[i];</span><br><span class="line">    c[a[i]]--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将结果拷贝给 a 数组 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    a[i] = r[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Radix-Sort"><a href="#Radix-Sort" class="headerlink" title="Radix Sort"></a>Radix Sort</h3><ul><li><p><img src="http://7xqccv.com1.z0.glb.clouddn.com//18-6-21/95335203.jpg" alt="Radix Sort"></p></li><li><p>Analysis</p><ul><li> 基数排序对要排序的数据是有要求的，需要可以分割出独立的 “位” 来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。</li><li> 除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O (n) 了。</li></ul></li><li><p>Case</p><ul><li>Question<ul><li> 如何根据年龄给 100 万用户排序？(Like sorting 1 million phone number)</li></ul></li><li>Answer<ul><li>Make it all the username or uid the same length<ul><li>(ban, candy, john, …) =&gt; (ban00, candy, john0) </li><li>‘0’ &lt; any letter in ASCII value</li></ul></li><li>Radix sort (Assume the size of username or uid is smaller than 20)<ul><li>Time complexity is similar to O(n)</li></ul></li></ul></li></ul></li></ul><h3 id="Timsort"><a href="#Timsort" class="headerlink" title="Timsort"></a>Timsort</h3><blockquote><p>Timsort is a <strong>hybrid stable sorting algorithm</strong>, derived from <strong>merge sort</strong> and <strong>insertion sort</strong>, designed to perform well on many kinds of real-world data.</p></blockquote><ul><li>Using neat merge method<ol><li> 找出左分区最后一个元素 (最大) 及在右分区的位置 </li><li> 找出右分区第一个元素 (最小) 及在左分区的位置 </li><li> 仅对这两个位置之间的元素进行合并，之外的元素本身就是有序的 </li></ol></li></ul><h3 id="Heap-sort"><a href="#Heap-sort" class="headerlink" title="Heap sort"></a>Heap sort</h3><blockquote><p>See data structure “heap”</p></blockquote><hr><h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><ul><li><p>Choose the sorting algo according to the data size</p><ul><li>When the element is less than <strong>5</strong>, it will sorted by <strong>insertion sort</strong><ul><li>When O(nlogn) is actually calculated as $f(n) = knlogn + c$, it may bigger than $f(n) = n ^ 2$</li><li>Like $n = 100$, $k = 1000$, $c = 200$</li><li>So for a small size of data, algorithm with <code>O(n^2)</code> maybe a better choice</li></ul></li><li>When the capacity is small, like <strong>1k, 2k</strong>, … we can choose <strong>merge sort</strong></li></ul></li><li><p>Case</p><ul><li>Java 1.8<ul><li>[0, 47]: <strong>Selection sort</strong></li><li>[47, 286]: <strong>Quick sort</strong> (Dual Pivot Quick Sort)</li><li>[286, …]: <strong>Timsort</strong> (merge sort)</li><li>For some basic type like <code>byte, char, short</code>: <strong>Counting sort</strong></li></ul></li><li>Google v8 quick sort<ul><li>[10, 1000]: choose <code>arr[mid]</code> as pivot</li><li>[1000, …]: Pick an elements from every 200 elements and choose the median as pivot.</li><li>Split in 3 part: <code>[&lt;pivot], [=pivot], [&gt;pivot]</code></li></ul></li><li>Glibc qsort()<ul><li>[0, 4]: <strong>Insertion sort</strong></li><li>Small size: <strong>Merge sort</strong></li><li>Large size: <strong>Quick sort</strong></li><li>Implement a stack on heap in case of stack overflow</li></ul></li></ul></li></ul><hr><h2 id="Other-case"><a href="#Other-case" class="headerlink" title="Other case"></a>Other case</h2><ul><li>Case 1<ul><li>Question<ul><li> 现在你有 10 个接口访问日志文件，每个日志文件大小约 300MB，每个文件里的日志都是按照时间戳从小到大排序的。你希望将这 10 个较小的日志文件，合并为 1 个日志文件，合并之后的日志仍然按照时间戳从小到大排列。如果处理上述排序任务的机器内存只有 1GB，你有什么好的解决思路，能 “快速” 地将这 10 个日志文件合并吗？</li></ul></li><li>Answer<ul><li> 维持一个按时间戳排序的 Min Heap。</li><li> 依次读取日志文件并放入 Min Heap 中。</li><li> 同时从 Min Heap 取出最早的日志存到合并文件中。</li></ul></li></ul></li></ul><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://time.geekbang.org/column/intro/126" rel="external nofollow noopener noreferrer" target="_blank"> 数据结构与算法之美 11-14</a></li><li><a href="https://mp.weixin.qq.com/s/pgPfAYbD-itnCeMTSXHueQ" rel="external nofollow noopener noreferrer" target="_blank"> 排序算法 </a></li><li><a href="https://www.youtube.com/watch?v=7zuGmKfUt7s&amp;feature=youtu.be" rel="external nofollow noopener noreferrer" target="_blank">Counting Sort | GeeksforGeeks - YouTube</a></li></ul><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/b59a5e11/">https://blog.zsliang.me/posts/b59a5e11/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorting Algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Sorting Algo&lt;/th&gt;
&lt;
      
    
    </summary>
    
      <category term="Algo" scheme="https://blog.zsliang.me/categories/Algo/"/>
    
    
      <category term="Algo" scheme="https://blog.zsliang.me/tags/Algo/"/>
    
      <category term="Sorting" scheme="https://blog.zsliang.me/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Mining XMR</title>
    <link href="https://blog.zsliang.me/posts/b8827cf7/"/>
    <id>https://blog.zsliang.me/posts/b8827cf7/</id>
    <published>2018-06-20T04:00:00.000Z</published>
    <updated>2019-04-20T00:37:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><blockquote><p><strong>Mining XMR</strong></p></blockquote><h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><ul><li><p>Ubuntu</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install libmicrohttpd-dev libssl-dev cmake build-essential libhwloc-dev</span><br></pre></td></tr></table></figure></li><li><p>CentOS</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install centos-release-scl epel-release</span><br><span class="line">sudo yum -y install cmake3 devtoolset-4-gcc* hwloc-devel libmicrohttpd-devel openssl-devel make</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-4 bash</span><br></pre></td></tr></table></figure></li><li><p>MacOS</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install hwloc libmicrohttpd gcc openssl cmake</span><br><span class="line"><span class="comment"># For NVIDIA GPUs</span></span><br><span class="line">brew cask install nvidia-cuda</span><br></pre></td></tr></table></figure></li></ul><h2 id="Download-xmr-stak"><a href="#Download-xmr-stak" class="headerlink" title="Download xmr-stak"></a>Download xmr-stak</h2><ul><li><p>Find the latest releases and precompiled binaries on GitHub under <a href="https://github.com/fireice-uk/xmr-stak/releases" rel="external nofollow noopener noreferrer" target="_blank">release</a></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fireice-uk/xmr-stak/archive/2.4.5.tar.gz</span><br></pre></td></tr></table></figure></li></ul><h2 id="Edit-the-default-donation"><a href="#Edit-the-default-donation" class="headerlink" title="Edit the default donation"></a>Edit the default donation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi ./xmrstak/donate-level.hpp</span><br><span class="line"><span class="comment"># Default: 2.0 / 100.0 = 2%</span></span><br><span class="line">constexpr double fDevDonationLevel = yourDonatedRate / 100.0;</span><br></pre></td></tr></table></figure><h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><blockquote><p>More details on official repo’s <a href="https://github.com/fireice-uk/xmr-stak/tree/master/doc" rel="external nofollow noopener noreferrer" target="_blank">doc</a></p></blockquote><ul><li><p>Ubuntu</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/fireice-uk/xmr-stak.git</span><br><span class="line">mkdir xmr-stak/build</span><br><span class="line"><span class="built_in">cd</span> xmr-stak/build</span><br><span class="line">cmake ..</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>CentOS</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/fireice-uk/xmr-stak.git</span><br><span class="line">mkdir xmr-stak/build</span><br><span class="line"><span class="built_in">cd</span> xmr-stak/build</span><br><span class="line">cmake3 ..</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>MacOS</p><ul><li><p>CMake options</p><ul><li>For NVIDIA GPUs: <code>-DOpenCL_ENABLE=OFF</code></li><li>For AMD GPUs: <code>-DCUDA_ENABLE=OFF -DOpenCL_ENABLE=ON</code></li><li>For CPU-only: <code>-DCUDA_ENABLE=OFF -DOpenCL_ENABLE=OFF</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake . -DOPENSSL_ROOT_DIR=/usr/<span class="built_in">local</span>/opt/openssl &lt;options&gt;</span><br><span class="line">cmake . -DOPENSSL_ROOT_DIR=/usr/<span class="built_in">local</span>/opt/openssl -DCUDA_ENABLE=OFF -DOpenCL_ENABLE=ON</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Start-the-miner"><a href="#Start-the-miner" class="headerlink" title="Start the miner"></a>Start the miner</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./xmr-stak</span><br><span class="line">./xmr-stak</span><br></pre></td></tr></table></figure><h2 id="Mining-pool"><a href="#Mining-pool" class="headerlink" title="Mining pool"></a>Mining pool</h2><blockquote><p><a href="https://www.minexmr.com/" rel="external nofollow noopener noreferrer" target="_blank">mineXMR</a></p></blockquote><ul><li><p>Connection</p><ul><li><p>Choose server</p><ul><li>Ping each connection to choose the fastest server</li><li>Canada <code>ca.minexmr.com</code> is the fastest server in my test</li></ul></li><li><p>Mining ports</p><ul><li><code>4444</code>, <code>5555</code> for <code>Low range CPU/GPU</code> with starting difficulty <code>15000</code> </li><li><code>7777</code>, <code>80</code> &amp; <code>443</code> for <code>Mid range CPU/GPU</code> with starting difficulty <code>35000</code></li><li><code>6666</code> for <code>SSL port</code> with starting difficulty <code>35000</code></li><li><code>3333</code> for <code>Modern High End</code> with starting difficulty <code>1000000</code></li></ul></li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/fireice-uk/xmr-stak" rel="external nofollow noopener noreferrer" target="_blank">XMR-Stak</a></li></ul><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/b8827cf7/">https://blog.zsliang.me/posts/b8827cf7/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mining XMR&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Dependencies&quot;&gt;&lt;a href=&quot;#Dependencies&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Cryptocurrency" scheme="https://blog.zsliang.me/categories/Cryptocurrency/"/>
    
    
      <category term="XMR" scheme="https://blog.zsliang.me/tags/XMR/"/>
    
      <category term="Mining" scheme="https://blog.zsliang.me/tags/Mining/"/>
    
  </entry>
  
  <entry>
    <title>设计思考</title>
    <link href="https://blog.zsliang.me/posts/f9f2d97/"/>
    <id>https://blog.zsliang.me/posts/f9f2d97/</id>
    <published>2016-01-22T05:00:00.000Z</published>
    <updated>2019-04-20T00:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><blockquote><p>设计思考</p></blockquote><ul><li>[英] Nigel Cross | 山东画报出版社</li><li>Summarized by Zachary </li><li>Completed on Jun. 22, 2016</li></ul><blockquote><p>目录有所调整</p></blockquote><hr><h2 id="一、设计能力"><a href="# 一、设计能力" class="headerlink" title="一、设计能力"></a>一、设计能力</h2><blockquote><p>我们的工作并不是给予客户他想要的，而是及时并竭尽所能地给予客户他从未想象过的东西，而当客户得到它之后，他会认识到这就是他一直想要的东西。——Denys Lasdun，建筑师</p></blockquote><ul><li>设计并不是寻找对已知特定问题的最优解决方案，而是一个探险性的过程。     </li></ul><h3 id="询问设计师他们在做什么"><a href="# 询问设计师他们在做什么" class="headerlink" title="询问设计师他们在做什么"></a>询问设计师他们在做什么</h3><ul><li><p><strong>诱导性推理</strong>     </p><p>  设计师相信他们的 <strong>“直觉”式的反应</strong>，源于<strong> 大量累积的经验</strong>，代表了设计思考中真正发生的一个过程。              </p><p>  <strong>诱导性推理 </strong> 是一种必要的 <strong> 设计逻辑 </strong>，<strong> 不同于 </strong> 我们熟悉的 <strong> 归纳推论 </strong> 和<strong>演绎推论 </strong> 的方法类型。      </p></li><li><p><strong>设计问题和解决方案两者紧密交织</strong>     </p><p>  “设计师的方案不会去想设计问题的最直接的解决方案，但一定程度上很好地解决问题，却是完全从其他角度和观点看待的。”——Geoffrey Harcourt，家具设计师     </p><p>  设计师需要运用草图、绘画、模型制作等方式，为思考的不确定性提供一个暂时的、外部的储存空间，支撑了设计师与 <strong> 设计问题及解决方案之间的“对话”</strong>。   </p><p>  这些方式既带有评判性质，也具有探险发现性，同时并 <strong> 不是出于表现设计结果的目的，而是出于去理解问题的目的</strong>。    </p></li><li><p><strong>善于处理设计中的未知性和不确定性</strong>    </p><ol><li><p><strong>思考平行线 </strong><br> 设计问题找到单独的解决方案前，设计过程中应同时<strong> 保持不同层面的思考</strong>，并视为同等重要的部分，然后选择合适的时机将正在发展中、所有的创意或思考线调和到一起，避免过早丧失未成形的创意或过晚使调和过于僵硬死板。        </p></li><li><p><strong>施加秩序 </strong><br> 面对模糊不清的问题，使用个人的指导原则作为出发点，帮助掌控问题并提供重点的方向指导，区别在于<strong> 如何缩小解决方案的范围</strong>，通常在设计过程的初期阶段。</p><p>设计师对各种实验和可能性方案采取 <strong> 开放性的态度 </strong>，对内、外部环境的<strong> 细微差别非常敏感 </strong>，时刻准备并关注着设计过程发展中的一些<strong> 特别的事件</strong>，从而成功地、有建设性地处理设计过程中的不确定性，并处理设计过程中产生的风险和机会的关系。        </p><p>“只有当你尝试并拟定出一个解决计划的时候，问题才会出现。因此在某种程度上设计过程决定了设计目标，这通常在设计简报中不曾提及。” ——Richard MacCormac，建筑师    </p></li></ol></li></ul><blockquote><p><strong>设计的解决方案不会直接从问题本身的呈述而来，设计师必须自己创造新东西。</strong>     </p></blockquote><h3 id="解构设计师的设计行为"><a href="# 解构设计师的设计行为" class="headerlink" title="解构设计师的设计行为"></a>解构设计师的设计行为 </h3><p> 设计构思一般并不是完全从头脑蹦出，而是在画草图过程，思考问题并受到其他事物影响，从而形成设计方案的潜在源泉，并结合其他想象的驱使的过程。        </p><p>设计师在完善设计理念的过程中，可通过平常物，或回忆相关事物来帮助自己找到与设计任务有联系的，可用的，并吸引人的造型和设计概念。     </p><h3 id="观察设计师正在做什么"><a href="# 观察设计师正在做什么" class="headerlink" title="观察设计师正在做什么"></a>观察设计师正在做什么</h3><ul><li><p><strong>不同参与者之间互动和协调的社交过程</strong></p><p>  大型项目中，设计师需要将技术、经济、社会、审美等不同层面的设计需求整合并协调好，这意味着，设计并 <strong> 不仅仅是个人的认知进程 </strong>，而是一个<strong> 共享的、社会性的进程</strong>。            </p><p>  “设计的过程就是在有着不同利益的层面之间达成共识的过程。设计的社会性质会导致参与者必须承认设计的未知性，给参与者足够的空间调动客观世界的独立性，在和其他人 <strong> 沟通过程中有着重要意义</strong>。”——Larry Bucciarelli       </p></li><li><p><strong>设计工作室的公开性和共享性</strong>     </p><p>  设计项目简报应放工作室内，工作进程也应处于醒目的位置，草图等资料也应共享，<strong>使设计成为开放的状态</strong>，便于让他人知晓，也可接受他人对于设计的评论与看法。      </p></li><li><p><strong>连环行动、行为反思</strong>      </p><blockquote><p>设计师在一个有着相互关联的连环行动（<strong>行动、反思、决定、进一步行动 </strong>）的复杂网络中进行设计。<br> 连环行动 (moving-seeing-moving)，即进行一个“如果”行动，看看结构（草图上），自习考虑其带来的影响（好 / 坏），然后制定其他的方案，再进行类似的行动。<br>行为反思 (reflection-in-action)，同时使用言语表达和草图把自己的认知过程清晰地呈现出来，谈话（思考）和画草图需要同时进行，把通常为安静、内在的认知过程变成“有声思考”的研究方式。        </p></blockquote><p>  “有竞争力的设计师实际掌握的知识通常都会比他们所能描述出来的更多。他们会展示出一种在实践中的知识与能力，很多是隐性的才能。”——Donald Schon        </p><p>  设计过程是一种“不同状态下进行反思性谈话”的方式中进行，是一种基于构造问题和探索其“进行发展中”的隐含意义的互动过程，从而研究出解决方案的可能性。       </p></li></ul><h3 id="思考设计师是如何做的"><a href="# 思考设计师是如何做的" class="headerlink" title="思考设计师是如何做的"></a>思考设计师是如何做的</h3><ul><li><p><strong>诱导性推理是设计学科的逻辑</strong>     </p><p>  设计的推理不同于归纳与演绎的推理形式。     </p><p>  “逻辑关注于抽象的形式，科学研究的现存的形式，设计创造的是新型形式。”——Lionel March       </p><p>  设计方案不会直接从问题中得到，只能与问题想匹配，设计师更乐于创造一个符合要求的提案，提供一个合适的解决方案。      </p><p>  “思考只会在有限定的层面上作用于整个认知系统。整个系统包含了思考、行为和世界，或一个物质世界环境下思考与行动的统一。设计师工作的本能方式包括了应对不同环境下做出暂时设计解决方案的广泛系统。”——Henrik Gedenryd   </p></li></ul><h3 id="设计的天生智慧"><a href="# 设计的天生智慧" class="headerlink" title="设计的天生智慧"></a>设计的天生智慧</h3><blockquote><p>设计能力中展现出的对内在、天生智慧不断增长的尊重。对早期对设计过程以更理性化和系统化的方式加以重塑的尝试，以及将一种秩序强加在设计思考上的强烈欲望，都是对天生设计能力的不尊重的表现。              </p></blockquote><hr><h2 id="二、设计师如何思考"><a href="# 二、设计师如何思考" class="headerlink" title="二、设计师如何思考"></a>二、设计师如何思考 </h2><h3 id="动机与和态度"><a href="# 动机与和态度" class="headerlink" title="动机与和态度"></a> 动机与和态度</h3><p>“每次回到设计的最初原点，将已存在的所有方案都推翻。”——戈登·穆雷<br>“首要基本原则”的工作方法。</p><p>“任何一个团队取得成功的关键在于其混合交叉的资源性——毫无疑问智力资源是非常重要的一部分，但一个团队中不可避免的就是，领导者的身体和行为会成为其他团队成员的榜样。”——肯尼斯·格兰奇 <br>“设计师的工作就是创造意料之外的东西。”——肯尼斯·格兰奇<br>“成功在于发现设计说明中的漏洞以及隐藏于其中的意外收获。”——肯尼斯·格兰奇<br> 拥有强烈的个人驱动力。 </p><h3 id="其他优秀的设计师"><a href="# 其他优秀的设计师" class="headerlink" title="其他优秀的设计师"></a>其他优秀的设计师 </h3><p> 需要在某些时间段内保持高强度的设计活动，但是会有一些远离常规工作环境的、进行更多反思的时间穿插其间。      </p><p>有着专注的强烈目的感特征，并与小型的、有强烈动机的工作团队成员共享这一特征。<br>精准专注于一个设计问题并将其作为接近“首要原则”的途径。<br>集中于某一主要目标并且从“首要原则”开始进行设计。   </p><p>运用草图作为“有声思考”或者“自我对话”的一种方式。<br>将回执草图作为批判和发现新想法的一个过程。<br>不仅把绘制草图作为一种将脑海中的认知图像进行外化表现的方式，而是作为一种积极的“通过草图来思考”和回应，然后对设计层层深入，进行剖析，从而将其都显现在草图上的方法。      </p><p>对自己的工作有着强烈的个人动机，并对个字的领域有较深入的专业知识以及了解相关领域的最新发展情况，出于个人爱好常常导致将技术从一个领域过渡到另外一个领域的洞察力。        </p><p>不会被失败所阻止，反而他们可以从失败中学习，他们有“创新的勇气”。      </p><p>灵感乍现（经过一段时期的思考和准备）是创意设计思考中的一个常见的因素。     </p><h3 id="共同特征"><a href="# 共同特征" class="headerlink" title="共同特征"></a>共同特征 </h3><p> 对他们选择的领域有着强烈的人情，基于从青年时代就存在的个人动机与驱动力。        </p><p>有着个人勇气去承担一些可能性的风险，尽管会面对巨大的失败结果，但是他们并不害怕，也会饱含激情地去寻找避免失败的方法。      </p><p>定义并构造待解决的设计问题，并非一直都是“被给予的设计简报中的问题”。设计目标定位在比较高的层次，通常有着清晰的目的。对于被压缩在目标中的设计问题会有一个整体及系统的看法，对于如何来达到这个目标会有一个清楚的设计概念。（清晰的设计概念并不能简单地在设计简报提出的问题中找到，绝大部分是设计师自己创造的，并不是对资料中现存模式的认识，而是去创造一种能重新调整问题并能暗示设计解决方案方向的新模式。）          </p><p>高强度的工作用来创造、评估并精炼设计解决方案的细节，同时伴随一些轻松和反思的时期。这并不是个人特性的一种反映，而是创新性工作的一个必要层面，需要用放松的状态对紧张的工作进行调节。       </p><p>创新型设计师绝大部分的工作方式并不是系统化的，他们的设计方法是战略性的而非策略性的，其中一个重要特征是平行式工作——让设计活动在多个层面同时进行。   </p><h3 id="设计战略"><a href="# 设计战略" class="headerlink" title="设计战略"></a><strong>设计战略</strong></h3><blockquote><p>三个战略性因素：            </p><ol><li><strong>系统式研究方法</strong>        </li><li><strong>构建设计问题</strong>     </li><li><strong>首要基本原则</strong>     </li></ol></blockquote><ol><li><p>对于设计问题采取广泛的“<strong>系统式研究方法</strong>”，而不是接受对设计问题的狭义定义。        </p><p> 创新型设计师会采取“系统性的方法”。      </p><p> 创新者有着系统的思考，会从不同事物间的相互关系来看待问题，并以此产生出一个结果，一种新的、在某种程度上可以改变世界的新型格式塔理论。      </p><p> 通常以用户的角度来思考，并在产品设计过程中考虑用户的全部需求。     </p></li><li><p>“<strong>构建 </strong>”与众不同的，有时候甚至非常个人化的<strong> 设计问题</strong>。             </p><p> 为了在某种程度上形成或构建能够激励设计概念产生的问题，设计师会从独特的视角来探索问题。<br> 一些案例中，他们在大部分的设计中的视角是个人化的。       </p><p> 他们的问题构造是由特殊设计状况的要求而引起的，但是也会受到个人主观动机的强烈影响。       </p></li><li><p>设计应从“<strong>首要基本原则</strong>”开始。            </p><p> 设计师在构建设计理念和完善设计概念细节时，都会明确或含蓄地依赖于“首要原则”。     </p></li></ol><ul><li><p><strong>冲突刺激创新</strong></p><p>  最后，从例子似乎看出，创新型设计产生的很大可能性是源于设计师高层次的问题目标和客户对解决方案是否可接受的标准之间冲突的解决。</p><p>  创造力通常需要解决冲突的情况下得到激发，很多成功的设计师意识到这一点，并寻找形成这种冲突的刺激。        </p></li><li><p>创新型设计师所运用的 <strong> 设计战略模式</strong>      </p><p>  <img src="http://7xqccv.com1.z0.glb.clouddn.com/16-4-17/89051420.jpg" alt="设计战略模式"></p><p>  在上部，设计师寻找最高目标以及客户设定的基本标准中存在着系统层次上的冲突或潜在冲突。<br>  在中间层次，设计师以个人的方式构架设计问题，并通过与设计构架的匹配和满足其标准来发展完善其设计方案。      </p><p>  为了定义和利用好物理学的首要原则，设计师会将问题的构造放在一个较低的层次，工程学和设计起到了帮助问题构造和解决方案之间的桥梁作用。       </p><p>  最底层，是已建立的、明确的首要原则的知识，也许涵盖了特定的和更加常规的科学概念。中间层次是可被设计师运用的战略性知识，当其处于特殊问题和特殊背景、策略以及个人化和特殊化的环境下，其知识更容易多变。在更高的层次存在着相对稳定的混合，但是通常也有设计师的隐性目标、暂时性的问题目标，以及由客户或其他主导权威机构认定的固定的、清晰的解决方案标准。              </p></li></ul><hr><h2 id="三、设计协作"><a href="# 三、设计协作" class="headerlink" title="三、设计协作"></a>三、设计协作</h2><ul><li><p>团队协作 VS 个人工作      </p><p>  解释并重塑设计中的问题是平常而又必不可少的一项任务。设计问题的本质是分析并理解其作为整个设计过程中的重要影响部分。<strong>个体设计师可以建立他们自己理解问题的模式，但是团队成员必须对问题的理解达成共识。</strong>   </p><p>  团队工作一大弊端是，成员间的不同意见可能会导致分歧现象，因此，团队工作中需要不断的甄别，避免或解决产生的分歧。     </p></li><li><p>角色和关系         </p><p>  任何团队协作活动中，角色行为的差异性是不可避免的，这主要取决于个性、经验和当时的工作任务，团队成员应该对互相的偏好比较敏感。  </p></li><li><p>计划和更改活动       </p><blockquote><p><strong>团队应准备设计活动的计划表</strong></p></blockquote><ol><li>量化问题</li><li>产生设计概念</li><li>精炼设计概念</li><li>选择一个可行的设计概念</li><li>着手设计</li><li><p>方案呈述报告</p><p>里程碑完成、进程的阶段性变化的时候，需要对内容进行检查，一旦条件具备，让全体成员明确进入下一阶段。     </p></li></ol></li><li><p>收集和分享信息       </p><blockquote><p><strong>团队需要形成对信息收集的具体工作安排和方法</strong> </p></blockquote><p>  不仅像其他设计任务一样，需要收集相关重要的有效信息，还要从信息源中提取有用信息，再与团队共享。     </p><p>  在这方面，团队差异是比较大的，有的团队很大程度上依靠团队成员对问题的个人经验和知识。      </p><p>  即使当信息在共享的情况下，错误解读和误解仍然不可避免，因此 <strong> 团队更加需要形成对信息收集的具体工作安排和方法</strong>。      </p></li><li><p>设计概念的产生和采纳        </p><p>  团队一起创造设计理念是必要的，再将这些设计理念整合到一个特定的设计方案中。首先需要建立设计方案，然后再就其细节进行慢慢完善。团队成员需要检查每个清单和方案，删除不理想的概念，确定一个满意的方案。     </p><p>  产品具体设计创意一般经过提出、接受、修改、发展和调整。</p><p>  在合作建立和完善设计概念中，团队成员也发现有必要游说其他组员去接受他们的自己的创意和偏好（这些概念通常是他们自己提出的）。</p><p>  设计师对自己的设计概念会比较主观和情绪化，这是非常正常的事，他们的设计概念不仅仅只是抽象的想法，而是个人对于重要认知努力观察的结果。毫无疑问，概念上的“雏形”会相互竞争，这种情感化现象在团队中应该得到承认和允许，否则设计创意不可能出现。同样团队成员应辨别出该概念的成熟程度，帮助创新的进程。            </p></li><li><p>避免和解决分歧       </p><blockquote><p>要警惕那些 <strong> 延期的同意 / 无公开的同意</strong></p></blockquote><p>  团队中，成员间有不同的看法是不可避免的，然而设计任务是在协作的基础上总结出一致性的结论，所以必须找到解决问题的方法或尽量避免分歧的方法。    </p><p>  一般团队成员会默许无明显意见的“同意”，直到有成员发现了其创意的弊端，或者是延迟了对于其创意的肯定。这些 <strong> 延期的同意 </strong> 或<strong>无公开的同意 </strong> 反映了人际间讨论和日常交际的方方面面。     </p><p>  当团队成员接近共识，当他们延迟公开同意某方案的时候必须要注意。尽管有时候并没有公开的否定意见，每个人仍可能保留不同的观点，并当机会来到时，他们会回到问题的原点上。</p></li><li><p>讨论        </p><p>  团队工作是社交过程，因而不能忽视团队设计活动中表现出的交互、角色和成员间的相互关系。      </p><p>  共享的白板、画纸工具被用于团队成员间绘画和列清单的活动，这种共享表现性似乎是设计活动中最基本的合作方法。        </p></li></ul><hr><h2 id="四、设计师如何工作"><a href="# 四、设计师如何工作" class="headerlink" title="四、设计师如何工作"></a>四、设计师如何工作</h2><blockquote><p>“有声思考”会产生一定的局限性，非语言思考是设计思考的本质特征。</p></blockquote><ul><li><p>合作      </p><p>  设计师应有技巧地唤起组员对中立方面的支持，比如达成共识、更高原则或理论，以及用专业或实践标准来支持他们的观点。这样可以为辩论提供有力的信息，并能游说他人和理性化解释自己的观点。</p><p>  一个设计团队中有着推动性影响力的成员取决于他或她与其他人交互，以及如何使共享观念相互联系起来的方法。</p><p>  运用“积累话语”，形成共享信息，不仅仅意味简单的总结，还包括作出建设性的贡献，重点在于提出的解决方案和指明的前进方向。这种方式称为<strong>“源于团队共享的语言表述，从而架构设计理念。”</strong></p><p>  越成功的团队越重视他们的交谈方式。一个成功团队的谈话讨论展示“连贯一致性”的发展过程，该过程，每位成员都会各自作出对团队的贡献，并推动一个连贯性的交谈形式。</p><p>  这种连贯性的“谈话”以命名和构造为起点。为了解决涉及问题，设计师必须构造一个相关问题的设计背景：设置它的界限，选择引人注意的一些特定事物和关系，并将连贯性置入特定状态下以引导下一步的发展。</p><p>  设计师挑选问题范围的特征，他们选择参与（命名），并定义他们选择将要探索（构架）的解决方案的范围领域。同时必须要平衡命名和架构这两种实践活动。</p></li><li><p>设计过程      </p><p>  <strong>设计流程模型：量化问题、产生设计理念、完善设计理念、选择一个设计理念、设计、表现 / 陈述。</strong></p><p>  其他：<strong>阐明任务、寻找设计理念、确定设计理念。</strong>其中寻找设计理念在团队设计活动中处于主要地位。</p><p>  “分类任务”会在各环节不断被循环使用。另外“构造问题”约耗费 30% 的时间，并集中在开端，但会不断的重复，直到结束。Dorst 和 Gross 将其定义为完善设计过程中的“共同进化”（co-evolution）。</p><p>  设计师通常会以结构性的计划作为他们设计过程的开端。他们对自己的设计活动有明确的层次计划，但会用一种机会主义的方式来使用它。只有当从认知成本的角度是获益的时候，才会按计划进行，若有更多经济的认知行为出现，便有可能放弃先前的计划。Raymonde Guindon 同样强调设计活动中的“机会主义”本质。</p></li><li><p>创新性设计     </p><p>  设计创意的产生不能被限制于特定的空间或系统的设计方法顺序之中。设计创意只有在连贯的设计对话中才会出现，观念的形成不能只在规定的时间约束下产生，也不能被预期的过程计划和恰当的设计先后次序阶段所支配。</p><p>  主要是对问题的具体构架的创意坚持使得对潜在的、激进的创新解决方案的丢弃。</p><p>  创新性设计并不是灵感的突然闪现，而是对适当提案的规划和总结。一旦提案被确定，就被视为一个可探索、可再构造的恰当方案。它创造了设计需求和有潜力的新产品设计结构间的解决方法。</p><p>  在创新设计中，突然出现的启迪更多是在问题空间和解决方案空间之间建立一个“创新型桥梁”，而不仅仅是从一个创意到另一个创意的“创新式飞跃”。</p><p>  Omer Akin 和 Chengtah Lin 定义的 NDDs 新奇的设计决策：非常规的决定“被证明是整个设计过程中的关键。”<br>  三个特征：NDDs 可以解决设计问题或瓶颈，它不会随之前的设计设想，作为整个设计活动的一个重要特征。<br>  他们还将设计活动分 3 类：<strong>检查（阅读调查相关信息）、思考以及绘图。</strong><br>  当想到新奇的设计方案时，这三种活动模式以快速的形式进行轮流接替转换。每当 NNDs 时刻，设计师都会表现出果断的判断力，他们参与的层次提升了，工作的注意力范围在问题和解决方法的不同方面有很大的跨越。<br>  更易成功的人，在创新创造性设计概念方面，是在那些能够展示其在活动模式中可进行快速转换的人。仅仅简单地在活动类型之间进行快速转换并不是帮助设计师走向创新设计的必然途径，而在创新工作方面，也与高效率的注意力和衔接有紧密联系。</p></li></ul><hr><h2 id="五、设计技能"><a href="# 五、设计技能" class="headerlink" title="五、设计技能"></a>五、设计技能</h2><blockquote><p>Herbert Simon 将设计师的创造活动与蚂蚁联系一起，蚂蚁的视线范围虽小，但它以一种方法绕过或越过障碍物，以一个局外观察者的特征，更有全局的视野，以一种与会的线路间接达到方案目标。<br>蚂蚁（或问题解决者）行为的显著复杂性在很大程度上映射了周边环境（或问题状况）的复杂性，然后控制其行为的潜意识认知过程可能相对比较简单。<br>从这个观点来看，<strong>理解设计并不仅仅是理解设计问题，更重要的是理解设计思考。</strong><br>另外，<strong>设计中并没有一个已经明确知晓的设计目标，设计师会在创造解决概念时创造这个目标。</strong></p></blockquote><ul><li><p>设计智慧      </p><p>  心理学家 Howard Gardner 将智慧分为六种形式：语言智慧、逻辑 - 数学智慧、立体空间智慧、音乐智慧、身体触觉型智慧、个人智慧。      </p><p>  优秀的设计师有的思考方式：<br>  包括了在不同细节层次之间进行缝合链接，从高层次的系统目标到低层次的基本原则。<br>  他们不仅仅去解决“被给予的问题”，还会在更广阔的内容和想象力，以及适当的解决方案来解决问题冲突和不确定性。<br>  他们有建构问题、收集和构架问题数据的认知技能，以及从暗示解决问题方法的数据和可能性解决方法的概念上创造相连贯的模式的技能。</p><p>  设计智慧包含了 <strong> 问题与解决方案表达之间的一个强烈的、反思性的交互以及在具象表达和抽象思考之间、行为和思考之间便宜和迅速的一种转换能力。</strong>优秀的设计师在个人设计工作和团队协作上都会用到 <strong> 建构性思考</strong>。</p><p>  大脑受损对设计师在问题解决行为方式与控制主体行方式有以下区别：</p><ol><li>不能在构建问题和解决问题之间进行转换。</li><li>时间过去大半，初级设计阶段仍未完成。</li><li>初期设计阶段所占比例非常小且不稳定，由多个独立片段组成。</li><li>这些片段并无进展或在后期可以进展的趋势。</li><li>初期设计阶段和后期阶段都没有继续发展的抽象信息。</li><li>并未进入细节设计阶段。</li></ol></li><li><p>专业技能的发展       </p><blockquote><p>教育不仅是发展知识的过程，还是发展思考与行动方法的过程。  </p></blockquote><blockquote><p>获得专业性的一个重要因素被认为是坚持、考虑周全和有向导性的实践活动。        </p></blockquote><p>  一个有能力的问题解决者会以一种完全不同的方式工作。他们会对特别情况下的因素进行选择，有些相关因素会由于其重要性而得到特别的关注。为达到目他们会制定一个计划，在这个层次中问题解决方案报货去寻找机会。这个过程的发展会伴随着实验 - 错误的特征，以及一些学习和反思的特征。专业人士会对特定状况作出直觉性的反应，并会立刻直接采取合适的行动。解决问题和分析问题在这个工作层次上会被明显区分开来。大师级人物会在整体上进入更深层次的专业领域，要求对背景环境有敏锐的洞擦力和对细微线索的开放性态度。</p><p>  从专业技能的一个层次转移到另一层次并不是一个稳定不变的发展，并不是简单地去了解更多的知识以及更迅速且高效率的工作。这种向不同工作方式的转变意味着注意力层面的转移，我们都有学习到技能的体验，而原则成为了一种无意识的行为表现。</p></li><li><p>从学生到专业设计师     </p><p>  “空间构成”和“构建空间”之间的重复是专业设计师设计进程中一个很重要的方面。他们不断地从一个设计空间转移到另一个设计空间进行对设计解决方案的细节性寻找。</p><p>  初学者的行为通常会与“深度优先”的方法相联系，意味着会定义问题，然后马上开始深度上探索解决方案，导致部分的子方案难以和整体的解决方案进行协调。然后，专业人士的设计战略通常被认为是展现出一种以“广度为主”的方法，以广泛的问题探索和同时发展相关的子方案作为开端。</p><p>  初学者运用“尝试和错误”的技巧来产生并实施设计修正与评价，不断重复。而经验丰富的工程师会在执行其暂定方案和作出最后评估之前，都会对其进行初步评估，他们运用以往的经验进行前瞻，并考虑是否值得执行下一步的设计方案。</p><p>  专业设计师的优先设计战略即为自上而下、广度优先的方法，但也会转换到深度优先设计以战略性地针对一些诸如问题复杂性和设计不确定性情况的反应。</p><p>  经验越丰富的设计师会越多地采用“生成式”推理方法，与缺乏经验的设计师所采用的演绎式推理形成鲜明对比。尤其对问题类型有着特殊经验的设计师会倾向于对解决方案进行推测来进行项目设计，而不是通过对问题的分析来进行设计，即根据相关的解决方法来构建或感知设计问题。</p><p>  专业设计师还有一个关键能力，在于他们能够在思考上摆脱曾经的具体案例和已积累的经验，并在他们的专业领域形成更加抽象化的中肯概念。</p><p>  专家被认为比初学者更有效地以更广阔的认知层面来储存和掌握信息，并认识到隐藏着的原则，而不是关注于问题的表面特征。</p><p>  接触专业领域的好的设计作品，需要学习隐藏的纲要或组织原则的观点去裂解和记住他们。好比学习一门语言，这是专注并内化不同层次的理解和成就的问题。</p><p>  与传统的对问题进行清晰定义的解决者行为不同的是，设计师聚焦于解决方式，而不是聚焦于问题方式。成功的、经验丰富的设计师都会对问题的构建具有一定的前瞻性，活跃地表达他们对问题的观点并指明寻找问题解决方案猜测的方向，这在构建问题的过程中通常被定义为设计专业技能的关键特征。</p></li></ul><hr><h2 id="六、实例"><a href="# 六、实例" class="headerlink" title="六、实例"></a>六、实例</h2><h3 id="1- 为成功而设计"><a href="#1- 为成功而设计" class="headerlink" title="1. 为成功而设计"></a>1. 为成功而设计</h3><ul><li><p>Gordon Murray 一级方程式赛车设计师</p><p>  用最初的原则重新考虑问题和身处的情况，强调时刻保持回头检视最基本原则的必要性。<br>  将经验放在“思想的后面而不是最前面”，并且从基本原理开始设计工作。<br>  亦可以改变原有规则为起点的创新。</p><p>  突破性创新是被竞争压力推动，以及在规则的限制里找到重要有利条件而驱动的：基本的创新思考是通过精确的计算而被评估的。</p><p>  并不是所有设计创新都是成功。</p></li></ul><h3 id="2- 为舒适而设计"><a href="#2- 为舒适而设计" class="headerlink" title="2. 为舒适而设计"></a>2. 为舒适而设计</h3><ul><li><p>Kenneth Grange 跨领域设计师</p><p>  设计不仅仅运用基于产品造型或重塑产品造型的设计方法，更源于对产品目的、功能以及使用的根本性再评估。</p><p>  从功能性角度展开设计，创新性的“样式 / 造型”以及新产品的特征应考虑对产品日常使用方式的考量和对反馈的分析。</p><p>  产品应基于功能性和实用性而产生样式和造型设计。</p></li></ul><h3 id="3- 为使用而设计"><a href="#3- 为使用而设计" class="headerlink" title="3. 为使用而设计"></a>3. 为使用而设计</h3><ul><li><p>Victor Scheinman 美国机械电子工程设计师</p><p>  他的创造性策略，包含了将概述问题氛围不同层次来解决：对特定环境下的特殊需求产品形成一个广泛的、系统的分析视角；并以此为出发点，形成一个特别的角度或问题框架作为解决方法的指导原则；并使用这个原则来界定相关具体化工程设计的首要目标；最后还要谨记去满足客户意图制造出一个成功消费品的目标。</p><p>  用问题架构来确定基本设计原则，并以此激发设计理念的形成并帮助细化其设计理念。</p></li></ul><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/f9f2d97/">https://blog.zsliang.me/posts/f9f2d97/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;设计思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[英] Nigel Cross | 山东画报出版社&lt;/li&gt;
&lt;li&gt;Summarized by Zachary &lt;/li&gt;
&lt;li&gt;Complet
      
    
    </summary>
    
      <category term="Books" scheme="https://blog.zsliang.me/categories/Books/"/>
    
    
      <category term="Thought" scheme="https://blog.zsliang.me/tags/Thought/"/>
    
      <category term="Design" scheme="https://blog.zsliang.me/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>七牛云图床</title>
    <link href="https://blog.zsliang.me/posts/966f41d8/"/>
    <id>https://blog.zsliang.me/posts/966f41d8/</id>
    <published>2016-01-01T05:00:00.000Z</published>
    <updated>2019-04-20T00:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>习惯用 Markdown 来做笔记，同时有些内容希望上传到博客分享，但是大部分都不支持外链，一直尝试各种图床，最终得出现在比较稳定的方案。</p></blockquote><h2 id="目前方案"><a href="# 目前方案" class="headerlink" title="目前方案"></a>目前方案</h2><blockquote><p><strong>七牛云 </strong> + <strong> 极简图床</strong>（Chrome 插件）</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/80247-75dc6f1261f0ae9c.jpg?imageMogr2/auto-orient/strip" alt="效果动图"></p><h2 id="选用七牛云的原因"><a href="# 选用七牛云的原因" class="headerlink" title="选用七牛云的原因"></a>选用七牛云的原因</h2><ol><li><p>10G <strong>免费流量</strong>（图片尽量压缩 200k 以内）</p><ul><li>上传前使用 <code>ImageOptim</code> 压缩</li></ul></li><li><p>服务稳定（写作才是核心，就别总折腾图片的事情了）</p><ul><li>国内、外速度都可以接受。</li></ul></li><li><p>便宜（就算付费也相对比较便宜，作为学生党觉得可以接受）</p></li></ol><h2 id="简要步骤"><a href="# 简要步骤" class="headerlink" title="简要步骤"></a>简要步骤</h2><ul><li><p>准备</p><ol><li>注册 <strong> 七牛云 </strong> 账户并添加 <strong> 对象存储 </strong> 空间</li><li>Chrome 浏览器安装 <strong> 极简图床 </strong> 插件</li><li>插件中设置存储空间的 AK、SK、域名等信息即可</li></ol></li><li><p>使用</p><ol><li>准备图片或动图素材</li><li>在插件中拖拽上传素材</li><li>复制 Markdown 链接到文章中</li></ol></li></ul><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><blockquote><p>这种事情，现成方案已经不算低效了。。。<br>更重要的写作的频率并不高，而写文档大多场景也不会有很多图片。<br>还是打住，做更重要的事情吧。</p></blockquote><h2 id="参考链接"><a href="# 参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://cnfeat.com/blog/2015/11/30/cli-qiniu/" rel="external nofollow noopener noreferrer" target="_blank">如何使用七牛云做为图床？</a></li></ul><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/966f41d8/">https://blog.zsliang.me/posts/966f41d8/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;# 背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;习惯用 Markdown 来做笔记，同时有些内容希望上传到博客分享，但是大部
      
    
    </summary>
    
      <category term="Tools" scheme="https://blog.zsliang.me/categories/Tools/"/>
    
    
      <category term="七牛云" scheme="https://blog.zsliang.me/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="图床" scheme="https://blog.zsliang.me/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>GTD and OmniFocus</title>
    <link href="https://blog.zsliang.me/posts/4372d2e6/"/>
    <id>https://blog.zsliang.me/posts/4372d2e6/</id>
    <published>2015-10-22T04:00:00.000Z</published>
    <updated>2019-04-20T00:38:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><blockquote><p>GTD and OmniFocus<br><em>我只是大自然的搬运工</em>。 </p></blockquote><ul><li>Summarize by Zachary</li><li>Completed on Oct. 22, 2015</li></ul><hr><h2 id="GTD- 的哲学"><a href="#GTD- 的哲学" class="headerlink" title="GTD 的哲学"></a>GTD 的哲学</h2><h3 id="GTD- 是什么"><a href="#GTD- 是什么" class="headerlink" title="GTD 是什么"></a>GTD 是什么</h3><blockquote><p>GTD 是 Getting Things Done 的缩写，是一种行为管理的方法。<br>GTD 主要原则在于，通过记录的方式把头脑中的各种任务移出来，<strong>集中精力在正在完成的事情</strong>。      </p></blockquote><p>GTD 最大的特点就是将我们的大脑从存储和统筹的工作中解放出来。<br>不再用大脑去思考“<em>我要做什么 </em>”或者“<em> 现在我该做什么 </em>”。<br> 而专注于“<strong>把当前这件事情做好</strong>”。</p><h3 id="GTD- 基本原则"><a href="#GTD- 基本原则" class="headerlink" title="GTD 基本原则"></a>GTD 基本原则</h3><blockquote><p><strong>不要把提升行动力寄托在 GTD 上，就像不要把拥有幸福寄托在别人的身上一样。</strong>      </p></blockquote><h3 id="五个流程"><a href="# 五个流程" class="headerlink" title="五个流程"></a>五个流程</h3><ol><li><p><strong>收集 Collect</strong>       </p><ul><li>所有被执行的事情，都存放到一个 <strong>“收件箱 Inbox”</strong> 里面。     </li><li>清空大脑碎片，留待随后整理，保持大脑无压力状态。      </li><li>另外 Inbox 要 <strong> 定期清空</strong>，否则堆积如山就失去意义。       </li></ul></li><li><p><strong>处理 Process</strong>   </p><ul><li>处理 Inbox 需要一个严谨的过程。       </li><li>要判断 <strong>“是否需要去做？”</strong>         <ul><li>不需要。丢弃 <code>Trash</code> / 作为资料存档 <code>Refenrence</code> / 时机成熟再说 <code>Someday/Maybe</code> 。       </li><li>需要。立即去做 <code>Action</code> / 委托给别人 <code>Delegate</code> / 延期处理 <code>Defer</code> 。      </li></ul></li><li>处理要及时、彻底，才能让整个工作流顺畅运转。        </li></ul></li><li><p><strong>组织 Organize</strong>      </p><ul><li>组织是一个动态发展的持续过程。       </li><li>主要形式：建立和管理若干的 <strong>List</strong> 用于执行的参考。       </li><li><strong>项目</strong> <code>Projects</code>，有条理的处理事情；       </li><li><strong>下一步行动</strong> <code>Next Action</code>,，清晰找到可执行目标；       </li><li><strong>等待</strong> <code>Waiting for</code>，需要关注和跟踪；     </li><li><strong>“将来 / 可能</strong> <code>Someday/Maybe</code>，需要定期回顾。        </li></ul></li><li><p><strong>检查 Review</strong>        </p><ul><li>计划不如变化快，面对时刻变化的目标，我们需要经常的进行“检查”。至少一周进行一次定期“检查”，才能让我们的“项目和行动列表”与不断变换的环境保持一致。Omnifocus for iPad 的 Review 功能十分惊艳，据说很快也将移植到其他版本中去。</li></ul></li><li><p><strong>执行 Execute</strong>       </p><ul><li>不去“做”的 GTD 都是纸上谈兵，有了之前几个步骤的实现，剩下的就是放松大脑，专注的去把手头的事情做好了！</li></ul></li></ol><hr><h2 id="关于 -OmniFocus"><a href="# 关于 -OmniFocus" class="headerlink" title="关于 OmniFocus"></a>关于 OmniFocus</h2><blockquote><p>OmniFocus 和 2Do List 的区别     </p><blockquote><p>OmniFocus 可以分解项目、任务直到行动、一起用情境重新组织行动、一起回顾，贯穿做事的整个过程。<br>GTD 方法有五个流程，六个高度，这是也人生的高度，随着高度的爬升使用 OmniFocus 的方法会完全不同，看看项目文件夹的分类和情境分类就知道了。<br>2Do List 永远告诉你的是「还有这些事要做」。</p></blockquote></blockquote><blockquote><p>OmniFocus 特点</p><blockquote><p>快速收集 <br> 云同步（MacOS、iPhone…软硬加起来真是贵死了。。。）<br>无限层级嵌套（管理多个项目你就知道好处了。。。）<br>透视（OmniFocus 最强大的功能，定制化看任务）    </p></blockquote></blockquote><blockquote><p>OmniFocus 使用哲学       </p><blockquote><p>不同类型的人，侧重点不同。<br>角色特征 -&gt; 关键流程 -&gt; 技巧      </p></blockquote></blockquote><hr><h2 id="OmniFocus- 个人设置（仅供参考）"><a href="#OmniFocus- 个人设置（仅供参考）" class="headerlink" title="OmniFocus 个人设置（仅供参考）"></a>OmniFocus 个人设置（仅供参考）</h2><h3 id="Projects- 项目"><a href="#Projects- 项目" class="headerlink" title="Projects 项目"></a>Projects 项目</h3><ol><li>Ability    </li><li>Work        </li><li><p>Ritual         </p><blockquote><p>重复事项，多结合 <strong>四象限法则 - 重要不紧急</strong> 情景</p></blockquote></li><li><p>Sundries  </p></li></ol><h3 id="Contexts- 情景"><a href="#Contexts- 情景" class="headerlink" title="Contexts 情景"></a>Contexts 情景</h3><ol><li>Office    <ol><li>Eat Frog / Highest Priority</li><li>Tomato Time</li></ol></li><li>Home   <ol><li>High Energy</li><li>Brain Dead</li></ol></li><li>Outward         <ol><li>Meeting</li><li>Supermarket / Bank</li></ol></li><li><p>Important but not Urgent</p><blockquote><p>四象限法则     </p><blockquote><p>重要且紧急，一般直接标 <strong> 旗标 </strong>（透视）。<br> 重要但不紧急，一般放 <strong> 仪式</strong>（透视），重要在于此。   </p></blockquote></blockquote></li><li><p>Delegate with People</p></li><li>On-hold / Waiting        </li></ol><h3 id="透视"><a href="# 透视" class="headerlink" title="透视"></a>透视</h3><ol><li><p>旗标       </p><ul><li>《Eat That Frog》，每天早上完成最重要的任务，Most Important Task。     </li><li>每天最多三个青蛙，有空就想办法搞定。    </li></ul></li><li><p>仪式       </p><ul><li>周期行为。 </li></ul></li><li><p>追踪       </p><ul><li>关于人，指派任务并且反馈。 </li></ul></li><li><p>预测       </p><ul><li>与时间有关。    </li></ul></li></ol><h3 id="我的工作流"><a href="# 我的工作流" class="headerlink" title="我的工作流"></a>我的工作流</h3><blockquote><p>旗标 -&gt; 截止日期 -&gt; 情景 -&gt; 项目（聚焦） </p></blockquote><ul><li>流程化和系统化才能解放大脑，建立个人工作流。    </li></ul><hr><h2 id="一些他人的提醒"><a href="# 一些他人的提醒" class="headerlink" title="一些他人的提醒"></a>一些他人的提醒</h2><ul><li><p>挖掘技能的实质所在 </p><ul><li>找到关键的「小事」。<ul><li>对于得分后卫来说，关键小事是远距离投篮；  </li><li>对于中锋来说，关键小事是背身单打； </li><li>对于销售员来说，关键小事是沟通；  </li><li>对于当前的职位与身份，你的关键小事是什么？     </li></ul></li><li>用正确的方法去做“小事”。 <ul><li>比如篮球运动员用正确的方式练习投篮；    </li><li>我们也要用正确的方法来面对琐碎的事情，做事靠系统，这是基本功。</li></ul></li></ul></li><li><p>就像开头说的，对于刚开始做项目管理的人来说，比较痛苦的就是职位升了，工作方式没有升级。</p><ul><li>把关注点从「做事」，转到「做人」</li><li>把行动的重点从「搞定」，转到「检视」</li></ul></li></ul><h2 id="创业团队的时间管理"><a href="# 创业团队的时间管理" class="headerlink" title="创业团队的时间管理"></a>创业团队的时间管理</h2><blockquote><p>常见问题： </p><ol><li>过于自由的工作状态  <blockquote><p>项目紧迫感不强，计划的事情总到最后一刻才完成。</p></blockquote></li></ol></blockquote><blockquote><ol start="2"><li>团队成员之间会互相干扰        <blockquote><p>工作状态一但被打破，很难再次进入专注状态。 </p></blockquote></li></ol></blockquote><blockquote><ol start="3"><li>无法预估计划进度       <blockquote><p>整体进度带来了不确定性。     </p></blockquote></li></ol></blockquote><ul><li><p>解决方案  </p><ol><li><p>倒推的方法重新建立里程碑 </p><ul><li><p>问题的关键是：团队对挑战和危机有没有统一的认识？</p><p><img src="http://upload-images.jianshu.io/upload_images/80247-a81c7f3431826585.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ul></li><li><p>任务看板 + 每周例会      </p><ul><li>每周例会：讨论项目进度和下周计划      </li><li><p>看板管理：每周任务上墙，把规划、进度、任务分配展示 (Trello 是个好东西)</p><p><img src="http://upload-images.jianshu.io/upload_images/80247-053654454abac9ee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">            </p></li></ul></li><li><p>番茄工作法 + 收集篮 + 免打扰牌       </p><ul><li>实体的收集篮，专注工作的时候尽量不要打扰！     </li></ul></li></ol></li></ul><h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><ol><li><a href="http://www.gtdlife.com/2013/3157/how-to-improve-productivity-use-omnifocus/" rel="external nofollow noopener noreferrer" target="_blank">如何使用 Omnifocus 做时间管理—系列</a> </li><li><a href="http://www.douban.com/note/271699848/" rel="external nofollow noopener noreferrer" target="_blank">工具控的福音—Omnifocus 使用心得总结—系列</a>       </li><li><a href="http://1banban.net/post/9838247397" rel="external nofollow noopener noreferrer" target="_blank">GTD 和 Omnifocus 的那些事儿—系列</a>       </li><li><a href="http://omnifocus.oes2t.org/part01.html" rel="external nofollow noopener noreferrer" target="_blank">OmniFocus Series</a>       </li><li><a href="http://v.youku.com/v_show/id_XMzQ0NjY3OTg0.html" rel="external nofollow noopener noreferrer" target="_blank">OmniFocus 基础篇、进阶篇—系列</a></li></ol><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/4372d2e6/">https://blog.zsliang.me/posts/4372d2e6/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;GTD and OmniFocus&lt;br&gt;&lt;em&gt;我只是大自然的搬运工&lt;/em&gt;。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Summarize by Zachary&lt;/li&gt;
&lt;li&gt;Comple
      
    
    </summary>
    
      <category term="Tools" scheme="https://blog.zsliang.me/categories/Tools/"/>
    
    
      <category term="GTD" scheme="https://blog.zsliang.me/tags/GTD/"/>
    
      <category term="OmniFocus" scheme="https://blog.zsliang.me/tags/OmniFocus/"/>
    
      <category term="Efficiency" scheme="https://blog.zsliang.me/tags/Efficiency/"/>
    
  </entry>
  
  <entry>
    <title>六项思考帽</title>
    <link href="https://blog.zsliang.me/posts/140ab620/"/>
    <id>https://blog.zsliang.me/posts/140ab620/</id>
    <published>2014-11-21T05:00:00.000Z</published>
    <updated>2019-04-20T00:35:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><blockquote><p> 六项思考帽 </p></blockquote><ul><li>Summarized by Zachary </li><li>Completed on Nov. 21, 2014</li></ul><blockquote><p><strong> 思考最大的障碍在于混乱 </strong>  </p></blockquote><hr><h2 id="红色思考帽"><a href="# 红色思考帽" class="headerlink" title="红色思考帽"></a> 红色思考帽 </h2><blockquote><p><strong> 情绪、直觉和感情 </strong>  </p></blockquote><ol><li> 预感、直觉和印象 <ul><li> 不需要理由和根据，不下结论。    </li></ul></li><li> 不必符合逻辑或者始终如一 <ul><li> 不必为感觉辩解。  </li></ul></li></ol><h2 id="绿色思考帽"><a href="# 绿色思考帽" class="headerlink" title="绿色思考帽"></a> 绿色思考帽 </h2><blockquote><p><strong> 创造性 </strong>   </p></blockquote><ol><li> 水平思考法    <ol><li> 前轮与后轮 <ul><li> 水平：创新型、设计型（前，方向）； </li><li> 垂直：判断型、分析性（后，执行推动）；     </li></ul></li><li> 旧洞与新洞    <ul><li> 垂直思考，旧洞越挖越深；  </li><li> 水平思考，另外找新洞挖；  </li></ul></li><li>“是什么”和“成为什么” </li></ol></li><li> 创造性思考    <ul><li> 新想法、新观念、新认知。  </li></ul></li><li> 发展而非判断   </li><li>“Po”诱因的操作    <ul><li> 随机诱因，制造诱因。    </li></ul></li><li>“选择”与“收割”    <ul><li> 多种选择，不同层次的选择，创意暂停，尝试换角度。  </li><li> 不要忽略其他方案中的价值。 </li></ul></li></ol><h2 id="黄色思考帽"><a href="# 黄色思考帽" class="headerlink" title="黄色思考帽"></a> 黄色思考帽 </h2><blockquote><p><strong> 阳光和价值、乐观与积极 </strong>   </p></blockquote><ol><li> 正面、积极地思考 <ul><li> 梦想、幻想与希望。 </li></ul></li><li> 理由与逻辑证明  </li><li> 建设性思考    <ul><li> 与创造性的差异。</li></ul></li><li> 远见、利益与价值敏感   <ul><li> 什么情况下有价值？怎样体现？有无其他价值？ </li></ul></li></ol><h2 id="白色思考帽"><a href="# 白色思考帽" class="headerlink" title="白色思考帽"></a> 白色思考帽 </h2><blockquote><p><strong> 信息与客观 </strong> </p></blockquote><ol><li> 事实与数据    <ul><li> 论点，及任何事实和数据。  </li></ul></li><li> 双层式事实系统  <ul><li> 被信仰的事实和被验证的事实（后者层次更高）。    </li></ul></li><li> 电脑的信仰    <ul><li> 中立客观的态度，不提出解释和意见。 </li></ul></li></ol><h2 id="黑色思考帽"><a href="# 黑色思考帽" class="headerlink" title="黑色思考帽"></a> 黑色思考帽 </h2><blockquote><p><strong> 冷静、严肃和谨慎 </strong>  </p></blockquote><ol><li> 谨慎和小心    <ul><li> 风险、危险、障碍、潜在问题。    </li></ul></li><li> 融和过程 <ul><li> 不是用观点驳倒观点，而是质疑，评判。    </li></ul></li><li> 过去与未来    <ul><li> 未来发生什么？与过去经验是否相符？ </li></ul></li><li> 不过度使用 </li></ol><h2 id="蓝色思考帽"><a href="# 蓝色思考帽" class="headerlink" title="蓝色思考帽"></a> 蓝色思考帽 </h2><blockquote><p><strong> 控制和组织 </strong> </p></blockquote><ol><li> 思考的控制与监督 <ul><li> 指示、组织思考，阻止争论。</li></ul></li><li> 集中   <ul><li> 集中思考范围、定义并提出正确的问题，清楚地设定思考任务。  </li></ul></li><li> 程序设计 <ul><li> 全面纵览，组织路线。     </li></ul></li><li> 概要、纵论、总结 <ul><li> 观察正发生与已发生的思考过程，评论，报告，收获。  </li></ul></li></ol><hr><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/140ab620/">https://blog.zsliang.me/posts/140ab620/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt; 六项思考帽 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Summarized by Zachary &lt;/li&gt;
&lt;li&gt;Completed on Nov. 21, 2014&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
      <category term="Books" scheme="https://blog.zsliang.me/categories/Books/"/>
    
    
      <category term="Thought" scheme="https://blog.zsliang.me/tags/Thought/"/>
    
  </entry>
  
  <entry>
    <title>财务智慧</title>
    <link href="https://blog.zsliang.me/posts/e9d804af/"/>
    <id>https://blog.zsliang.me/posts/e9d804af/</id>
    <published>2014-11-03T05:00:00.000Z</published>
    <updated>2019-04-20T00:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><blockquote><p>财务智慧</p></blockquote><ul><li>[美] 卡伦·伯曼 | 商务印书馆 </li><li>Summarized by Zachary </li><li>Completed on Nov. 03, 2014    </li></ul><hr><blockquote><p>财务智慧归结为四个方面的独特技能      </p><ol><li>掌握基础知识</li><li>理解财务艺术</li><li>运用分析方法</li><li>树立全局观念</li></ol></blockquote><hr><h2 id="一：财务艺术及其重要性"><a href="# 一：财务艺术及其重要性" class="headerlink" title="一：财务艺术及其重要性"></a>一：财务艺术及其重要性 </h2><h3 id="数字未必靠谱"><a href="# 数字未必靠谱" class="headerlink" title="数字未必靠谱"></a> 数字未必靠谱</h3><ol><li><p>财务的艺术</p><ul><li>会计和财务的艺术就是一门用有限的数据尽可能精确地描绘公司经营业绩好坏的艺术。</li></ul></li><li><p>职业判断</p><ol><li>销售收入何时确认：        <ul><li>确定何时销售收入记入 <strong> 利润表 </strong><a href="** 利润表 **，显示了特定期间内（如一个月、一季度或一年）收入、费用和利润的情况，也称 * 损益表、收益表、经营成果表 *，有时候在它的前面还会加上“合并”一次，但他仍然是指利润表。利润表的 * 最上面一行是销售收入 *。利润表的 * 最下面一行是净利润 *，也称为净收入或净收益。">^1</a> 的一条 <strong> 基本原则</strong><ul><li><strong>产品或服务交付的时候。</strong></li></ul></li></ul></li><li>如何确定一项成本是 <strong> 营业费用 </strong><a href="** 营业费用 **，是指维持企业日常经营的费用。包括工资、福利、保险费以及其他项目。营业费用列在利润表中，把营业费用从销售收入中扣减后就得到了利润。">^2</a>，还是<strong> 资本性支出</strong><a href="** 资本性支出 **，是指长期投资而购买的东西，如计算机系统、机器设备等。大多数企业遵循的原则是任何 * 超过一定金额的购买 * 都作为资本性支出，而低于改金额的支出则列入 * 营业费用 *。营业费出现在利润表中，作为收入的抵减。资本性支出 * 出现在资产负债表 * 中，* 只有一种资本性支出，折旧，出现在利润表中 *。">^3</a>     <ul><li>营业费用 <strong> 立即扣减 </strong> 利润，而资本性支出在几个会计期间 <strong> 摊销</strong>。</li></ul></li></ol></li></ol><h3 id="分清假设、估计和偏差"><a href="# 分清假设、估计和偏差" class="headerlink" title="分清假设、估计和偏差"></a>分清假设、估计和偏差</h3><blockquote><p>四个简单但非常重要的问题：</p><ol><li>数字包含哪些假设？</li><li>数字是否有估计的成分？</li><li>假设和估计引起的偏差是什么？</li><li>产生的影响有哪些？</li></ol></blockquote><ol><li><p><strong>应计费用 </strong> <a href="** 应计费用 **，是特定期间内记录的特定收入或费用的一部分。如产品开发费用，可能会延伸到几个会计期间，所以总费用的一部分将在每个月作为应计费用。应计费用的目的是为了使特定期间的收入与费用尽可能精确地匹配。">^4</a> 与<strong>成本分摊</strong><a href="** 成本分摊 **，是指一个公司内将成本分摊给不同的部门和经营活动。例如管理费用（如 CEO 的工资）一般在公司的经营环节。">^5</a>       </p><blockquote><p>确定应计费用并进行成本分摊，总是需要作出 <strong> 假设 </strong> 和<strong>估计</strong>。        </p></blockquote><ul><li>确定应计费用并进行成本分摊，是会计的一项主要工作。     </li><li>会计师利用它们，来精确地刻画某一时期企业经营情况。     </li></ul></li><li><p>谨慎判断 <strong> 折旧</strong><a href="** 折旧 **，是会计使用的一种方法，把设备和其他资产的成本分摊到产品和服务成本中。它与应计费用的思想相同: 我们希望成本与售出的产品和服务所带来的收入尽可能匹配。大多数资本性支出是要计提折旧（土地是一个例外）。会计师把资本性支出的成本分摊在其使用年限内。">^6</a>       </p><ul><li>在实务中，会计对某一设备如何计提折旧存在很多职业判断，这种判断能够产生相当大的影响。        </li></ul></li><li><p>企业价值评估的多种方法  </p><ul><li>公司公开发行股票，由股票市场来定价。<ul><li>企业价值是：<strong><code>股价 * 已发行的股票数量 = 市值</code></strong>。</li></ul></li><li>公司为私人持有，没有市场为其定价，这时候购买者或出售者必须依赖其他估价方法。<ul><li>如 <strong> 价格收益比法、现金流折现法、资产估价法 </strong> 等等。</li><li>每一种方法都需要一大堆假设和估计。 </li></ul></li></ul></li></ol><h3 id="提高财务智慧的意义"><a href="# 提高财务智慧的意义" class="headerlink" title="提高财务智慧的意义"></a>提高财务智慧的意义</h3><blockquote><ol><li>从财务的视角看企业发生了什么。    <ul><li>利用这些信息进行更有效的工作和管理。    </li></ul></li><li>学会阅读财务报表。<ul><li>使用报表的信息把工作做得更好，计算比率。</li></ul></li><li>了解投资收益率（ROI）和运营资本管理。   <ul><li>提高决策能力和增强对企业的影响力。</li></ul></li></ol></blockquote><ol><li><p>财务知识普及的益处</p><ol><li>增强评估自己公司的能力  <ul><li>运用新的工具，观察企业发展趋势和理解数字背后的实质。        </li><li>学会衡量公司的业绩，知道如何最大限度地实现企业目标。    </li></ul></li><li>更好地理解数字中的偏差  <ul><li>当决策是根据数字作出的，而数字是根据会计的假设和估计作出的时，会计和财务人员实际上进行了有效的控制。    </li></ul></li><li>提高使用数字财务工具进行分析决策的能力  <ul><li>利用财务知识作出决策、指导下属、规划部门的发展。  </li></ul></li></ol></li><li><p>对企业的益处：  </p><ol><li>利于整个组织实力的平衡； </li><li>利于团队作出更好的决策； </li><li>利于员工间更密切地合作。 </li></ol></li><li><p>财务智慧的制约因素:</p><ol><li>讨厌数字，恐惧数学，不喜欢数学计算；   </li><li>会计和财务部门严格控制所有的财务信息；  </li><li>老板不希望对数字提出疑问；    </li></ol></li></ol><h3 id="工具箱"><a href="# 工具箱" class="headerlink" title="工具箱"></a>工具箱</h3><ol><li><p>融资分析报告，企业的财务状况。  </p><ul><li>企业过去一年的收入增长、利润增长和赢利状况的改善。     </li><li>企业遗留的财务问题。        </li><li>企业的 <strong> 现金 </strong><a href="** 现金 **，资产负债表中列示的现金是指企业存在银行的现金加上其他容易变现的资产（如股票和债券）。">^9</a> 流状况。 </li></ul></li><li><p>求职者者可向招聘方提出的财务问题：        </p><ul><li>公司是否赢利？</li><li>它的所有者权益是正数吗？</li><li>它的流动比率足以支持开工资吗？</li><li>销售收入是呈增长还是下降趋势？</li></ul></li><li><p>财务人员与其工作内容:</p><ol><li>CFO：<ol><li>CFO 从财务方面管理公司，并为公司进行战略规划。     </li><li>负责监督企业所有的财务职能。       </li><li>企业的财务主管和会计主管都向其汇报。通常也是董事会成员。 </li></ol></li><li>财务主管：<ol><li>同时关注企业内外。    </li><li>负责建立与维护企业与银行的联系，管理改进，预测财务状况，及作出权益和资本结构决策。</li><li>也负责协调与投资者的关系，作出与股权相关的决策。</li><li>一般认为，理想的财务主管，既要精通财务，又要人品出众。  </li></ol></li><li>会计主管：<ol><li>完全对内。    </li><li>主要工作，提供可信赖的财务报表。     </li><li>主要负责，一般会计、财务报表，业务分析，财务计划，资产管理和内部控制，保证日常交易的准确的记录。     </li></ol></li></ol></li></ol><hr><h2 id="二：利润表的特征"><a href="# 二：利润表的特征" class="headerlink" title="二：利润表的特征"></a>二：利润表的特征 </h2><h3 id="利润是一个估计值"><a href="# 利润是一个估计值" class="headerlink" title="利润是一个估计值"></a> 利润是一个估计值</h3><blockquote><p>彼得·德鲁克：<strong>利润 </strong> 是企业最主要的评价标准。</p></blockquote><ul><li><p>必要的一点会计知识：</p><ul><li><strong>利润表 </strong><a href="** 利润表 **，显示了特定期间内（如一个月、一季度或一年）收入、费用和利润的情况，也称 * 损益表、收益表、经营成果表 *，有时候在它的前面还会加上“合并”一次，但他仍然是指利润表。利润表的 * 最上面一行是销售收入 *。利润表的 * 最下面一行是净利润 *，也称为净收入或净收益。">^1</a>，它衡量的是<strong> 销售收入 </strong><a href="** 销售收入 **，是企业在特定时期内为客户提供的全部产品和服务的价值。">^11</a>、<strong> 成本（费用）</strong>以及 <strong> 利润（或收益）</strong>。<ol><li>任何利润都是从销售收入开始。</li><li>当企业向客户提供一种产品或服务，会计会认为就是一项销售收入。</li><li>企业会把销售收入的金额在利润表的最上面一行，不用介意客户是否为产品或服务付款。</li></ol></li><li>什么是利润表中的“成本”？<ol><li>利润表中的成本和费用是在该期间内为取得销售收入而发生的成本和费用。</li><li>会计称之为 <strong> 配比原则 </strong><a href="** 配比原则 **，是编制利润表的一项基本会计原则。简单说，就是“在确定利润的特定期间内（通常是一个月、一个季度或一年），销售收入要与其对应的成本和费用相互配比”。换句话说，会计人员的主要工作就是计算并准确地记录取得销售收入所发生的所有成本费用。">^10</a>（相关的成本应该与利润表中特定期间内的销售收入相配比）—这是<strong> 理解如何确定利润的关键</strong>。</li></ol></li><li>会计不只是算出 <strong> 现金 </strong><a href="** 现金 **，资产负债表中列示的现金是指企业存在银行的现金加上其他容易变现的资产（如股票和债券）。">^9</a> 流动的总数，他们还必须作出假设和估计。这一过程中，就有可能给数字带来偏差。</li></ul></li><li><p>利润表的目的:</p><ol><li>原则上，利润表要在衡量所有数据合计后，确定企业提供的产品服务 <strong> 是否赢利</strong>。</li><li>会计最费力的工作就是列出企业在特定期间内产生的 <strong> 收入 </strong>，列出取得收入发生的<strong> 成本 </strong>（包括期间<strong> 费用 </strong>），如果有还要列出<strong> 利润</strong>。</li><li>长远看，经营良好的公司的利润表和现金流量表可以互相提供数据。<strong>利润将转化为现金。</strong></li><li>在特定时间内公司赚取了利润，并不意味着它用现金去支付账单。<strong>利润始终是一个估计值。</strong></li></ol></li></ul><h3 id="破解利润表密码"><a href="# 破解利润表密码" class="headerlink" title="破解利润表密码"></a>破解利润表密码</h3><blockquote><p>很多利润表上的数据 <strong> 反映了估计和假设</strong>。        </p></blockquote><ul><li>阅读利润表：<ol><li>利润表的表题：<ul><li>利润表 / 赢利和亏损表 / P&amp;L 表 / 经营运作表 / 业务运作表 / 收益表 …</li><li>注意 “真实利润表” 与 “预测利润表” 的区别。</li></ul></li><li>重要的数字<ul><li><strong>销售收入 </strong>（或称<strong> 营业收入 </strong>），总在<em> 利润表最上面一行</em>，（“最上面一行增长”，说的是销售收入增长），成本和费用居中，利润在最下面。   </li><li>查看哪项数字与销售额相比得出的值最大，一般可判断什么对于企业是至关重要的。</li></ul></li><li>数据的比较    <ul><li>关键要解释哪些内容发生了变化，哪些数字与推想的一致，哪些不一致。</li></ul></li><li>附注<ul><li>内部利润表可能不包括附注，如果有，则建议详细地阅读附注。  </li></ul></li></ol></li></ul><h3 id="收入：关键是确认"><a href="# 收入：关键是确认" class="headerlink" title="收入：关键是确认"></a>收入：关键是确认</h3><blockquote><p>收入确认是经常发生财务欺诈的一个舞台。<br>一个公司可以在向客户提供一项产品或服务时，记录和确认 <strong> 销售收入</strong><a href="** 销售收入 **，是企业在特定时期内为客户提供的全部产品和服务的价值。">^11</a>。  </p></blockquote><ul><li><p>模糊的指导准则：</p><ol><li>会计人员使用的记录和确认收入的指导准则是 <strong> 收入必须已经赚得</strong>。    </li><li>以做项目为主的公司一般有这样的规则，允许在项目 <strong> 有重大进展时确认部分收入</strong>。     </li></ol></li><li><p>操纵的可能性：</p><ol><li>原则上，任何对利润表最后一行有<strong>“重大”影响的会计变更，应在附注给予说明与解释</strong>。</li><li>财务智慧是指里金额收入如何确认、分析销售收入中的差异，并根据真实的业绩进行管理。</li></ol></li></ul><h3 id="成本和费用：没有严格不变的规则"><a href="# 成本和费用：没有严格不变的规则" class="headerlink" title="成本和费用：没有严格不变的规则"></a>成本和费用：没有严格不变的规则</h3><blockquote><p>线上科目，<strong>线下科目</strong><a href="** 线上科目，线下科目 **，“分界线科目”一般指毛利润。在利润表的毛利润至上一般是销售收入和产品成本或服务成本。在毛利润之下是营业费用、利息、税。区别在于，短期内线上科目总是比线下科目变动更大，总会引起管理者更多的关注。">^15</a>（分界线科目一般指毛利润）。           </p></blockquote><ul><li><p><strong>产品成本 </strong> 或<strong>服务成本</strong><a href="** 产品成本和服务成本 **，是一大类费用。它包括与生产产品和提供服务直接相关的所有费用。">^13</a>:</p><ul><li>利润表中的费用主要包括两大类：产品成本(Cost of Goods Sold, <strong>COGS</strong> )，服务业中则叫做服务成本(Cost of Services, <strong>COS</strong> )  。       <ol><li>COGS 背后的含义是衡量所有与生产产品和提供服务直接相关的成本、原材料和劳动。这就可能出现多种解释。       </li><li>公认会计准则 [^14]（GAAP）提供许多规则的详细解释和指导原则，<strong> 关键是合理性和一致性。</strong></li></ol></li></ul></li><li><p><strong>营业费用</strong><a href="** 营业费用 **，是另一类主要的费用。这类费用包括与生产产品和提供服务不直接相关的费用。">^16</a>：什么是必要的？</p><ul><li>有些企业把营业费用称为销售费用、一般费用和管理费用(sales, general, and administrative expenses, SG&amp;A 或 G&amp;A);</li><li>折旧与摊销<ol><li>营业费用的另一部分是折旧和摊销费用，它们一般隐藏在销售费用、一般费用和管理费用中。     </li><li>一般来说，折旧是实物资产 (如卡车 / 机器) 在其估计使用年限内的一种“消耗”。这意味这由会计来计算资产可能使用多长时间从而把其全部成本分割成合理的部分，并计算多少费用列支在利润表上。</li><li>折旧是会计师所称的一种典型的非现金费用<a href="** 非现金费用 **，是指在特定器件的利润表中列支的，但实际并没有支付的费用。一个典型的例子是折旧。会计人员每个月都计提设备的折旧，但是企业对这部分金额没有支付义务，因为设备是在以前的会计期间购买的。">^17</a>。摊销的原理与折旧相同，但是它适用于无形资产。</li><li>无形资产常常是构成企业资产负债表的一大块儿，专利、著作权、商誉 <a href="** 商誉 **，当一家公司收购另一家公司时，商誉开始起作用。它是被收购方的净资产（等于资产的公平市场价值减去负债）与收购方支付的价款之差。例如一家公司的净资产是 100 万美元，收购方付出了 300 万美元，那么商誉就以 200 万美元列示在收购方的资产负债表上。这反映了没有反映在被收购方有形资产中的价值，例如民称、声誉、客户名单等。">^7</a> 等都是无形资产。它们需要花费成本来购置，而且有价值，但是它们不是像不动产和设备那样的实物资产。因此企业必须把专利所产生的费用和它可以带来的收入相配比，每次摊销一点。</li></ol></li><li>一次性开支：危险的信号<ol><li>其他收入或费用科目 (一般是出售资产的收入或损失，或者是与企业经营无关的交易的收入或损失) 和“税金”科目。</li><li>这些出现在产品成本和营业费用之后的一个科目，对赢利至关重要，这一科目最常用的名称是“一次性开支”。</li></ol></li></ul></li></ul><h3 id="利润的多种形式"><a href="# 利润的多种形式" class="headerlink" title="利润的多种形式"></a>利润的多种形式</h3><blockquote><p><strong>利润 <a href="** 利润 **，是从收入中扣除费用后剩下的金额。利润有三种形式：** 毛利润、营业利润和净利润 **。每一种形式都是由从收入中扣除特定类型的费用来确定的。">^18</a> = 收入 -（成本 + 费用）</strong><br><strong> 利润三种基本形式 </strong>：<strong> 毛利润 <a href="** 毛利润 **，是指销售收入减去产品成本或服务成本。它是指企业在支付了与生产产品和提供服务所发生的成本后剩余的。毛利润必须非常充足，能够足以支付企业的营业费用、税金、财务费用和净利润。">^19</a></strong>、<strong> 营业利润 <a href="** 净利润 **，是 ** 利润表的最后一行 **，是从收入中扣除所有成本和费用后剩余的。它是营业利润减去利息费用、税金、一次性开支和其他不包括在营业利润中的费用。">^20</a></strong> 和<strong>净利润 [^21]</strong>。<br><strong> 净利润 = 营业利润 - 利息税金 = 毛利润 - 所有费用</strong></p></blockquote><ul><li><p><strong>毛利润</strong>   </p><ol><li>了解毛利润变化的原因，有助于管理者判断工作重点在哪里。</li><li>另外同样需要思考，数字是否存在偏差。</li><li>何时确认收入，哪些费用应包括在产品成本内，这两项决策对毛利润有重大影响。</li></ol></li><li><p><strong>营业利润</strong>（EBIT）</p><ol><li>营业利润（毛利润减去营业费用，包括折旧和摊销费用），表示扣除利息费用和税金前的收益。</li><li>营业利润，衡量企业管理好坏的一个很好的标准。</li><li>同样有潜在的偏差影响营业利润，如“一次性开支”、如何计提折旧等等。</li><li>EBITDA，扣减利息费用、税金、折旧和摊销费用前收益，忽略了折旧等非现金费用。</li></ol></li><li><p><strong>净利润</strong></p><ol><li>净利润一般是 <strong> 利润表最后一行</strong>。</li><li>净利润是所有的费用都扣减后剩余的利润。</li><li>所有费用包括：产品或服务成本、营业费用、税金、利息费用、一次性开支以及折旧和摊销等非现金费用。</li></ol></li><li><p>三种可能的改变低赢利的办法</p><ol><li>增加销售收入；</li><li>找到降低成本和提高经营效率的方法，即降低 COGS；</li><li>削减营业费用，常意味着裁员。</li></ol></li></ul><h3 id="工具箱 -1"><a href="# 工具箱 -1" class="headerlink" title="工具箱"></a>工具箱</h3><ul><li>理解偏离值<ul><li>偏离值就是指差异、不同。</li><li>掌握偏离值的一个难点是，确定偏离值是有利的，还是不利的。</li></ul></li></ul><hr><h2 id="三 - 资产负债表"><a href="# 三 - 资产负债表" class="headerlink" title="三 资产负债表"></a>三 资产负债表</h2><blockquote><p>资产负债表，有助于显示公司的财务状况是否良好。<br>资产负债表，是企业的通用放大器，可能是所有报表中最重要的。 </p></blockquote><h3 id="资产负债表的基础知识"><a href="# 资产负债表的基础知识" class="headerlink" title="资产负债表的基础知识"></a>资产负债表的基础知识</h3><ul><li><p>资产负载表的内容</p><ol><li>反映企业在某一特定日期所有的和所欠的事项的会计报表。</li><li>企业所有的和所欠的差就是 <strong> 所有者权益</strong><a href="** 所有者权益 **，是用会计原则衡量的股东在企业中的“股份”，也叫做企业的账面价值。就会计术语而言，所有权益总是等于资产减去负债；它等于股东投入的资金总和加上企业成立后赚得的利润减去支付给权东投入的资本总和加上企业成立后减去支付给股东的股利。不管怎么说，那是会计公司；公司股份的实际价值是指有购买意愿的人购买这些股份时之前的价钱。">^22</a>。</li><li>资产负载表的所有者权益在一定程度上会显示出企业留存的利润或者累积的亏损，这项称为 <strong> 留存收益 / 累积盈余</strong>。</li></ol></li><li><p>个人和企业</p><ol><li><strong><code>所有的 = 所欠的 + 净资产</code></strong><ol><li>企业所有的经济资源称为 <strong> 资产</strong>。</li><li>企业所欠的称为 <strong> 负债</strong>。</li><li>企业的净价值称为 <strong> 所有者权益 / 股东权益</strong>。</li></ol></li><li><strong><code>资产 = 负债 + 所有者权益</code>（基本会计等式）</strong></li></ol></li><li><p>阅读资产负债表：<code>资产 = 负债 + 所有者收益</code></p><ul><li>主要有两种格式<ol><li>传统模式：资产在左边，负载和所有者权益在右边，负载在右上方；</li><li>另一种模式：资产在最上面，负载在中间，所有者权益在下面；</li></ol></li><li>资产负债表中，特定项目会在附注中，有所澄清和说明。</li><li>另外企业常在附注中，包含一份标准的免责声明。</li></ul></li></ul><h3 id="资产：更多的估计和假设 - 现金除外"><a href="# 资产：更多的估计和假设 - 现金除外" class="headerlink" title="资产：更多的估计和假设 (现金除外)"></a> 资产：更多的估计和假设(现金除外)</h3><blockquote><p>资产：企业所拥有的，包括现金和证券、机器和设备、建筑物和土地等一切资源。<br>流动资产：一般列在资产负载表的最上方，指一年内能够变现的资产。<br>长期资产：指使用年限超过一年的资产。</p></blockquote><ul><li><strong>资产 </strong> 的类型<ol><li><strong>现金和现金等价物</strong><ul><li>硬通货：包括存在银行的现金，货币市场账户中的现金，包括公开交易的股票和债券。</li></ul></li><li><strong>应收账款</strong><ul><li>指客户欠企业的账款。</li><li>收入是付款的承诺，相当于企业为客户贷款，企业拥有对客户的债权。</li><li>坏账准备金：应收账款科目的抵减科目。对客户不能支付所欠账款的估计。也会用此作为 <strong>“烫平”收益</strong><a href="**“烫平”收益 **，企业利润冲向顶峰，但是如果峰值没有被预见到，并且无法解释，投资者可能会有负面的反应，看做管理者不能控制企业的信号。所以企业更愿意“烫平”它们的收益，保持平稳、可预见的增长。">^24</a> 的一种手段。</li></ul></li><li><strong>存货</strong><ul><li>指即将销售的产品的价值，称产成品存货。   </li><li>指正在生产的产品的价值，称产品存货（WIP work-in-process）。   </li><li>用于制造产品而存储的原材料，称原材料存货。 </li><li>服务企业一般没有太多存货，但其他类型的企业几乎都有不少存货。    </li></ul></li><li><strong>土地、厂房和设备</strong><ul><li>包括建筑物、及其、车辆、计算机和企业的其他实物资产。</li><li>此项目的数值是企业用于维持运作，而购买全部机器和设备所支付的总成本（这里指购买价格）。</li><li>因为以购买价值计价，所以土地等比较容易出现“被低估的资产”。</li></ul></li><li><strong>减去：累计折旧</strong><ul><li>土地不会损耗，因此不对土地计提折旧，但是建筑物和设备要计提折旧。</li><li>核算折旧关键在于它产生收益和盈利的使用年限内对资产的投资进行分摊。</li></ul></li><li><strong>商誉</strong><ul><li>商誉是被收购 <a href="** 收购 **，当一家公司购买另一家公司时，就发生了收购。通常，报纸上看到的兼并或联合的字样，仍然表明一家公司购买另一家公司。">^25</a> 方支付的价格与收购方实际得到的净资产之差。</li><li>新的规定，商誉的价值列入账面，并不进行摊销。</li></ul></li><li><strong>知识产权、专利权和其他无形资产</strong><ul><li>软件和专利权会在未来的会计期间产生收入，这些投资应作为无形资产<a href="** 无形资产 **，企业的无形资产是指有价值，但是你不能触摸到或消耗的任何财产，包括员工、客户名单、领先的技术、专利权、商标、声誉、战略实力等。这些资产的绝大部分在资产负债表上看不到，除非收购方为其支付了价钱，并作为商誉登记。知识产权（如专利权和著作权）是一个例外，它再资产负债表中列出，并在其使用年限内摊销。">^26</a>，在它们可以产生收入流的年限内进行摊销。</li><li>同样，没有产生收入效果的研发费用应该在利润表计入费用。</li><li>摊销决策，通常也能够对利润和所有者权益产生重大的影响。</li></ul></li><li><strong>应计费用和预付资产</strong><ul><li>每个月从资产负债表的预付费用科目转出，并计入当月的费用，称应计费用。</li><li>资产负债表上登记尚未支付的费用的账户称“应计资产账户”。</li></ul></li></ol></li></ul><h3 id="资产负债表的另一方：负债和所有者权益"><a href="# 资产负债表的另一方：负债和所有者权益" class="headerlink" title="资产负债表的另一方：负债和所有者权益"></a>资产负债表的另一方：负债和所有者权益</h3><ul><li><p><strong>负债 </strong> 的种类</p><ol><li><strong>流动负债</strong>：指需要一年以内偿还的债务。</li><li><strong>长期负债</strong>：指需要在一年以上的期限内偿还的债务。负债通常按照从短期到长期的顺序列出。</li><li><strong>短期贷款</strong>：信用贷款和短期循环贷款项目。</li><li><strong>应付贷款</strong>：应付账款表示企业欠供货商的钱款。</li><li><strong>应付费用和其他短期负债</strong>：包括了公司所欠的其他所有项目。</li><li><strong>长期负债</strong>：大多数是贷款，但也有其他如递延红利或报酬、递延税款、养老金负债等。</li></ol></li><li><p><strong>所有者权益（股东权益 / 持股人权益）</strong>:</p><ul><li>资产减去负债后剩下的余项，包括投资者投入的资本和公司长期经营中取得的留存收益。        </li><li>一般包括以下几类：<strong>优先股 </strong><a href="** 优先股 **，是股票的一种特定类型。优先股的持有人在普通股持有人得到收益以前获得股利分配。但是优先股一般含有固定的股利，因此它的价格不像普通股价格波动得那么打。持有优先股的投资者不能得到公司价值增长的全部利益。当公司发行优先股时，以某一特定的初始价格出手给投资者。资产负债表上显示的数值反映了该价格。">^35</a>、<strong> 普通股 </strong><a href="** 普通股 **，与大多数优先股不同，普通股通常有投票权。持有普通股的人可以投票选出董事会成员（一般一股一票），也可以对需要股东表决的任何重大事项投票表决。普通股可能支付、也可能不支付股利。资产负债表中显示的价值一般是“面值”，它是发行人得到的名义金额。面值通常非常小，而且与股票市场价格无关。">^36</a>、<strong> 资本溢价 </strong><a href="** 资本溢价 **，是投资者最初购买股票时支付的超过面值的金额。例如，如果股票最初以每股 5 美元销售，每股面值为 1 美元，资本溢价就是每股 4 美元。它可以长期累计，比如如果公司增发股票，增加的资本溢价要加到现有金额上。">^37</a>、<strong> 留存收益</strong><a href="** 留存收益（或称累积收益）**，是指没有以股利方式支付而再投资于企业的利润。该数字代表了再投资或留在企业持续经营中的全部税后利润。">^38</a>。       </li></ul></li></ul><h3 id="资产负债表为什么会平衡？"><a href="# 资产负债表为什么会平衡？" class="headerlink" title="资产负债表为什么会平衡？"></a>资产负债表为什么会平衡？</h3><blockquote><p>所有交易过程中，所有者权益保持不变。<br>所有者权益只有在公司从所有者哪里得到资金、向所有者支付回报，或者记录利润和亏损时才会受到影响。<br>同时，每一笔影响资产负债表的交易都会影响另一方。</p></blockquote><h3 id="利润表对资产负债表的影响"><a href="# 利润表对资产负债表的影响" class="headerlink" title="利润表对资产负债表的影响"></a>利润表对资产负债表的影响</h3><ul><li><p>利润对所有者权益的影响</p><ul><li>净利润会增加所有者权益，除非作为股利被支付了。同样，净亏损会减少所有者权益。</li></ul></li><li><p>其他的影响:</p><ol><li>利润表上的销售收入，要么产生了现金，要么产生了应收账款。</li><li>每笔工资记录在产品成本或营业费用中，反映了资产负债表中现金的减少或应付费用的增加。</li><li>购买原材料则增加了应付账款等等，这些变化都会对总资产或负债产生影响。</li></ol></li><li><p>总而言之，任何管理者应该后退一步，审视全局，不要仅仅考虑利润表的某一项目，也要关注资产负债表和现金流量表。这样可以使你的思想、工作和决策将“更深入”。</p></li><li><p>评估一家公司是否经营良好</p><ol><li>公司偿付能力充足吗？公司的资产超过了负债，以致所有者权益是正数吗？</li><li>公司能支付其费用吗？这里一个重要的数字是流动资产（尤其时现金）与流动负债的比值。</li><li>所有者权益是否长期持续增长？比较不同时期的资产负债表可以看出公司是否在正确的方向上发展。</li></ol></li><li><p>其他一些问题    </p><ul><li>商誉对企业的“总资产”有什么重要的影响？</li><li>企业用什么方法提取折旧，它又什么重要影响？</li><li>“现金”科目是长期持续增长（通常是一个良好的迹象）还是持续下降？</li><li>如果所有者权益是增长的，那么是因为投资者在公司的要求下注入了资本，还是因为公司赚了钱？</li></ul></li></ul><h3 id="工具箱 -2"><a href="# 工具箱 -2" class="headerlink" title="工具箱"></a>工具箱</h3><ul><li><p>员工    </p><ul><li>“员工是我们最有价值的资产”（他们是吗？）<ul><li>员工确实会产生费用：工资常常是利润表中最大的费用支出之一。</li></ul></li><li><strong>把员工看做资产</strong><ul><li>对员工进行培训、投资，对员工给予很好的关照。</li></ul></li><li>从长远看来，把员工看做资产会提升企业的盈利能力，增加企业的价值？费用？还是资本性支出？</li></ul></li><li><p>把一个大的科目从利润表中拿出，放在资产负债表上，这样只有折旧作为费用抵减了利润，产生了利润增加的效果。</p></li></ul><hr><h2 id="四 - 现金至上"><a href="# 四 - 现金至上" class="headerlink" title="四 现金至上"></a>四 现金至上</h2><blockquote><p>现金流量是衡量企业财务状况是否健康的重要指标，也是衡量赢利能力和所有者权益的重要指标。   </p></blockquote><h3 id="现金是真实的支票"><a href="# 现金是真实的支票" class="headerlink" title="现金是真实的支票"></a>现金是真实的支票</h3><blockquote><p>巴菲特:</p><ol><li>根据长期的视角而不是短期的视角来评估企业。</li><li>寻找自己熟悉的企业。</li><li>查看财务报表时，非常强调现金流的衡量，称为所有者收益<a href="** 所有者收益 **，是对企业在特定时间内赚取现金能力的衡量。我们一般称它是所有者可以从企业拿走并为自己消费而花掉的那部分钱。所有者收益是一个非常重要的指标，因为它已经留出了足够的资本性支出，用以维持企业的健康运转。利润，甚至是经营活动的现金流量指标都做不到这一点。更多关于所有者收益的内容我们将在本部分的工具箱中介绍。">^29</a>。</li></ol></blockquote><blockquote><p>为什么现金之上？</p><ol><li>现金是受财务艺术影响最小的数字。</li><li>维持企业生存的是现金；</li><li>现金流是企业财务状况是否良好的一个重要指标。</li></ol></blockquote><h3 id="利润 -≠- 现金"><a href="# 利润 -≠- 现金" class="headerlink" title="利润 ≠ 现金"></a>利润 ≠ 现金</h3><blockquote><p>企业既需要现金，也需要利润，但两者不是一回事。<br>企业要良好运转，两者都需要。     </p></blockquote><ul><li><p>现金流入与利润不是一回事</p><ol><li>收入在销售完成时入账。（利润来自收入，反映的是支付承诺；现金流反映的总是现金交易；）</li><li>费用与收入配比。（现金流量表总是可以衡量特定期间内现金的流入和流出。）</li><li>资本性支出没有抵减利润。</li></ol></li><li><p>理解利润和现金的区别，是提高财务智慧的关键</p><ol><li>找正确的专家：<strong>缺现金，找财务专家；低盈利，找管理专家。</strong></li><li>作出关于投资时机的最佳决策: 对何时采取行动作出明智的决策能增加企业的效率。</li></ol></li></ul><h3 id="现金流量的表示方法"><a href="# 现金流量的表示方法" class="headerlink" title="现金流量的表示方法"></a>现金流量的表示方法</h3><blockquote><p>现金流的种类：<strong>经营、投资、融资活动 </strong> 产生的 <strong> 现金流</strong>。  </p></blockquote><ol><li>经营活动产生的现金流<ul><li>指所有与企业的实际经营有关的现金流，包括流入和流出。</li><li>显示的是经营活动的现金流量。在很多方面，它是唯一一个反映企业经营状况是否良好的重要数字。</li></ul></li><li>投资活动产生的现金流<ul><li>这里的投资活动指企业从事的投资活动，而不是企业的所有者从事的投资活动。</li><li>这一类最大的项目是花费在资本投资上的现金——也就是购买资产花费的现金。</li><li>表明企业对未来投资多少。</li></ul></li><li>融资活动产生的现金流<ul><li>融资活动一方面是指贷款和还款，另一方面是指企业与股东之间的交易。</li><li>表明企业在多大程度上依赖外部融资。</li></ul></li></ol><h3 id="现金与其他报表的联系"><a href="# 现金与其他报表的联系" class="headerlink" title="现金与其他报表的联系"></a>现金与其他报表的联系</h3><ul><li>所有的交易最终都会对利润表、资产负债表和现金流量表产生影响。</li><li>绝大部分交易最终都会在所有三张报表中找到。<ul><li>调整 <a href="** 调整 **，在财务中，调整是指企业资产负债表中的现金与存入银行的实际现金相匹配—就像账目的试算平衡，但是规模很大。">^32</a> 利润和现金: 使利润与现金相一致。<br>  1. 调整应收账款。<pre><code>- $ 应收账款的变化 = 新销售收入 - 收回的现金 $</code></pre>  2. 调整折旧。<pre><code>- 折旧是非现金费用，对现金流量表没有影响，必须加回去。</code></pre></li></ul></li></ul><h3 id="为什么现金至关重要"><a href="# 为什么现金至关重要" class="headerlink" title="为什么现金至关重要"></a>为什么现金至关重要</h3><ul><li>理解现金流的意义<ol><li>了解公司的现金状况有助于你了解公司的运营情形、公司朝那个方向发展、高层管理者优先考虑的是什么。<ul><li>特定的现金流来自哪里？经营活动？</li><li>投资的现金流是负数？公司对未来进行投资？</li><li>融资的现金流如何？是否有资本投入？还是在抛售股票？</li><li>这些问题可揭示出高层对公司的发展计划。</li></ul></li><li>你可以影响现金流量<ul><li>应收账款（能否及时支付账款？）、存货（如何减少存货？）、费用（能否延期支付费用？）、给予信用额度</li></ul></li><li>了解现金流量的管理者往往卑赋予更多的职责</li></ol></li></ul><h3 id="工具箱 -3"><a href="# 工具箱 -3" class="headerlink" title="工具箱"></a>工具箱</h3><ul><li><p>自由现金流</p><ul><li>自由现金流 = 经营活动产生的净现金流 - 投资于资本设备的现金</li></ul></li><li><p>自由现金流良好的意义</p><ol><li>公司有选择权<ul><li>可利用自由现金流偿还债务、购买竞争对手的公司，或向所有者支付股利。</li></ul></li><li>可专注于业务<ul><li>一段时间内无需担忧发工资或筹集资金等问题。</li></ul></li><li>公司股票更易被投资者看好</li></ol></li></ul><hr><h2 id="五 - 比率：理解数字的真正含义"><a href="# 五 - 比率：理解数字的真正含义" class="headerlink" title="五 比率：理解数字的真正含义"></a>五 比率：理解数字的真正含义 </h2><h3 id="比率分析的威力"><a href="# 比率分析的威力" class="headerlink" title="比率分析的威力"></a> 比率分析的威力</h3><ul><li><p>分析比率:（比率分析提供了比较的基础，可以看出比原始数字更多的内容。）       </p><ol><li>银行和其他资金借出方—负债权益比—企业能否偿还债务。   </li><li>高管—毛利润率—成本是否增加或者折扣是否恰当。      </li><li>信用部门—速动比率—评估客户财务状况。  </li><li>股东—市盈率—与其他公司股票比较，确定企业价值是被高估还是低估。     </li></ol></li><li><p>另外，比率本身也可以进行比较:   </p><ol><li>不同会计期间的比率。       </li><li>比较预期与实际的比率。  </li><li>与行业的平均水平比较。  </li></ol></li><li><p>企业中，管理者和股东一般利用四类比率分析公司的业绩：    </p><ul><li><strong>赢利能力比率、杠杠比率、流动性比率、经营效率比率。</strong>     </li></ul></li></ul><h3 id="赢利能力比率：（多数时候）越高越好"><a href="# 赢利能力比率：（多数时候）越高越好" class="headerlink" title="赢利能力比率：（多数时候）越高越好"></a>赢利能力比率：（多数时候）越高越好</h3><blockquote><p>赢利能力，是衡量公司取得收入和控制费用的指标。   </p></blockquote><ol><li><p><strong>毛利润率</strong> = 毛收入 / 收入 * 100%</p><ul><li>毛利润率，表明 <strong> 产品或服务本身的基本赢利能力</strong>，而没有加上营业费用和其他费用。</li><li>毛利润率负增长，一般暗示下列两种情况：   <ol><li>价格压力，被迫给予折扣。 </li><li>原材料和劳动力价格或服务成本上涨。    </li></ol></li></ul></li><li><p><strong>营业利润率</strong> = 营业利润(EBIT) / 收入 * 100%</p><ul><li>营业利润水平，反映的是从经营的角度来看的企业的整体经营状况。</li><li>营业利润率，是反映管理者整体工作效果的一个非常好的指标。</li></ul></li><li><p><strong>净利润率(ROS)</strong> = 净利润 / 收入 * 100%</p><ul><li>净利润率，说明企业每元销售收入扣除所有费用后剩余多少。（也叫销售回报率。）</li><li>净利润，利润表的最后一行，也称底线比率。</li><li>常与企业上年同期的净利润率和同行业中的净利润率相比较。</li></ul></li><li><p><strong>资产收益率(ROA)</strong> = 净利润 / 总资产 * 100%</p><ul><li>资产收益率，说明投资于企业的每 1 元可以获得多少利润回报。</li><li>总资产表明有多少钱在企业中被用来创造利润，资产收益率就是表明企业使用这些资产创造利润的效率如何。</li><li>ROA 高于行业标准，可能暗示企业没有为未来做准备，企业长远的前景将值得怀疑。 </li></ul></li><li><p><strong>所有者权益收益率(ROE)</strong> = 净利润 / 所有者权益 * 100%</p><ul><li>所有者权益收益率，告诉投资者每投入 1 美元会得到百分之几的利润。<ul><li>资产和权益的区别：资产是企业所拥有的，所有者权益是指由会计原则确定的净所得。</li></ul></li><li>从投资者的角度看，ROE 是一个非常关键的比率，可以衡量公司是否能够赚取与投资者承担的风险相当的收益。</li></ul></li><li><p><strong>投资收益率(ROI)</strong></p><ul><li>通常来说，ROI 与 ROA 相同，都是资产的回报。</li><li>但目前，也可以指某一特定投资的回报率。</li></ul></li></ol><h3 id="杠杆比率 - 平衡作用"><a href="# 杠杆比率 - 平衡作用" class="headerlink" title="杠杆比率: 平衡作用"></a>杠杆比率: 平衡作用</h3><ul><li>对于企业：债务可以使得企业以超过股东投资的限度来发展，从而创造超过所有者权益的利润。</li><li><p>财务分析师把债务称为“杠杆”，含义是企业可以通过借贷，来使用数量可观的资金，建立规模更庞大的资产。</p></li><li><p>企业中，杠杆实际上有两种方式定义:</p><ol><li><strong><em>经营杠杆 </em></strong>，指<strong> 固定成本和可变成本的比率</strong>。</li><li><strong><em>财务杠杆 </em></strong>，指<strong> 企业资产中债务融资的程度</strong>。</li></ol></li><li><p>关注财务杠杆，看两个比率。</p><ol><li><strong>负债与所有者权益的比率 = 负债总额 / 所有者权益</strong> （一般不用百分比）<ul><li>表示企业 1 美元的所有者权益负担多少债务。</li><li>企业所得税法规定，<strong>企业债务的利息允许从税前利润中扣除，从而抵免企业所得税。</strong></li><li>杠杆收购，指管理层或其他投资者利用债务全部买下企业的股票。</li><li>银行家喜欢债务权益比，利用这个比率确定是否为企业提供贷款。比率较高，利用债务筹集资金将变得非常困难。</li></ul></li><li><strong>利息保障倍数 = 营业利润 / 每年的利息费用</strong> （一般不用百分比）<ul><li>衡量企业的“利息风险”，即相对于所得，企业每年要支付多少利息。</li><li>表明企业支付利息的难易程度，比率越高表明企业可以承担的债务越多。</li></ul></li></ol></li></ul><h3 id="流动性比率 - 能付得起账单吗"><a href="# 流动性比率 - 能付得起账单吗" class="headerlink" title="流动性比率: 能付得起账单吗?"></a>流动性比率: 能付得起账单吗?</h3><blockquote><p>流动性比率，表示企业履行所有财务责任的能力，不仅仅是债务，还包括支付工资、向供应商付款、纳税等。对于小企业尤为重要。</p></blockquote><ol><li><p>会计上“流动”指期限在一年以内。</p><ol><li><strong>流动资产 </strong>，指 1 年一年可变现的资产，主要指<strong> 应收账款、存货、现金</strong>。</li><li><strong>流动负债 </strong>，指 1 年以内需要偿还的债务，主要指<strong> 应付账款及短期贷款</strong>。</li></ol></li><li><p><strong>流动比率</strong> = 流动资产 / 流动负债 （一般不用百分比）</p><ul><li>衡量企业流动资产与流动负债对比的指标。</li><li>对于股东来讲，流动比率太高意味着企业闲置了一批现金。</li></ul></li><li><p><strong>速动比率</strong> = （ 流动资产 - 存货 ）/ 流动负债 （一般不用百分比）</p><ul><li>也称酸性测试，是从流动比率中扣除存货后计算的比率。因为除存货外，其他流动资产相对容易变现，多数情况速动比率大于 1 较好。</li></ul></li></ol><h3 id="经营效率比率：最大限度地利用资产"><a href="# 经营效率比率：最大限度地利用资产" class="headerlink" title="经营效率比率：最大限度地利用资产"></a>经营效率比率：最大限度地利用资产</h3><blockquote><p>经营效率比率，帮助评估管理的资产负债表中的某些关键资产和负债的效率。 </p></blockquote><ol><li><p><strong><code>存货周转天数(DII) = 平均存货 / (产品成本 / 天数)</code></strong> (一般不用百分比)</p><ul><li>衡量存货在系统中停留的天数。</li><li>平均存货：期初存货与期末存货的平均值。</li><li>每天的产品成本：衡量每天实际使用的存货数量。</li></ul></li><li><p><strong><code>存货周转率 = 360 / DII (一般不用百分比)</code></strong></p><ul><li>指存货在一年内周转多少次。（02 年，沃尔玛，存货周转率 = 8.1；）   </li><li>存货周转率越高，或存货周转天数月底，对存货的管理越严密，现金状况就越好。  </li></ul></li><li><p><strong><code>应收账款周转天数(DSO) = 期末应收账款余额 / (收入 / 天数)</code></strong></p><ul><li>衡量用多少天可以收回销售收入，也就是客户多长时间能支付账单。</li></ul></li><li><p><strong><code>应付账款周转天数(DPO) = 期末应付账款余额 / (产品成本 / 天数)</code></strong></p><ul><li>表明企业平均用多长时间还清自己的应付账款。</li></ul></li><li><p><strong><code>土地、厂房和设备周转率(PPE 周转率) = 收入 / PPE</code></strong>       </p><ul><li>衡量使用固定资产赚取收入的效率。</li><li>PPE 周转率低，意味着企业没有最大限度地利用资产。</li><li>分析其趋势以及行业平均水平就可以看出企业效率如何。</li></ul></li><li><p><strong><code>总资产周转率 = 收入 / 总资产</code></strong>    </p><ul><li>衡量所有资产的使用效率。</li></ul></li></ol><h3 id="工具箱 -4"><a href="# 工具箱 -4" class="headerlink" title="工具箱"></a>工具箱</h3><ul><li><p>哪些比率对你的企业最重要？     </p><ul><li>企业需要根据经营环境和竞争状况，设计本企业的关键比率。       </li></ul></li><li><p>销售收入百分比的作用        </p><ul><li>每个项目以销售收入的百分比表示。  </li><li>追踪连续前几个会计期间的利润表，计算每个主要项目的销售收入百分比，画出趋势线，进行详细的分析。       </li></ul></li><li><p>比率之间的联系   </p><ul><li><strong><code>ROA = 净收入 / 资产 = 净利润率 * 资产周转率</code></strong>     <ol><li>提高净利润率，ROA 上升。    </li><li>提高资产周转率，ROA 上升。   </li></ol></li><li>发现比率之间的关系，并尝试改进这些比率是击败竞争对手的有效途径。  </li></ul></li></ul><hr><h2 id="六 - 计算并真正理解投资收益率"><a href="# 六 - 计算并真正理解投资收益率" class="headerlink" title="六 计算并真正理解投资收益率"></a>六 计算并真正理解投资收益率 </h2><h3 id="投资收益率的基本概念"><a href="# 投资收益率的基本概念" class="headerlink" title="投资收益率的基本概念"></a> 投资收益率的基本概念</h3><blockquote><p>“货币的时间价值”的基本原理 <br> 三个基本概念：<strong>终值、现值、必要收益率</strong>。    </p></blockquote><ol><li><p><strong>终值</strong></p><ul><li>指一笔钱被解除或投资，它在未来价值多少。</li><li>终值的每一次计算都包括了一系列假设，对从现在到你考察的时点会发生什么作出假设。</li></ul></li><li><p><strong>现值</strong></p><ul><li>常使用于资本性支出分析，表示未来的现金折算成当前的价值。</li><li>广泛使用于评估设备、不动产、商业机遇甚至并购中。</li></ul></li><li><p><strong>必要收益率</strong></p><ul><li>假设投资在未来得到一定的收益，希望知道为了在未来某一特定日期得到一定的收益现在需要投资多少。</li><li>因此，对利率或折现率的决策，实质上是为了作出投资需要多少收益率的决策。</li><li>它们在投资之前所要求的收益率，称为 <strong>“必要收益率”</strong> 或称<strong>“基准收益率”</strong>。</li><li>设立基准收益率时，存在一些判断：<ol><li>第一个因素，<strong>机会成本</strong><a href="** 机会成本 **，日常的语言形容，这一术语表示为了做某件事你不得不放弃的东西。例如，你把钱拿去度假了，机会成本就是，买不了车了。在企业中的机会成本一般指，“因为有没有从事财务上最优的行动，而放弃的潜在利益”。">^33</a>。<ul><li>企业现金有限，必须对如何最大限度地使用这些资金作出判断。</li></ul></li><li>第二个因素，企业自身要承担的 <strong> 资金成本</strong><a href="** 资金成本 **，财务分析师分三个步骤计算企业的资金成本：一，计算债务成本（利率）；二，估计股东的预期收益率；三，计算两者的加权平均值。假设一个企业以 4% 的利率借贷（已经考虑了利息费用可以从税收中扣除），股东与其 16% 的投资收益率。假设债务融资权重是 25%。股权融资的权重是 75%，资本成本就是 25%*4%+75%*16%=13%。如果一个项目的计划收益率超过 13%，就可能对其进行投资。">^34</a>。<ul><li>必要收益率，必须总是高于资金成本。</li><li>三步计算企业资金成本：<ol><li>财务成本（利率）</li><li>估计股东的预期收益率 </li><li>两者加权平均值</li></ol></li></ul></li></ol></li><li>基准收益率一般很少遵循某一公式，CFO 将对特定投资的风险、如何进行融资以及企业的总体状况进行评估。     </li></ul></li></ol><h3 id="投资收益率的实质"><a href="# 投资收益率的实质" class="headerlink" title="投资收益率的实质"></a>投资收益率的实质</h3><blockquote><p>决定进行什么样的投资以提升企业价值的过程。 </p></blockquote><ol><li><p>分析资本性支出</p><ul><li>资本性支出指需要很多资金的大型项目。</li><li>一般认为，资本性支出可以在一年以上的期限内产生收入或降低成本。</li><li>为什么这些支出的需要特别处理<ol><li>资本性支出占有企业较多的资金</li><li>一般预期在几年内给企业带来收益，因此要运用货币的时间价值</li><li>总是具有一定程度的风险</li></ol></li><li>让工程师和技术人员参与资本预算过程非常正确，他们需要了解一些财务知识</li><li>如何进行分析<ol><li>第一步，确定初始现金投入，包含着估计和假设。<ul><li>设备购买价格、安装费用、学习费用等等，都应作为现金支出，不应抵减利润。</li></ul></li><li>第二步，预测这项投资未来的现金流。</li><li>第三步，评估未来的现金流 — 计算投资收益。<ul><li>常见三种方法：<strong>回收期法、净现值法(NPV)、内含报酬率法(IRR)。</strong></li></ul></li></ol></li></ul></li><li><p>分析资本性支出的三种方法</p><ol><li><strong>回收期法</strong> <ul><li><strong>回收期 = 初始投资 / 每年产生的现金流</strong></li><li>衡量从项目产生的现金流中收回初始投资所需要的时间。 </li><li>回收期应低于项目使用期限。</li><li>只用于比较项目或拒绝项目(知道哪个项目可以收回初始投资)。</li></ul></li><li><strong>净现值法 NPV</strong><ul><li>折现方程<ul><li><code>PV = FV1/(1+i) + FV2/(1+i)^2 + FV3/(1+i)^3 + ... + FVn/(1+i)^n</code> <ul><li>PV = 现值；</li><li>FV = 每一期间预计产生的现金流；</li><li>i = 折现率或基准收益率；</li><li>n = 考察的期间数；</li></ul></li><li><code>NPV = PV - 初始投资</code></li></ul></li><li>如果一个项目的净现值大于零，就应该接受，该项目的收益率大于企业的基准收益率。</li><li>一般是财务专业人员分析资本性支出的首选方法<ol><li>考虑了货币的时间价值，把未来的现金流折现到其今天的价值</li><li>考虑了企业的资本成本或基准收益率</li><li>给出了收益的现值，因此可以把初始投资与收益现值进行比较</li></ol></li><li>折现率与净现值 NPV 的关系：<br>  — 折现率提高 -&gt; NPV 降低；折现率降低 -&gt; NPV 提高；较高的折现率，意味着资金有较高的机会成本。<ul><li>具有潜在的缺点，计算净现值要依据较多的估计和假设。</li></ul></li></ul></li><li><strong>内含报酬率法 IRR</strong><ul><li>计算投资获得的现金流实际能提供多少收益。把收益率与基准收益率相比较。</li><li>调整基准收益率，并找到使得净现值为 0 的点时，该基准收益率即为项目的内含报酬率。</li><li>当彼此竞争的项目有不同的持续期时，单独使用 IRR 会使我们偏好于回收期短、收益率高的项目，而本应该投资于回收期较长、收益率较低的项目。另外 IRR 也没有解决规模问题。 </li></ul></li></ol></li><li><p>三种方法的比较</p><blockquote><p>对重大投资项目，同时使用内含报酬率法和净现值法更有意义。<br>当三种方法出现冲突时，最好选择净现值法。</p></blockquote><ul><li>使用净现值法进行投资决策非常有意义，分析资本性支出时需要采取最重要的步骤就是对现金流本身的预测。</li><li>一般来说，进行敏感性分析也十分有意义。</li></ul></li></ol><h3 id="工具箱 -5"><a href="# 工具箱 -5" class="headerlink" title="工具箱"></a>工具箱</h3><ul><li>分析资本性支出的步骤指南<ol><li>一份关于投资收益率的计划书 = 一份该项目资本性支出的分析报告，了解投资是否值得，并且希望用计算来支持。</li><li>收集有关投资成本的所有数据。<ul><li>包括购买价格、运输成本、安装费用、停工修理费用、调试费用等等。还需要确定设备使用年限。</li></ul></li><li>根据它可为企业节省的费用或者增加的收入，确定新设备的收益。</li><li>确定企业对这类投资的基准收益率。用该基准收益率计算投资的净现值。</li><li>同时计算回收期内和内含报酬率。</li><li>写出简洁明了的计划书。<ul><li>介绍项目，列出成本和收益（既包括财务方面的，也包括其他方面的），描述风险。</li><li>解释它如何与公司的发展战略和竞争状况相匹配，要进行净现值、回收期和内含报酬率的计算。</li><li>确切解释哪些估计值很好，哪些地方可能不确定，作出敏感性分析。</li><li>一项谨慎的计划更容易得到资金，它更有可能从长远角度最大限度地增加企业的价值。</li></ul></li></ol></li></ul><hr><h2 id="七 - 财务智慧的运用 - 运营资本管理"><a href="# 七 - 财务智慧的运用 - 运营资本管理" class="headerlink" title="七 财务智慧的运用: 运营资本管理"></a>七 财务智慧的运用: 运营资本管理 </h2><h3 id="资产负债表管理的魅力"><a href="# 资产负债表管理的魅力" class="headerlink" title="资产负债表管理的魅力"></a> 资产负债表管理的魅力</h3><blockquote><p>企业的财务部门负责管理资产负债表，负责计算应该以什么样的条件借多少钱，负责在必要的时候筹集股权投资，负责关注企业整体的资产和负债状况。   </p></blockquote><ol><li><strong>营运资本 </strong> 的构成<ul><li><strong><code>营运资本 = 流动资产 - 流动债务</code></strong></li><li>营运资本与生产循环<br><img src="http://upload-images.jianshu.io/upload_images/80247-6d81a8c966154ccb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="营运资本与生产循环"></li><li>企业需要多少营运资本？</li><li>非财务部门的管理者可以真正影响的三个运营资本账户是：<strong>应收账款、存货和应付账款。</strong></li></ul></li></ol><h3 id="资产负债表的杠杠作用"><a href="# 资产负债表的杠杠作用" class="headerlink" title="资产负债表的杠杠作用"></a>资产负债表的杠杠作用</h3><blockquote><p><strong>应收账款周转天数 DSO</strong>，企业 DSO 越长，运转起来需要的营运资本就越多。相反企业 DSO 越短，需要的营运资本越少。企业了解并运用 DSO 的人越多，企业可支配的现金就越多。</p></blockquote><ol><li><p><strong>应收账款管理</strong></p><blockquote><p>必须理解它的含义以及它在朝哪个方向发展。</p></blockquote><ul><li>经营经理和产品研发经理必须问问自己，产品是否存在什么问题而使客户不愿意付款，企业销售的产品是客户想要和得到吗？</li><li>面向客户的管理者也必须问类似的问题，我们的客户经营良好吗？行业中标准的付款期限是什么？客户的业务出现问题，也应该立即提醒销售人员和财务人员。</li><li>负责信用调查的管理者需要询问企业为客户提供的信用标准是否对公司有利，是否与客户的信用状况相匹配，应该精确设定某一客户的信用标准，还需确定现金折扣的政策，帮助企业刺激应收账款的收回，进而降低 DSO。</li><li>企业界定客户应该具备的特征：<ol><li>大企业 </li><li>公司因及时付款出名 </li><li>能维护和了解提供给他们的产品 </li><li>寻求持续的合作关系</li></ol></li></ul></li><li><p><strong>存货管理</strong></p><blockquote><p>精益制造、即时库存管理、经济订货批量等专门术语形容这一管理。</p></blockquote><ul><li>存货管理的挑战是把存货降低到最小量，仍能保证每一种原材料和每一个零部件在需要时够用，保证足够产品在客户需要时交付。</li><li>说到底就是需要多少存货既能满足消费者需求又能实现冻结资金最小。</li><li>不同的管理者对企业的存货使用都会产生影响，意味着同时也对企业营运资本产生影响。<ol><li>个性要求差异小，标准产品越多，企业持有的存货越少。</li><li>工程师升级产品版本，给存货管理带来负担。</li><li>生产部门对存货产生重大影响，高效率的生产流程实际可以使存货需求最小。</li></ol></li><li>当企业发展良好时，保持较低的产品单价是有效管理模式中管理生产成本的一种方法。</li><li>但当产品需求放缓时，生产管理者必须既考虑产品的单位成本，又要考虑现金。</li></ul></li></ol><h3 id="追踪资金周转"><a href="# 追踪资金周转" class="headerlink" title="追踪资金周转"></a>追踪资金周转</h3><blockquote><p>现金周转期，衡量企业收回现金的效率如何。<br>还有确定企业在多长时间内支付它欠供货商的钱。<br>财务角度，鼓励管理者使 DPO 最大化，使得企业保留更多现金。但也要考虑企业与供应商建立的是何种关系，希望建立什么样的信誉。<br>长远来看，DPO 大大大于 DSO 会比较影响与供应商的良好关系，DPO 缩短有利于围绕企业建立一个强大的利益共同体。</p></blockquote><ul><li><strong>资金周转期</strong><ul><li>现金周转示意图<br><img src="http://upload-images.jianshu.io/upload_images/80247-b38ea257edcf87d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="现金周转示意图"></li><li>确定所有这些阶段需要花费多长时间，并能理解企业的现金要被占多长时间。</li><li><strong><code>现金周转期 = DSO + DII - DPO</code></strong><ul><li>DSO: 应收账款周转天数</li><li>DII: 存货周转天数</li><li>DPO: 应付账款周转天数</li></ul></li><li>提供了一种计算企业需要多少现金的方法：<ul><li>把每天的销售收入乘以现金周转期的天数就可以了。</li></ul></li><li><strong>缩短现金周转期：降低 DSO、降低存货、增加 DPO</strong>。</li></ul></li></ul><h3 id="工具箱 -6"><a href="# 工具箱 -6" class="headerlink" title="工具箱"></a>工具箱</h3><ul><li>应收账款的时效   <ul><li>应收账款周转天数 DSO 不是唯一的一种衡量指标，另一个指标是应收账款时效。</li><li>考察应收账款时效一般是真正了解企业应收账款状况的关键。</li><li>时效性分析提醒我们关注这类数字:30 天内可以收回的应收账款、30~60 天内可以收回的应收账款等。</li></ul></li></ul><hr><h2 id="八 - 创立财务智慧部分"><a href="# 八 - 创立财务智慧部分" class="headerlink" title="八 创立财务智慧部分"></a>八 创立财务智慧部分 </h2><h3 id="财务知识普及和企业业绩"><a href="# 财务知识普及和企业业绩" class="headerlink" title="财务知识普及和企业业绩"></a> 财务知识普及和企业业绩</h3><ol><li><p>提高企业业绩</p><ul><li>一般认为，财务智慧越高，企业业绩越好。</li><li>有财务智慧的管理者能够更有效的管理资源、更巧妙地利用财务信息，进而增强企业赢利能力和现金流。</li><li>企业的计划应该是把员工的努力和企业的季度利润分配直接挂钩。</li><li>建立阳光、透明和公开的交流，当人们理解了企业目标并努力去实现这些目标时，就容易建立起充满信任感和归属感的组织氛围。</li><li>财务培训十分重要，它是增长财务智慧的方法，他们将关注重点放在自己可以产生影响的数字上，酶切同时得到季度利润分享。</li><li>有着财务智慧的管理者能够对不确定性更快地作出反应，如果他们理解了其努力工作所追寻的财务目标。</li></ul></li><li><p>把财务知识应用于日常管理</p><ul><li>如果他们知道自己部门的业绩如何衡量，知道自己每天工作的财务意义，各个部门都能够作出更明智的决策.</li><li>第一线员工和管理者应该了解什么事企业需要的，才能更出色地完成工作。</li><li>企业大规模地让员工、一线管理者参与业绩目标、主要业绩指数和其他标准的制定。</li><li>绝大多数人愿意适应新情况，只要他们理解了发生变化的原因。</li><li>员工参数性的衡量标准，其中两个指标是“企业业绩、计划和目标的信息分享独”和培训员工“了解企业的能力”。</li><li>企业对员工的财务知识普及得越多，企业经营得越好。</li><li>所有有员工都确切地知道企业的状况。</li><li>在财务信息对所有人公开的情况下，任何人想改动账目都十分困难。</li></ul></li></ol><h3 id="财务知识普及战略"><a href="# 财务知识普及战略" class="headerlink" title="财务知识普及战略"></a>财务知识普及战略</h3><blockquote><p>制定实现财务智慧的战略。</p></blockquote><ul><li><p>财务地图  </p><ul><li>用图解说明利润从何而来等问题，清晰地显示整个业务流程，显示了每一元的销售收入要支付每个部门的多少费用，清晰地说明留存了多少利润，而且让企业的每个人能够看到企业全部的经营活动。</li></ul></li><li><p>一个企业最好张贴两份这样的地图</p><ol><li>一张显示企业的目标数字 — 最好的分公司将要做的；</li><li>另一张上管理者则写出了本部门的实际数字。人们可以看到每一个关键指标与最好的部门多么接近，或者差距大小。</li></ol></li><li><p>工具和方法</p><blockquote><p>与成年人学习方法有关的重要规则，最重要的一条就是在学习中让他们参与。<br>在介绍一些基本原理后，让他们做一些计算，讨论产生的影响，并解释其中的意义。<br>如果他们理解全局背景，以及所学与工作的联系，与企业经营成果的联系以及与个人财务状况的联系，他们将密切注意。另外，要让大家不会因为不知道而尴尬，保证教学目标明确，保持教学过程有趣。</p></blockquote><ol><li>培训(反复进行)<ul><li>召开多次集中的培训</li><li>每次集中介绍一个财务概念，介绍三个表等；根据部门情况，重点关注特定的数值，如毛利润、销售费用率等等。</li></ul></li><li>每周的“数字”会议<ul><li>制定部门的指标数字，关注哪些关键数字在某些财务报表中有重要的关系，并最终影响企业的财务来源。</li><li>一旦他们对预测产生了兴趣，就会认为自己是数字的主人。</li></ul></li><li>强化: 记分板和其他直观教具<ul><li>不仅建议在会议上讨论关键的数据，也建议在一块计分板上张贴这些数据，把现在的业绩和过去的业绩以及对未来的预测相比较。对于这样的“仪表盘”，一定要保证清楚、直观、易于查看。</li></ul></li></ol></li></ul><h3 id="财务透明度：我们的最终目标"><a href="# 财务透明度：我们的最终目标" class="headerlink" title="财务透明度：我们的最终目标"></a>财务透明度：我们的最终目标</h3><ul><li>就企业而言，我们更相信财务知识的力量，和财务智慧运用到企业经营中的必要性。 </li><li>财务信息是企业的神经系统，它放映了企业可以走多远 — 企业的长处在哪儿、弱势在哪儿，以及机遇和威胁在哪儿。 </li></ul><h3 id="工具箱 -7"><a href="# 工具箱 -7" class="headerlink" title="工具箱"></a>工具箱</h3><ul><li>萨班斯—奥克斯利法案<ol><li>建立公共企业会计监督委员会。</li><li>禁止财务公司向客户提供审计和非审计服务。</li><li>要求董事会中只要有一位财务专家。</li><li>要求监事会必须建立一套程序，使员工能够绝对保密地向监事会主管披露会计欺诈。</li></ol></li><li>此外，法律还禁止企业向高管人员和行政主管给予个人贷款或为个人贷款担保。</li></ul><hr><h2 id="附录 - 财务报表样表"><a href="# 附录 - 财务报表样表" class="headerlink" title="附录 财务报表样表"></a>附录 财务报表样表</h2><ul><li>一家虚构公司的财务报表<ol><li>利润表<br><img src="http://upload-images.jianshu.io/upload_images/80247-9e1e3366c5223f06.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="利润表"></li><li>资产负债表<br><img src="http://upload-images.jianshu.io/upload_images/80247-0200879c229d6468.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="资产负债表"></li><li>现金流量表<br><img src="http://upload-images.jianshu.io/upload_images/80247-b7b3a118a6ea09a0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="现金流量表"></li></ol></li></ul><hr><p>[^14]: <strong>公认会计准则</strong>，GAAP 是“公认会计准则(Generally accepted accounting principles)”的缩写。GAAP 制定美国财务报表的标准。它有助于保证财务报表的有效性和可信性，使得企业之间和行业之间的财务报表的比较更容易。</p><p>大多数优先股没有投票权。在某种程度上，它们与其说是股票，不如说是债券。区别是什么？债券的持有者得到固定的利息，而优先股的持有者得到固定的股利。公司利用优先股筹集资本，因为它与债务有不同的法律意义。如果公司不能支付债券利息，债券持有人可以强制公司破产。而有限股持有人一般没有这个权利。       </p><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/e9d804af/">https://blog.zsliang.me/posts/e9d804af/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;财务智慧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[美] 卡伦·伯曼 | 商务印书馆 &lt;/li&gt;
&lt;li&gt;Summarized by Zachary &lt;/li&gt;
&lt;li&gt;Completed on N
      
    
    </summary>
    
      <category term="Books" scheme="https://blog.zsliang.me/categories/Books/"/>
    
    
      <category term="Financial" scheme="https://blog.zsliang.me/tags/Financial/"/>
    
      <category term="Accounting" scheme="https://blog.zsliang.me/tags/Accounting/"/>
    
  </entry>
  
  <entry>
    <title>Keynote Tutorial</title>
    <link href="https://blog.zsliang.me/posts/a2b62ad8/"/>
    <id>https://blog.zsliang.me/posts/a2b62ad8/</id>
    <published>2014-01-01T05:00:00.000Z</published>
    <updated>2019-04-20T00:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><blockquote><p>Keynote Tutorial | 许岑  </p></blockquote><ul><li>Summarized by Dodo</li><li>Continuous Updates</li><li><a href="http://v.xue.taobao.com/learn.htm?courseId=18492" rel="external nofollow noopener noreferrer" target="_blank">《许岑的幻灯片制作软件 Keynote 视频教程》</a></li></ul><hr><h3 id="02- 为什么要做幻灯片？"><a href="#02- 为什么要做幻灯片？" class="headerlink" title="02. 为什么要做幻灯片？"></a>02. 为什么要做幻灯片？</h3><ul><li><strong>配合演讲者的说的内容，让观众听你说话的同时，用这种视觉的东西配合的展示。</strong>    <ul><li>人的注意力有限；      </li><li>重点应该放在你以及你的演讲上；  </li></ul></li></ul><blockquote><p>单纯给人看的… :P</p></blockquote><h3 id="03- 越用心越丑陋"><a href="#03- 越用心越丑陋" class="headerlink" title="03. 越用心越丑陋"></a>03. 越用心越丑陋</h3><ul><li>多用心看，看设计作品、看美术作品、提升审美。    </li></ul><h3 id="04- 认识界面"><a href="#04- 认识界面" class="headerlink" title="04. 认识界面"></a>04. 认识界面</h3><blockquote><p>很多投影幕布仍然需要 <code>4:3</code></p></blockquote><ul><li>Keynote 的主要按钮：<br>  Table — 表格<br>  Chart — 图表（柱状图）<br>  Shape — 形状<br>  Media — 媒体库<br>  Comment — 批注<br>  Copy&amp;Paste style — 复制 &amp; 粘贴样式<br>  Format — 格式<br>  Animate — 动画<br>  Document — 文稿       </li></ul><h3 id="05- 参考线与对齐"><a href="#05- 参考线与对齐" class="headerlink" title="05. 参考线与对齐"></a>05. 参考线与对齐</h3><ul><li><p>自带参考线     </p></li><li><p>右键</p><ul><li><code>Align Objects</code> （对齐对象） / <code>Distribute Objects</code> （分布对象）</li></ul></li></ul><h3 id="06- 次序"><a href="#06- 次序" class="headerlink" title="06. 次序"></a>06. 次序</h3><ul><li><p>完整呈现具有 <strong> 并列关系 </strong> 的内容在同一幻灯片上。</p><ul><li>如此做，先展示第一点，第二点出现同时对第一点做渐隐，用透明度区别开来，如此类推，最后再全显示总结。    </li><li>做到让观众 <strong> 一次只关注一点 </strong> 内容，其他 <strong> 不明显地存在 </strong> 在页面中即可。</li></ul></li><li><p>如何操作：</p><ol><li>Add an Effect: <code>Appear</code>（出现）&amp; <code>Opacity</code>（透明度 <code>10%</code> 会是比较好的效果）;</li><li>Build Order: Start（With Build1 随着 1 进行）;</li><li>整个复制到新页面</li><li>Build In &amp; Action: Change None        </li></ol></li></ul><h3 id="07- 纵深关系"><a href="#07- 纵深关系" class="headerlink" title="07. 纵深关系"></a>07. 纵深关系</h3><ul><li><p><strong>逻辑问题</strong></p><ul><li>send to back &amp; bring to front; </li></ul></li><li><p>层级的纵深关系。   </p></li></ul><h3 id="08- 一致性和完整性"><a href="#08- 一致性和完整性" class="headerlink" title="08. 一致性和完整性"></a>08. 一致性和完整性</h3><ul><li><p>一致性：视觉形式的一致性。    </p></li><li><p>完整性：「回」到主界面，然后再「挪」出细分界面，来保持内容的完整性。    </p></li></ul><h3 id="09- 字体"><a href="#09- 字体" class="headerlink" title="09. 字体"></a>09. 字体</h3><ul><li>千万不要轻易使用默认的字体。            </li><li>要容易让别人辨识！<strong>辨识度</strong>！！！    </li><li>字体的选择非常有讲究，要基于字体的设计理念和审美取向，尤其中文字体，还有加粗下划线等也是需要考虑的。    </li><li>字体是非常重要的，需要慎重选择，要对应演讲的内容和主题！<ul><li>e.g. 科颜氏化妆品，背后的字体，给人权威的感觉</li></ul></li></ul><h3 id="10- 背景"><a href="#10- 背景" class="headerlink" title="10. 背景"></a>10. 背景</h3><ul><li><p>背景的选择：正确与合适的理念。  </p></li><li><p>演讲者的身份，听众的身份，相互的立场与关系，听众会有怎样的心理感受。      </p><ul><li>e.g. 纯白的背景，上下用灰度渐变的效果。            </li></ul></li></ul><h3 id="11- 更美观的文字"><a href="#11- 更美观的文字" class="headerlink" title="11. 更美观的文字"></a>11. 更美观的文字</h3><ul><li>针对每一页的文字进行艺术设计。    </li></ul><h3 id="12- 文字符号"><a href="#12- 文字符号" class="headerlink" title="12. 文字符号"></a>12. 文字符号</h3><ul><li><p>常用于几段文字之间的并列关系。    </p></li><li><p>如何制作文字符号    </p><ul><li>Text -&gt; Style -&gt; Bullets &amp; Lists -&gt; Text Bullets        </li></ul></li></ul><h3 id="13- 取色"><a href="#13- 取色" class="headerlink" title="13. 取色"></a>13. 取色</h3><ul><li>Colors -&gt; 放大镜 -&gt; 取色;    </li><li>更准确地为文字配置适当的颜色；            </li></ul><h3 id="14- 图片"><a href="#14- 图片" class="headerlink" title="14. 图片"></a>14. 图片</h3><ul><li>图片库:<ol><li><a href="https://www.shutterstock.com" rel="external nofollow noopener noreferrer" target="_blank">www.shutterstock.com</a>（包月制）</li><li><a href="https://www.dreamstime.com" rel="external nofollow noopener noreferrer" target="_blank">www.dreamstime.com</a>（比较贵）</li><li><a href="https://istockphoto.com" rel="external nofollow noopener noreferrer" target="_blank">istockphoto.com</a>（比较贵）</li></ol></li></ul><h3 id="15- 图片的裁剪与修饰"><a href="#15- 图片的裁剪与修饰" class="headerlink" title="15. 图片的裁剪与修饰"></a>15. 图片的裁剪与修饰</h3><ol><li><p>裁剪 Image -&gt; Edit Mask(编辑遮罩)    </p></li><li><p>修饰 Style    </p></li><li><p>去掉 Logo 的背景 Image -&gt; Instant Alpha </p><ul><li>适合用于边沿与背景明显对比的图片；</li><li>否则还是用 photo 来修饰；</li></ul></li></ol><h3 id="16- 声画同步"><a href="#16- 声画同步" class="headerlink" title="16. 声画同步"></a>16. 声画同步</h3><ul><li><p>嵌入音频文件，Music 库中直接拉入即可。       </p></li><li><p>声画同步</p><ul><li>动作配音效，网络找音效资源文件。        </li></ul></li></ul><h3 id="17- 视频"><a href="#17- 视频" class="headerlink" title="17. 视频"></a>17. 视频</h3><ul><li>用视频，可以帮助演讲者表达，更容易让人理解一些抽象的东西。        </li></ul><h3 id="18- 图表"><a href="#18- 图表" class="headerlink" title="18. 图表"></a>18. 图表</h3><ul><li><p>构建图表 -&gt; 编辑数据 -&gt; Chart / Wedges / Arrange；    </p></li><li><p>快捷方式：Copy Style -&gt; Paste Style；    </p></li><li><p>关键要 <strong> 知道展示是什么数据</strong>。        </p><ol><li>线图    </li><li>饼图    </li><li>柱状图    </li></ol></li></ul><h3 id="19- 形状的更多用途"><a href="#19- 形状的更多用途" class="headerlink" title="19. 形状的更多用途"></a>19. 形状的更多用途</h3><ul><li>Shape 示例<ol><li>划线 标明    </li><li>空心圆 Border 动画：Scale big    </li><li>Draw with pen    <ul><li>白描！效果特别好</li></ul></li><li>Group 组合            </li></ol></li></ul><h3 id="20- 动作效果"><a href="#20- 动作效果" class="headerlink" title="20. 动作效果"></a>20. 动作效果</h3><ul><li><p>动画效果要慎用。    </p></li><li><p>还原真实世界的情景。    </p><ol><li>Build In 出现 / Action 动作 / Build Out 消失      </li><li>多了解具体动画效果。    </li><li>幻灯片之间过渡效果，要符合内容。    </li><li>Magic Move 神奇移动        </li></ol></li></ul><h3 id="21- 动作顺序与成组"><a href="#21- 动作顺序与成组" class="headerlink" title="21. 动作顺序与成组"></a>21. 动作顺序与成组</h3><ul><li>Build Order -&gt; Start (On Click / With Build1 / After Build 1) 顺序    </li><li>右键 Group / Ungroup 成组        </li></ul><h3 id="22- 神奇移动"><a href="#22- 神奇移动" class="headerlink" title="22. 神奇移动"></a>22. 神奇移动</h3><ul><li>当上一页幻灯片，和下一页幻灯片，同时有相同的元素存在，只是因为排版、大小、位置等的不同，就可以用神器移动的效果。        </li></ul><h3 id="23- 情商在幻灯片制作中的体现"><a href="#23- 情商在幻灯片制作中的体现" class="headerlink" title="23. 情商在幻灯片制作中的体现"></a>23. 情商在幻灯片制作中的体现</h3><ul><li><p>与主办方确定场地状况。 </p></li><li><p>Thank you. </p><ul><li>结尾不要缩写，要显示诚意。       </li></ul></li></ul><h3 id="24- 对耐力的挑战"><a href="#24- 对耐力的挑战" class="headerlink" title="24. 对耐力的挑战"></a>24. 对耐力的挑战</h3><ul><li>计数器。        </li></ul><h3 id="30-「默认」的艺术品"><a href="#30-「默认」的艺术品" class="headerlink" title="30. 「默认」的艺术品"></a>30. 「默认」的艺术品</h3><ul><li><p>要避免使用默认的设置。    </p></li><li><p>需要了解一下内容：</p><ol><li>电影、音乐、美术、设计等。    </li><li>专业软件 final cut；logical call；photo shop；Ai;        </li></ol></li></ul><h3 id="44- 更正确的出现"><a href="#44- 更正确的出现" class="headerlink" title="44. 更正确的出现"></a>44. 更正确的出现</h3><ul><li>出现的方式，使信息 <strong> 展现 </strong> 更加 <strong> 吻合 </strong> 信息 <strong> 内容</strong>。        </li></ul><h3 id="45- 擅于「作弊」的手法"><a href="#45- 擅于「作弊」的手法" class="headerlink" title="45. 擅于「作弊」的手法"></a>45. 擅于「作弊」的手法</h3><ul><li>图片分层，可以解决很多问题。    </li></ul><h3 id="46- 三谈关于乔布斯说的电影级幻灯片"><a href="#46- 三谈关于乔布斯说的电影级幻灯片" class="headerlink" title="46. 三谈关于乔布斯说的电影级幻灯片"></a>46. 三谈关于乔布斯说的 <strong> 电影级幻灯片</strong></h3><ol><li>节奏   </li><li>焦点   <ul><li><strong>一个页面应该只有一个焦点</strong>。 </li></ul></li><li>构图   </li><li>声画对位     </li></ol><h3 id="53- 以正确的方式制作幻灯片"><a href="#53- 以正确的方式制作幻灯片" class="headerlink" title="53. 以正确的方式制作幻灯片"></a>53. 以正确的方式制作幻灯片</h3><ol><li><p>幻灯片分两种   </p><ol><li>给人看的     </li><li><p>给人讲的    </p><blockquote><p>写文字稿的必要性 <br> 一套逻辑完美、制作精良的幻灯片，要基于一份完备的逐字稿。   </p></blockquote></li></ol></li><li><p>使用「默认」的样式            </p></li><li>不要乱用动画   </li><li>常用图表规则       </li></ol><hr><h3 id="幻灯片点评"><a href="# 幻灯片点评" class="headerlink" title="幻灯片点评"></a>幻灯片点评</h3><ul><li>切换新内容不要使用叠化的形式。    </li><li>内容被背景无效信息占用太多。    </li><li>图片素材细节问题。    </li><li>神奇移动约 0.7-0.8s 之间即可。</li><li>运用遮罩来获取图标。Format 格式 -&gt; Image 图片 -&gt; Mask with Shape 用形状进行遮罩    </li><li>标题线</li></ul><h3 id="Upcoming"><a href="#Upcoming" class="headerlink" title="Upcoming"></a>Upcoming</h3><blockquote><p>Keep Updating…</p></blockquote><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/a2b62ad8/">https://blog.zsliang.me/posts/a2b62ad8/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Keynote Tutorial | 许岑  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Summarized by Dodo&lt;/li&gt;
&lt;li&gt;Continuous Updates&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="Ability" scheme="https://blog.zsliang.me/categories/Ability/"/>
    
    
      <category term="Keynote" scheme="https://blog.zsliang.me/tags/Keynote/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.zsliang.me/posts/4a17b156/"/>
    <id>https://blog.zsliang.me/posts/4a17b156/</id>
    <published>1970-01-01T05:00:00.000Z</published>
    <updated>2019-04-20T00:37:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p><p><br \=""><strong>Author:&nbsp;Zachary</strong><br \=""><strong>Post link:&nbsp;</strong> <a href="https://blog.zsliang.me/posts/4a17b156/">https://blog.zsliang.me/posts/4a17b156/</a> <br \=""><strong>Copyright:&nbsp;</strong>All articles in this blog are licensed under <a target="_blank"rel="external nofollow noopener noreferrer"href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><b>CC BY-NC-SA 4.0</b></a> unless stating additionally.<br \=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.
      
    
    </summary>
    
      <category term="nil" scheme="https://blog.zsliang.me/categories/nil/"/>
    
    
      <category term="nil" scheme="https://blog.zsliang.me/tags/nil/"/>
    
  </entry>
  
</feed>
